
RobotFinalDraft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b50  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  08008cf0  08008cf0  00018cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800926c  0800926c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800926c  0800926c  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800926c  0800926c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800926c  0800926c  0001926c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009270  08009270  00019270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08009274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  200001ec  08009460  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  08009460  00020468  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f93  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a4f  00000000  00000000  0002a1af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  0002bc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000710  00000000  00000000  0002c3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020a37  00000000  00000000  0002cab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009369  00000000  00000000  0004d4ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1afe  00000000  00000000  00056858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00118356  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003350  00000000  00000000  001183ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008cd8 	.word	0x08008cd8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	08008cd8 	.word	0x08008cd8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff23 	bl	8000b0c <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc99 	bl	8000628 <__aeabi_dmul>
 8000cf6:	f7ff ff6f 	bl	8000bd8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc1a 	bl	8000534 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc90 	bl	8000628 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff fad2 	bl	80002b8 <__aeabi_dsub>
 8000d14:	f7ff ff60 	bl	8000bd8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	db0b      	blt.n	8000d4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	f003 021f 	and.w	r2, r3, #31
 8000d3c:	4907      	ldr	r1, [pc, #28]	; (8000d5c <__NVIC_EnableIRQ+0x38>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	095b      	lsrs	r3, r3, #5
 8000d44:	2001      	movs	r0, #1
 8000d46:	fa00 f202 	lsl.w	r2, r0, r2
 8000d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000e100 	.word	0xe000e100

08000d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	db0a      	blt.n	8000d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	490c      	ldr	r1, [pc, #48]	; (8000dac <__NVIC_SetPriority+0x4c>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	0112      	lsls	r2, r2, #4
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	440b      	add	r3, r1
 8000d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d88:	e00a      	b.n	8000da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4908      	ldr	r1, [pc, #32]	; (8000db0 <__NVIC_SetPriority+0x50>)
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	3b04      	subs	r3, #4
 8000d98:	0112      	lsls	r2, r2, #4
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	761a      	strb	r2, [r3, #24]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <main>:


int getThetaAngle(int tHigh);

int main(void)
{
 8000db4:	b5b0      	push	{r4, r5, r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af02      	add	r7, sp, #8
  HAL_Init();
 8000dba:	f001 f803 	bl	8001dc4 <HAL_Init>
  SystemClock_Config();
 8000dbe:	f000 fd79 	bl	80018b4 <SystemClock_Config>
  GPIO_Init();
 8000dc2:	f000 fbf9 	bl	80015b8 <GPIO_Init>
  MX_USART1_UART_Init();
 8000dc6:	f000 fdd3 	bl	8001970 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000dca:	f000 fe01 	bl	80019d0 <MX_USART2_UART_Init>

  distance = getDistance();
 8000dce:	f000 fa4f 	bl	8001270 <getDistance>
 8000dd2:	eef0 7a40 	vmov.f32	s15, s0
 8000dd6:	4b84      	ldr	r3, [pc, #528]	; (8000fe8 <main+0x234>)
 8000dd8:	edc3 7a00 	vstr	s15, [r3]
  millis = HAL_GetTick();
 8000ddc:	f001 f84c 	bl	8001e78 <HAL_GetTick>
 8000de0:	4603      	mov	r3, r0
 8000de2:	4a82      	ldr	r2, [pc, #520]	; (8000fec <main+0x238>)
 8000de4:	6013      	str	r3, [r2, #0]

  while (1)
  {
	  if(HAL_GetTick() - millis > 1000)
 8000de6:	f001 f847 	bl	8001e78 <HAL_GetTick>
 8000dea:	4602      	mov	r2, r0
 8000dec:	4b7f      	ldr	r3, [pc, #508]	; (8000fec <main+0x238>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000df6:	d931      	bls.n	8000e5c <main+0xa8>
	  {
		  sprintf(buffer, "------Right Wheel----------|--------Left Wheel-------\n\rRevolutions: %0.3f cm/sec  |  Revolutions: %0.3f cm/sec \r\n", rTurns/1000, lTurns/1000);
 8000df8:	4b7d      	ldr	r3, [pc, #500]	; (8000ff0 <main+0x23c>)
 8000dfa:	edd3 7a00 	vldr	s15, [r3]
 8000dfe:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8000ff4 <main+0x240>
 8000e02:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000e06:	ee16 0a90 	vmov	r0, s13
 8000e0a:	f7ff fbb5 	bl	8000578 <__aeabi_f2d>
 8000e0e:	4604      	mov	r4, r0
 8000e10:	460d      	mov	r5, r1
 8000e12:	4b79      	ldr	r3, [pc, #484]	; (8000ff8 <main+0x244>)
 8000e14:	edd3 7a00 	vldr	s15, [r3]
 8000e18:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8000ff4 <main+0x240>
 8000e1c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000e20:	ee16 0a90 	vmov	r0, s13
 8000e24:	f7ff fba8 	bl	8000578 <__aeabi_f2d>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	e9cd 2300 	strd	r2, r3, [sp]
 8000e30:	4622      	mov	r2, r4
 8000e32:	462b      	mov	r3, r5
 8000e34:	4971      	ldr	r1, [pc, #452]	; (8000ffc <main+0x248>)
 8000e36:	4872      	ldr	r0, [pc, #456]	; (8001000 <main+0x24c>)
 8000e38:	f004 f9a8 	bl	800518c <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000e3c:	4870      	ldr	r0, [pc, #448]	; (8001000 <main+0x24c>)
 8000e3e:	f7ff f9d9 	bl	80001f4 <strlen>
 8000e42:	4603      	mov	r3, r0
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4a:	496d      	ldr	r1, [pc, #436]	; (8001000 <main+0x24c>)
 8000e4c:	486d      	ldr	r0, [pc, #436]	; (8001004 <main+0x250>)
 8000e4e:	f002 fe47 	bl	8003ae0 <HAL_UART_Transmit>
		  millis = HAL_GetTick();
 8000e52:	f001 f811 	bl	8001e78 <HAL_GetTick>
 8000e56:	4603      	mov	r3, r0
 8000e58:	4a64      	ldr	r2, [pc, #400]	; (8000fec <main+0x238>)
 8000e5a:	6013      	str	r3, [r2, #0]
	  }
	  GetMode();
 8000e5c:	f000 f8dc 	bl	8001018 <GetMode>

	  if (automaticMode == 1)
 8000e60:	4b69      	ldr	r3, [pc, #420]	; (8001008 <main+0x254>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	f040 80b9 	bne.w	8000fdc <main+0x228>
	  {
			  switch(state)
 8000e6a:	4b68      	ldr	r3, [pc, #416]	; (800100c <main+0x258>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	d8b9      	bhi.n	8000de6 <main+0x32>
 8000e72:	a201      	add	r2, pc, #4	; (adr r2, 8000e78 <main+0xc4>)
 8000e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e78:	08000e8d 	.word	0x08000e8d
 8000e7c:	08000ee5 	.word	0x08000ee5
 8000e80:	08000f59 	.word	0x08000f59
 8000e84:	08000fcd 	.word	0x08000fcd
 8000e88:	08000de7 	.word	0x08000de7
			  {
				  case FORWARD:

					  if(distance <= 10.0 && distance != 0.0)
 8000e8c:	4b56      	ldr	r3, [pc, #344]	; (8000fe8 <main+0x234>)
 8000e8e:	edd3 7a00 	vldr	s15, [r3]
 8000e92:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000e96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e9e:	d815      	bhi.n	8000ecc <main+0x118>
 8000ea0:	4b51      	ldr	r3, [pc, #324]	; (8000fe8 <main+0x234>)
 8000ea2:	edd3 7a00 	vldr	s15, [r3]
 8000ea6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eae:	d00d      	beq.n	8000ecc <main+0x118>
					  {
						  if(duration % 2 == 0)
 8000eb0:	4b57      	ldr	r3, [pc, #348]	; (8001010 <main+0x25c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d103      	bne.n	8000ec4 <main+0x110>
						  {
							  state = LEFT;
 8000ebc:	4b53      	ldr	r3, [pc, #332]	; (800100c <main+0x258>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	701a      	strb	r2, [r3, #0]
						  if(duration % 2 == 0)
 8000ec2:	e00e      	b.n	8000ee2 <main+0x12e>
						  }
						  else
						  {
							  state = RIGHT;
 8000ec4:	4b51      	ldr	r3, [pc, #324]	; (800100c <main+0x258>)
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	701a      	strb	r2, [r3, #0]
						  if(duration % 2 == 0)
 8000eca:	e00a      	b.n	8000ee2 <main+0x12e>
						  }
					  }
					  else
					  {
						  distance = getDistance();
 8000ecc:	f000 f9d0 	bl	8001270 <getDistance>
 8000ed0:	eef0 7a40 	vmov.f32	s15, s0
 8000ed4:	4b44      	ldr	r3, [pc, #272]	; (8000fe8 <main+0x234>)
 8000ed6:	edc3 7a00 	vstr	s15, [r3]
						  direction(FORWARD);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f000 f908 	bl	80010f0 <direction>
					  }
					  break;
 8000ee0:	e081      	b.n	8000fe6 <main+0x232>
 8000ee2:	e080      	b.n	8000fe6 <main+0x232>
				  case LEFT:
					  if(prevState != state)
 8000ee4:	4b4b      	ldr	r3, [pc, #300]	; (8001014 <main+0x260>)
 8000ee6:	781a      	ldrb	r2, [r3, #0]
 8000ee8:	4b48      	ldr	r3, [pc, #288]	; (800100c <main+0x258>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d00d      	beq.n	8000f0c <main+0x158>
					  {
						  direction(STOP);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 f8fd 	bl	80010f0 <direction>
						  distance = getDistance();
 8000ef6:	f000 f9bb 	bl	8001270 <getDistance>
 8000efa:	eef0 7a40 	vmov.f32	s15, s0
 8000efe:	4b3a      	ldr	r3, [pc, #232]	; (8000fe8 <main+0x234>)
 8000f00:	edc3 7a00 	vstr	s15, [r3]
						  prevState = state;
 8000f04:	4b41      	ldr	r3, [pc, #260]	; (800100c <main+0x258>)
 8000f06:	781a      	ldrb	r2, [r3, #0]
 8000f08:	4b42      	ldr	r3, [pc, #264]	; (8001014 <main+0x260>)
 8000f0a:	701a      	strb	r2, [r3, #0]
					  }
					  if(HAL_GetTick() - millis >= 250)
 8000f0c:	f000 ffb4 	bl	8001e78 <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	4b36      	ldr	r3, [pc, #216]	; (8000fec <main+0x238>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	2bf9      	cmp	r3, #249	; 0xf9
 8000f1a:	d961      	bls.n	8000fe0 <main+0x22c>
					  {
						  if(distance > 15.0)
 8000f1c:	4b32      	ldr	r3, [pc, #200]	; (8000fe8 <main+0x234>)
 8000f1e:	edd3 7a00 	vldr	s15, [r3]
 8000f22:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8000f26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f2e:	dd03      	ble.n	8000f38 <main+0x184>
						  {
							  state = FORWARD;
 8000f30:	4b36      	ldr	r3, [pc, #216]	; (800100c <main+0x258>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
 8000f36:	e009      	b.n	8000f4c <main+0x198>
						  }
						  else
						  {
							  distance = getDistance();
 8000f38:	f000 f99a 	bl	8001270 <getDistance>
 8000f3c:	eef0 7a40 	vmov.f32	s15, s0
 8000f40:	4b29      	ldr	r3, [pc, #164]	; (8000fe8 <main+0x234>)
 8000f42:	edc3 7a00 	vstr	s15, [r3]
							  direction(LEFT);
 8000f46:	2001      	movs	r0, #1
 8000f48:	f000 f8d2 	bl	80010f0 <direction>
						  }
						  millis = HAL_GetTick();
 8000f4c:	f000 ff94 	bl	8001e78 <HAL_GetTick>
 8000f50:	4603      	mov	r3, r0
 8000f52:	4a26      	ldr	r2, [pc, #152]	; (8000fec <main+0x238>)
 8000f54:	6013      	str	r3, [r2, #0]
					  }
					  break;
 8000f56:	e043      	b.n	8000fe0 <main+0x22c>
				  case RIGHT:
					  if(prevState != state)
 8000f58:	4b2e      	ldr	r3, [pc, #184]	; (8001014 <main+0x260>)
 8000f5a:	781a      	ldrb	r2, [r3, #0]
 8000f5c:	4b2b      	ldr	r3, [pc, #172]	; (800100c <main+0x258>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d00d      	beq.n	8000f80 <main+0x1cc>
					  {
						  direction(STOP);
 8000f64:	2003      	movs	r0, #3
 8000f66:	f000 f8c3 	bl	80010f0 <direction>
						  distance = getDistance();
 8000f6a:	f000 f981 	bl	8001270 <getDistance>
 8000f6e:	eef0 7a40 	vmov.f32	s15, s0
 8000f72:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <main+0x234>)
 8000f74:	edc3 7a00 	vstr	s15, [r3]
						  prevState = state;
 8000f78:	4b24      	ldr	r3, [pc, #144]	; (800100c <main+0x258>)
 8000f7a:	781a      	ldrb	r2, [r3, #0]
 8000f7c:	4b25      	ldr	r3, [pc, #148]	; (8001014 <main+0x260>)
 8000f7e:	701a      	strb	r2, [r3, #0]
					  }

					  if(HAL_GetTick() - millis > 250)
 8000f80:	f000 ff7a 	bl	8001e78 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <main+0x238>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	2bfa      	cmp	r3, #250	; 0xfa
 8000f8e:	d929      	bls.n	8000fe4 <main+0x230>
					  {
						  if(distance > 15.0)
 8000f90:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <main+0x234>)
 8000f92:	edd3 7a00 	vldr	s15, [r3]
 8000f96:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8000f9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa2:	dd03      	ble.n	8000fac <main+0x1f8>
						  {
							  state = FORWARD;
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <main+0x258>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
 8000faa:	e009      	b.n	8000fc0 <main+0x20c>
						  }
						  else
						  {
							  distance = getDistance();
 8000fac:	f000 f960 	bl	8001270 <getDistance>
 8000fb0:	eef0 7a40 	vmov.f32	s15, s0
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <main+0x234>)
 8000fb6:	edc3 7a00 	vstr	s15, [r3]
							  direction(RIGHT);
 8000fba:	2002      	movs	r0, #2
 8000fbc:	f000 f898 	bl	80010f0 <direction>
						  }
						  millis = HAL_GetTick();
 8000fc0:	f000 ff5a 	bl	8001e78 <HAL_GetTick>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	4a09      	ldr	r2, [pc, #36]	; (8000fec <main+0x238>)
 8000fc8:	6013      	str	r3, [r2, #0]
					  }
					  break;
 8000fca:	e00b      	b.n	8000fe4 <main+0x230>
				  case STOP:
					  direction(STOP);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f000 f88f 	bl	80010f0 <direction>
					  prevState = state;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <main+0x258>)
 8000fd4:	781a      	ldrb	r2, [r3, #0]
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <main+0x260>)
 8000fd8:	701a      	strb	r2, [r3, #0]
					  break;
 8000fda:	e004      	b.n	8000fe6 <main+0x232>
				  case BACKWARDS:
					  break;
			  }
	  	  }
 8000fdc:	bf00      	nop
 8000fde:	e702      	b.n	8000de6 <main+0x32>
					  break;
 8000fe0:	bf00      	nop
 8000fe2:	e700      	b.n	8000de6 <main+0x32>
					  break;
 8000fe4:	bf00      	nop
	  if(HAL_GetTick() - millis > 1000)
 8000fe6:	e6fe      	b.n	8000de6 <main+0x32>
 8000fe8:	20000238 	.word	0x20000238
 8000fec:	20000450 	.word	0x20000450
 8000ff0:	20000224 	.word	0x20000224
 8000ff4:	447a0000 	.word	0x447a0000
 8000ff8:	20000220 	.word	0x20000220
 8000ffc:	08008cf0 	.word	0x08008cf0
 8001000:	200002c4 	.word	0x200002c4
 8001004:	200003cc 	.word	0x200003cc
 8001008:	20000008 	.word	0x20000008
 800100c:	20000228 	.word	0x20000228
 8001010:	200002c0 	.word	0x200002c0
 8001014:	20000004 	.word	0x20000004

08001018 <GetMode>:
  }
}
// ----------------------------------------- FUNCTIONS ---------------------------------------------------------------------------

void GetMode()
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	setting[0] = '\0';
 800101c:	4b2a      	ldr	r3, [pc, #168]	; (80010c8 <GetMode+0xb0>)
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive(&huart1, (uint8_t *)setting, 1, 1);
 8001022:	2301      	movs	r3, #1
 8001024:	2201      	movs	r2, #1
 8001026:	4928      	ldr	r1, [pc, #160]	; (80010c8 <GetMode+0xb0>)
 8001028:	4828      	ldr	r0, [pc, #160]	; (80010cc <GetMode+0xb4>)
 800102a:	f002 fded 	bl	8003c08 <HAL_UART_Receive>
 	 if (strcmp(setting, "M") == 0)
 800102e:	4928      	ldr	r1, [pc, #160]	; (80010d0 <GetMode+0xb8>)
 8001030:	4825      	ldr	r0, [pc, #148]	; (80010c8 <GetMode+0xb0>)
 8001032:	f7ff f8d5 	bl	80001e0 <strcmp>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d106      	bne.n	800104a <GetMode+0x32>
 	 {
 		 direction(STOP);
 800103c:	2003      	movs	r0, #3
 800103e:	f000 f857 	bl	80010f0 <direction>
 		 automaticMode = 0;
 8001042:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <GetMode+0xbc>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	e00c      	b.n	8001064 <GetMode+0x4c>
 	 }
 	 else if (strcmp(setting, "A") == 0)
 800104a:	4923      	ldr	r1, [pc, #140]	; (80010d8 <GetMode+0xc0>)
 800104c:	481e      	ldr	r0, [pc, #120]	; (80010c8 <GetMode+0xb0>)
 800104e:	f7ff f8c7 	bl	80001e0 <strcmp>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d105      	bne.n	8001064 <GetMode+0x4c>
 	 {
 		 state = FORWARD;
 8001058:	4b20      	ldr	r3, [pc, #128]	; (80010dc <GetMode+0xc4>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
 		 automaticMode = 1;
 800105e:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <GetMode+0xbc>)
 8001060:	2201      	movs	r2, #1
 8001062:	601a      	str	r2, [r3, #0]
 	 }

 	 if (automaticMode == 0)
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <GetMode+0xbc>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d12a      	bne.n	80010c2 <GetMode+0xaa>
 	 {
 		if (strcmp(setting, "F") == 0)
 800106c:	491c      	ldr	r1, [pc, #112]	; (80010e0 <GetMode+0xc8>)
 800106e:	4816      	ldr	r0, [pc, #88]	; (80010c8 <GetMode+0xb0>)
 8001070:	f7ff f8b6 	bl	80001e0 <strcmp>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d103      	bne.n	8001082 <GetMode+0x6a>
 		{
 			direction(FORWARD);
 800107a:	2000      	movs	r0, #0
 800107c:	f000 f838 	bl	80010f0 <direction>
 		else if (strcmp(setting, "S") == 0)
 		{
 			direction(STOP);
 		}
 	 }
}
 8001080:	e01f      	b.n	80010c2 <GetMode+0xaa>
 		else if (strcmp(setting, "L") == 0)
 8001082:	4918      	ldr	r1, [pc, #96]	; (80010e4 <GetMode+0xcc>)
 8001084:	4810      	ldr	r0, [pc, #64]	; (80010c8 <GetMode+0xb0>)
 8001086:	f7ff f8ab 	bl	80001e0 <strcmp>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d103      	bne.n	8001098 <GetMode+0x80>
 			direction(LEFT);
 8001090:	2001      	movs	r0, #1
 8001092:	f000 f82d 	bl	80010f0 <direction>
}
 8001096:	e014      	b.n	80010c2 <GetMode+0xaa>
 		else if (strcmp(setting, "R") == 0)
 8001098:	4913      	ldr	r1, [pc, #76]	; (80010e8 <GetMode+0xd0>)
 800109a:	480b      	ldr	r0, [pc, #44]	; (80010c8 <GetMode+0xb0>)
 800109c:	f7ff f8a0 	bl	80001e0 <strcmp>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d103      	bne.n	80010ae <GetMode+0x96>
 			direction(RIGHT);
 80010a6:	2002      	movs	r0, #2
 80010a8:	f000 f822 	bl	80010f0 <direction>
}
 80010ac:	e009      	b.n	80010c2 <GetMode+0xaa>
 		else if (strcmp(setting, "S") == 0)
 80010ae:	490f      	ldr	r1, [pc, #60]	; (80010ec <GetMode+0xd4>)
 80010b0:	4805      	ldr	r0, [pc, #20]	; (80010c8 <GetMode+0xb0>)
 80010b2:	f7ff f895 	bl	80001e0 <strcmp>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d102      	bne.n	80010c2 <GetMode+0xaa>
 			direction(STOP);
 80010bc:	2003      	movs	r0, #3
 80010be:	f000 f817 	bl	80010f0 <direction>
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200003c4 	.word	0x200003c4
 80010cc:	2000023c 	.word	0x2000023c
 80010d0:	08008d64 	.word	0x08008d64
 80010d4:	20000008 	.word	0x20000008
 80010d8:	08008d68 	.word	0x08008d68
 80010dc:	20000228 	.word	0x20000228
 80010e0:	08008d6c 	.word	0x08008d6c
 80010e4:	08008d70 	.word	0x08008d70
 80010e8:	08008d74 	.word	0x08008d74
 80010ec:	08008d78 	.word	0x08008d78

080010f0 <direction>:

void direction(States dir)
//	Left Wheel (CCR2) - Right Wheel (CCR1)
// 		BACKWARDS...FORWARD
// 	 		 1275 - 1720
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
	switch(dir)
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	2b04      	cmp	r3, #4
 80010fe:	d844      	bhi.n	800118a <direction+0x9a>
 8001100:	a201      	add	r2, pc, #4	; (adr r2, 8001108 <direction+0x18>)
 8001102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001106:	bf00      	nop
 8001108:	0800111d 	.word	0x0800111d
 800110c:	08001149 	.word	0x08001149
 8001110:	08001133 	.word	0x08001133
 8001114:	0800115f 	.word	0x0800115f
 8001118:	08001175 	.word	0x08001175
	{
	case FORWARD:
		TIM2->CCR1 = 1450;
 800111c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001120:	f240 52aa 	movw	r2, #1450	; 0x5aa
 8001124:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = 1550;
 8001126:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800112a:	f240 620e 	movw	r2, #1550	; 0x60e
 800112e:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8001130:	e02b      	b.n	800118a <direction+0x9a>
	case RIGHT:
	    TIM2->CCR1 = 1550;
 8001132:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001136:	f240 620e 	movw	r2, #1550	; 0x60e
 800113a:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = 1550;
 800113c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001140:	f240 620e 	movw	r2, #1550	; 0x60e
 8001144:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8001146:	e020      	b.n	800118a <direction+0x9a>
	case LEFT:
		TIM2->CCR1 = 1450;
 8001148:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800114c:	f240 52aa 	movw	r2, #1450	; 0x5aa
 8001150:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = 1450;
 8001152:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001156:	f240 52aa 	movw	r2, #1450	; 0x5aa
 800115a:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 800115c:	e015      	b.n	800118a <direction+0x9a>
	case STOP:
		TIM2->CCR1 = 1500;
 800115e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001162:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001166:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = 1500;
 8001168:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800116c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001170:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8001172:	e00a      	b.n	800118a <direction+0x9a>
	case BACKWARDS:
		TIM2->CCR1 = 1550;
 8001174:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001178:	f240 620e 	movw	r2, #1550	; 0x60e
 800117c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = 1450;
 800117e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001182:	f240 52aa 	movw	r2, #1450	; 0x5aa
 8001186:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8001188:	bf00      	nop
	}
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop

08001198 <getThetaAngle>:
int getThetaAngle(int tHigh)
/* Calculating theta angle for angular velocity calculations in TIM2->C2*/
{
 8001198:	b480      	push	{r7}
 800119a:	b087      	sub	sp, #28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	int angle = 0, dutyCycle = 0,  dcMin = 29, dcMax = 971;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	2300      	movs	r3, #0
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	231d      	movs	r3, #29
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	f240 33cb 	movw	r3, #971	; 0x3cb
 80011b0:	60bb      	str	r3, [r7, #8]
	dutyCycle = (1000 * tHigh) / tCycle;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011b8:	fb02 f203 	mul.w	r2, r2, r3
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <getThetaAngle+0x78>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80011c4:	613b      	str	r3, [r7, #16]
	angle = 359 - ((dutyCycle - dcMin) * 360) / (dcMax - dcMin + 1);
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80011d0:	fb02 f203 	mul.w	r2, r2, r3
 80011d4:	68b9      	ldr	r1, [r7, #8]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	1acb      	subs	r3, r1, r3
 80011da:	3301      	adds	r3, #1
 80011dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80011e0:	f5c3 73b3 	rsb	r3, r3, #358	; 0x166
 80011e4:	3301      	adds	r3, #1
 80011e6:	617b      	str	r3, [r7, #20]

	if(angle < 0)
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	da02      	bge.n	80011f4 <getThetaAngle+0x5c>
		angle = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	e006      	b.n	8001202 <getThetaAngle+0x6a>
	else if(angle > 359)
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80011fa:	db02      	blt.n	8001202 <getThetaAngle+0x6a>
		angle = 359;
 80011fc:	f240 1367 	movw	r3, #359	; 0x167
 8001200:	617b      	str	r3, [r7, #20]

	return angle;
 8001202:	697b      	ldr	r3, [r7, #20]
}
 8001204:	4618      	mov	r0, r3
 8001206:	371c      	adds	r7, #28
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	20000000 	.word	0x20000000

08001214 <setupUltrasonic>:
// ----------------------------------------- ULTRASONIC ---------------------------------------------------------------------------
void setupUltrasonic(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	// D8 - TRIG pin setup
    GPIOA->MODER &= ~(3UL<<18); // Clear mode
 8001218:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001222:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001226:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1UL<<18);  // Mode to output
 8001228:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001232:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001236:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3UL<<18); // Select no pull-up/pull-down
 8001238:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001242:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001246:	60d3      	str	r3, [r2, #12]
    // D9 - ECHO pin setup
    GPIOC->MODER &= ~(3UL<<14); // Mode to input
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <setupUltrasonic+0x58>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a07      	ldr	r2, [pc, #28]	; (800126c <setupUltrasonic+0x58>)
 800124e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001252:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR |= (2UL<<14);  // Select pull-down
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <setupUltrasonic+0x58>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	4a04      	ldr	r2, [pc, #16]	; (800126c <setupUltrasonic+0x58>)
 800125a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800125e:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(EXTI9_5_IRQn); // Enable interrupt handler
 8001260:	2017      	movs	r0, #23
 8001262:	f7ff fd5f 	bl	8000d24 <__NVIC_EnableIRQ>
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	48000800 	.word	0x48000800

08001270 <getDistance>:

float getDistance()
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	  GPIOA->ODR &= ~trigpin; // Set trigpin to LOW
 8001274:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800127e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001282:	6153      	str	r3, [r2, #20]
	  //HAL_Delay(3);
	  GPIOA->ODR |= trigpin; // Set trigpin to HIGH
 8001284:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800128e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001292:	6153      	str	r3, [r2, #20]
	  ///HAL_Delay(10);
	  GPIOA->ODR &= ~trigpin; // Set trigpin to LOW
 8001294:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800129e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80012a2:	6153      	str	r3, [r2, #20]
	  return (duration + 0.0f)*(0.034 / 2);
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <getDistance+0x80>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	ee07 3a90 	vmov	s15, r3
 80012ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80012f4 <getDistance+0x84>
 80012b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012b8:	ee17 0a90 	vmov	r0, s15
 80012bc:	f7ff f95c 	bl	8000578 <__aeabi_f2d>
 80012c0:	a309      	add	r3, pc, #36	; (adr r3, 80012e8 <getDistance+0x78>)
 80012c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c6:	f7ff f9af 	bl	8000628 <__aeabi_dmul>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4610      	mov	r0, r2
 80012d0:	4619      	mov	r1, r3
 80012d2:	f7ff fca1 	bl	8000c18 <__aeabi_d2f>
 80012d6:	4603      	mov	r3, r0
 80012d8:	ee07 3a90 	vmov	s15, r3
}
 80012dc:	eeb0 0a67 	vmov.f32	s0, s15
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	f3af 8000 	nop.w
 80012e8:	b020c49c 	.word	0xb020c49c
 80012ec:	3f916872 	.word	0x3f916872
 80012f0:	200002c0 	.word	0x200002c0
 80012f4:	00000000 	.word	0x00000000

080012f8 <EXTI9_5_IRQHandler>:

// ----------------------------------------- IRQ interrupt handlers ---------------------------------------------------------------------------

void EXTI9_5_IRQHandler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
    uint32_t EchoState = (GPIOC->IDR & echopin);
 80012fe:	4b14      	ldr	r3, [pc, #80]	; (8001350 <EXTI9_5_IRQHandler+0x58>)
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001306:	607b      	str	r3, [r7, #4]
    unsigned long startMicros = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	603b      	str	r3, [r7, #0]
    if((EXTI->PR & EXTI_PR_PIF7) != 0)
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <EXTI9_5_IRQHandler+0x5c>)
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001314:	2b00      	cmp	r3, #0
 8001316:	d014      	beq.n	8001342 <EXTI9_5_IRQHandler+0x4a>
    {
        while(EchoState != 0)
 8001318:	e007      	b.n	800132a <EXTI9_5_IRQHandler+0x32>
        {
            EchoState = (GPIOC->IDR & echopin);
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <EXTI9_5_IRQHandler+0x58>)
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001322:	607b      	str	r3, [r7, #4]
            startMicros++;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	3301      	adds	r3, #1
 8001328:	603b      	str	r3, [r7, #0]
        while(EchoState != 0)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1f4      	bne.n	800131a <EXTI9_5_IRQHandler+0x22>
        }
        duration = startMicros;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	4a09      	ldr	r2, [pc, #36]	; (8001358 <EXTI9_5_IRQHandler+0x60>)
 8001334:	6013      	str	r3, [r2, #0]
        EXTI->PR |= EXTI_PR_PIF7;
 8001336:	4b07      	ldr	r3, [pc, #28]	; (8001354 <EXTI9_5_IRQHandler+0x5c>)
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	4a06      	ldr	r2, [pc, #24]	; (8001354 <EXTI9_5_IRQHandler+0x5c>)
 800133c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001340:	6153      	str	r3, [r2, #20]
    }
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	48000800 	.word	0x48000800
 8001354:	40010400 	.word	0x40010400
 8001358:	200002c0 	.word	0x200002c0

0800135c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
	if(TIM3->SR & TIM_SR_UIF)
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <TIM3_IRQHandler+0x30>)
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	d00a      	beq.n	8001382 <TIM3_IRQHandler+0x26>
	{
		lwHighT = TIM3->CCR1;
 800136c:	4b07      	ldr	r3, [pc, #28]	; (800138c <TIM3_IRQHandler+0x30>)
 800136e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001370:	461a      	mov	r2, r3
 8001372:	4b07      	ldr	r3, [pc, #28]	; (8001390 <TIM3_IRQHandler+0x34>)
 8001374:	601a      	str	r2, [r3, #0]
		TIM3->SR &= ~TIM_SR_UIF; // Reset interrupt flag
 8001376:	4b05      	ldr	r3, [pc, #20]	; (800138c <TIM3_IRQHandler+0x30>)
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	4a04      	ldr	r2, [pc, #16]	; (800138c <TIM3_IRQHandler+0x30>)
 800137c:	f023 0301 	bic.w	r3, r3, #1
 8001380:	6113      	str	r3, [r2, #16]
	}
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	40000400 	.word	0x40000400
 8001390:	20000210 	.word	0x20000210

08001394 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
	if(TIM4->SR & TIM_SR_UIF)
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <TIM4_IRQHandler+0x30>)
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00a      	beq.n	80013ba <TIM4_IRQHandler+0x26>
	{
		rwHighT = TIM4->CCR1;
 80013a4:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <TIM4_IRQHandler+0x30>)
 80013a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <TIM4_IRQHandler+0x34>)
 80013ac:	601a      	str	r2, [r3, #0]
		TIM4->SR &= ~TIM_SR_UIF; // Reset interrupt flag
 80013ae:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <TIM4_IRQHandler+0x30>)
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	4a04      	ldr	r2, [pc, #16]	; (80013c4 <TIM4_IRQHandler+0x30>)
 80013b4:	f023 0301 	bic.w	r3, r3, #1
 80013b8:	6113      	str	r3, [r2, #16]
	}
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	40000800 	.word	0x40000800
 80013c8:	2000021c 	.word	0x2000021c

080013cc <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
	if(TIM2->SR & TIM_SR_CC3IF_Msk)
 80013d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d032      	beq.n	8001444 <TIM2_IRQHandler+0x78>
	{
		// Speed calculation
		// Get theta angle of both wheels
		lTheta = getThetaAngle(lwHighT);
 80013de:	4b37      	ldr	r3, [pc, #220]	; (80014bc <TIM2_IRQHandler+0xf0>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fed8 	bl	8001198 <getThetaAngle>
 80013e8:	4603      	mov	r3, r0
 80013ea:	4a35      	ldr	r2, [pc, #212]	; (80014c0 <TIM2_IRQHandler+0xf4>)
 80013ec:	6013      	str	r3, [r2, #0]

		// If there has been a rotation, we ge this by comparing previous angle and current angle
		// A2- A1 / 20 ms = Linear velocity
		// Linear velocity * radius(cm) = velocity/20 ms
		// to achive velocity in seconds(cm/s) divide by 1000, this is done when printing
		if((lTheta < 90) && (prevLTheta > 270))
 80013ee:	4b34      	ldr	r3, [pc, #208]	; (80014c0 <TIM2_IRQHandler+0xf4>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b59      	cmp	r3, #89	; 0x59
 80013f4:	dc1a      	bgt.n	800142c <TIM2_IRQHandler+0x60>
 80013f6:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <TIM2_IRQHandler+0xf8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80013fe:	dd15      	ble.n	800142c <TIM2_IRQHandler+0x60>
			lTurns = abs((lTheta-prevLTheta) / 20)*4;
 8001400:	4b2f      	ldr	r3, [pc, #188]	; (80014c0 <TIM2_IRQHandler+0xf4>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b2f      	ldr	r3, [pc, #188]	; (80014c4 <TIM2_IRQHandler+0xf8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	4a2f      	ldr	r2, [pc, #188]	; (80014c8 <TIM2_IRQHandler+0xfc>)
 800140c:	fb82 1203 	smull	r1, r2, r2, r3
 8001410:	10d2      	asrs	r2, r2, #3
 8001412:	17db      	asrs	r3, r3, #31
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	bfb8      	it	lt
 800141a:	425b      	neglt	r3, r3
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	ee07 3a90 	vmov	s15, r3
 8001422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001426:	4b29      	ldr	r3, [pc, #164]	; (80014cc <TIM2_IRQHandler+0x100>)
 8001428:	edc3 7a00 	vstr	s15, [r3]

		// Save theta angle
		prevLTheta = lTheta;
 800142c:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <TIM2_IRQHandler+0xf4>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a24      	ldr	r2, [pc, #144]	; (80014c4 <TIM2_IRQHandler+0xf8>)
 8001432:	6013      	str	r3, [r2, #0]
		TIM2->SR &= ~TIM_SR_CC3IF_Msk; // Reset interrupt flag
 8001434:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800143e:	f023 0308 	bic.w	r3, r3, #8
 8001442:	6113      	str	r3, [r2, #16]
	}
	if(TIM2->SR & TIM_SR_CC4IF_Msk)
 8001444:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	2b00      	cmp	r3, #0
 8001450:	d032      	beq.n	80014b8 <TIM2_IRQHandler+0xec>
	{
		rTheta = getThetaAngle(rwHighT);
 8001452:	4b1f      	ldr	r3, [pc, #124]	; (80014d0 <TIM2_IRQHandler+0x104>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fe9e 	bl	8001198 <getThetaAngle>
 800145c:	4603      	mov	r3, r0
 800145e:	4a1d      	ldr	r2, [pc, #116]	; (80014d4 <TIM2_IRQHandler+0x108>)
 8001460:	6013      	str	r3, [r2, #0]

		if((rTheta < 90) && (prevRTheta > 270))
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <TIM2_IRQHandler+0x108>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2b59      	cmp	r3, #89	; 0x59
 8001468:	dc1a      	bgt.n	80014a0 <TIM2_IRQHandler+0xd4>
 800146a:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <TIM2_IRQHandler+0x10c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001472:	dd15      	ble.n	80014a0 <TIM2_IRQHandler+0xd4>
			rTurns = abs((rTheta-prevRTheta) / 20)*4;
 8001474:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <TIM2_IRQHandler+0x108>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <TIM2_IRQHandler+0x10c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <TIM2_IRQHandler+0xfc>)
 8001480:	fb82 1203 	smull	r1, r2, r2, r3
 8001484:	10d2      	asrs	r2, r2, #3
 8001486:	17db      	asrs	r3, r3, #31
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	bfb8      	it	lt
 800148e:	425b      	neglt	r3, r3
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	ee07 3a90 	vmov	s15, r3
 8001496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <TIM2_IRQHandler+0x110>)
 800149c:	edc3 7a00 	vstr	s15, [r3]

		prevRTheta = rTheta;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <TIM2_IRQHandler+0x108>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a0c      	ldr	r2, [pc, #48]	; (80014d8 <TIM2_IRQHandler+0x10c>)
 80014a6:	6013      	str	r3, [r2, #0]
		TIM2->SR &= ~TIM_SR_CC4IF_Msk; // Reset interrupt flag
 80014a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014b2:	f023 0310 	bic.w	r3, r3, #16
 80014b6:	6113      	str	r3, [r2, #16]
	}
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000210 	.word	0x20000210
 80014c0:	20000208 	.word	0x20000208
 80014c4:	2000020c 	.word	0x2000020c
 80014c8:	66666667 	.word	0x66666667
 80014cc:	20000220 	.word	0x20000220
 80014d0:	2000021c 	.word	0x2000021c
 80014d4:	20000214 	.word	0x20000214
 80014d8:	20000218 	.word	0x20000218
 80014dc:	20000224 	.word	0x20000224

080014e0 <rightServoSetup>:

// ----------------------------------------- SERVO 360 ---------------------------------------------------------------------------
void rightServoSetup(void)
{ // PA5 control --- PA11 feedback
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
	// Right Wheel control pin
    GPIOA->MODER |= (GPIOA->MODER & ~GPIO_MODER_MODER5) | (0b10 << GPIO_MODER_MODER5_Pos); // Alternate Function Mode
 80014e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80014ee:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80014f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80014fc:	4313      	orrs	r3, r2
 80014fe:	600b      	str	r3, [r1, #0]
    // AF1 TIM2 CH2
    GPIOA->AFR[0] = (GPIOA->AFR[0] & ~GPIO_AFRL_AFRL5) | (0b0001 <<GPIO_AFRL_AFRL5_Pos);
 8001500:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800150a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800150e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001512:	6213      	str	r3, [r2, #32]

    // Right Wheel feedbaCk - AF MODE
    GPIOA->MODER = (GPIOA->MODER & ~GPIO_MODER_MODER11) | (0b10 << GPIO_MODER_MODER11_Pos);
 8001514:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800151e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001522:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001526:	6013      	str	r3, [r2, #0]
    // AF10 TIM4 CH1
   	GPIOA->AFR[1] = (GPIOA->AFR[1] & ~GPIO_AFRH_AFRH3) | (0b1010 << GPIO_AFRH_AFRH3_Pos);
 8001528:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800152c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001532:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001536:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 800153a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
	...

08001548 <leftServoSetup>:

void leftServoSetup(void)
{ // PB3 control --- PA6 feedback
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
	// Left Wheel control pin
	GPIOB->MODER |= (GPIOB->MODER & ~GPIO_MODER_MODER3) | (0b10 << GPIO_MODER_MODER3_Pos); // Alternate Function Mode
 800154c:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <leftServoSetup+0x6c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001554:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001558:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <leftServoSetup+0x6c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4915      	ldr	r1, [pc, #84]	; (80015b4 <leftServoSetup+0x6c>)
 800155e:	4313      	orrs	r3, r2
 8001560:	600b      	str	r3, [r1, #0]
	// AF1 TIM2 CH1
	GPIOB->AFR[0] = (GPIOB->AFR[0] & ~GPIO_AFRL_AFRL3) | (0b0001 <<GPIO_AFRL_AFRL3_Pos);
 8001562:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <leftServoSetup+0x6c>)
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800156a:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <leftServoSetup+0x6c>)
 800156c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001570:	6213      	str	r3, [r2, #32]
	// Left Wheel feedback - AF MODE
    GPIOA->MODER = (GPIOA->MODER & ~GPIO_MODER_MODER6) | (0b10 << GPIO_MODER_MODER6_Pos);
 8001572:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800157c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001580:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001584:	6013      	str	r3, [r2, #0]
    // AF2 TIM3 CH1
   	GPIOA->AFR[0] = (GPIOA->AFR[0] & ~GPIO_AFRL_AFRL6) | (0b0010 << GPIO_AFRL_AFRL6_Pos);
 8001586:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001590:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001594:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001598:	6213      	str	r3, [r2, #32]
   	GPIOA->PUPDR |= GPIO_PUPDR_PUPDR0_0;
 800159a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	60d3      	str	r3, [r2, #12]
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	48000400 	.word	0x48000400

080015b8 <GPIO_Init>:
//| ------------- Port B -------------------------- TIM 3 ----------------------|
//| D03 - PB_3 (Left Wheel output)		|	Feedback for left servo - 910Hz		|
//| -------------- Port C ------------------------- TIM 4 ----------------------|
//| D09 - PC_7 (Ultrasonic echo)		|   Feedback for right servo- 910Hz		|
//|_____________________________________________________________________________|
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	// Enable Clocks
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN | RCC_APB1ENR_TIM3EN | RCC_APB1ENR_TIM4EN; // Enable TIM2 TIM3 TIM4 clock
 80015bc:	4b20      	ldr	r3, [pc, #128]	; (8001640 <GPIO_Init+0x88>)
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	4a1f      	ldr	r2, [pc, #124]	; (8001640 <GPIO_Init+0x88>)
 80015c2:	f043 0307 	orr.w	r3, r3, #7
 80015c6:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80015c8:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <GPIO_Init+0x88>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	4a1c      	ldr	r2, [pc, #112]	; (8001640 <GPIO_Init+0x88>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6193      	str	r3, [r2, #24]
	// Enable Ports
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN | RCC_AHBENR_GPIOCEN; // Enable PORT A, B, C
 80015d4:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <GPIO_Init+0x88>)
 80015d6:	695b      	ldr	r3, [r3, #20]
 80015d8:	4a19      	ldr	r2, [pc, #100]	; (8001640 <GPIO_Init+0x88>)
 80015da:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 80015de:	6153      	str	r3, [r2, #20]

	// Timer Setup
	TIM2_CONTROL();
 80015e0:	f000 f834 	bl	800164c <TIM2_CONTROL>
	TIM3_FEEDBACK_LEFTWHEEL();
 80015e4:	f000 f8a0 	bl	8001728 <TIM3_FEEDBACK_LEFTWHEEL>
	TIM4_FEEDBACK_RIGHTWHEEL();
 80015e8:	f000 f900 	bl	80017ec <TIM4_FEEDBACK_RIGHTWHEEL>

    // Hardware Setup
    setupUltrasonic();
 80015ec:	f7ff fe12 	bl	8001214 <setupUltrasonic>
    leftServoSetup();
 80015f0:	f7ff ffaa 	bl	8001548 <leftServoSetup>
    rightServoSetup();
 80015f4:	f7ff ff74 	bl	80014e0 <rightServoSetup>

    NVIC_SetPriority(TIM3_IRQn, 1);
 80015f8:	2101      	movs	r1, #1
 80015fa:	201d      	movs	r0, #29
 80015fc:	f7ff fbb0 	bl	8000d60 <__NVIC_SetPriority>
    NVIC_SetPriority(TIM4_IRQn, 2);
 8001600:	2102      	movs	r1, #2
 8001602:	201e      	movs	r0, #30
 8001604:	f7ff fbac 	bl	8000d60 <__NVIC_SetPriority>
    NVIC_SetPriority(TIM2_IRQn, 3);
 8001608:	2103      	movs	r1, #3
 800160a:	201c      	movs	r0, #28
 800160c:	f7ff fba8 	bl	8000d60 <__NVIC_SetPriority>
    NVIC_SetPriority(EXTI9_5_IRQn, 4);
 8001610:	2104      	movs	r1, #4
 8001612:	2017      	movs	r0, #23
 8001614:	f7ff fba4 	bl	8000d60 <__NVIC_SetPriority>

    // Ultrasonic interrupt EXTI7 Port C
    SYSCFG->EXTICR[1] |= (0b010 << SYSCFG_EXTICR2_EXTI7_Pos);
 8001618:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <GPIO_Init+0x8c>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	4a09      	ldr	r2, [pc, #36]	; (8001644 <GPIO_Init+0x8c>)
 800161e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001622:	60d3      	str	r3, [r2, #12]
	// Rising trigger EXTI7
	EXTI->RTSR |= EXTI_RTSR_RT7;
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <GPIO_Init+0x90>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	4a07      	ldr	r2, [pc, #28]	; (8001648 <GPIO_Init+0x90>)
 800162a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800162e:	6093      	str	r3, [r2, #8]
    // Interrupt Mask Register not masked EXTI7 &
    EXTI->IMR |= EXTI_IMR_IM7;
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <GPIO_Init+0x90>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a04      	ldr	r2, [pc, #16]	; (8001648 <GPIO_Init+0x90>)
 8001636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800163a:	6013      	str	r3, [r2, #0]
 }
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40021000 	.word	0x40021000
 8001644:	40010000 	.word	0x40010000
 8001648:	40010400 	.word	0x40010400

0800164c <TIM2_CONTROL>:

void TIM2_CONTROL(void)
// TIM2 will control the output of the robot
// Channel 1 & 2 will be used to send PWM signals to control the servo
// Channel 3 will be used to calculate the theta angle of the wheel at a 50Hz frequency
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
 // 16MHz clock speed
 TIM2->PSC = 16-1; // 16.000.000 / 16 = 1.000.000
 8001650:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001654:	220f      	movs	r2, #15
 8001656:	629a      	str	r2, [r3, #40]	; 0x28
 TIM2->ARR = FiftyHertz; // 1.000.000/50Hz = 20.000
 8001658:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800165c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001660:	62da      	str	r2, [r3, #44]	; 0x2c
 // Reset counter
 TIM2->CNT = 0;
 8001662:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001666:	2200      	movs	r2, #0
 8001668:	625a      	str	r2, [r3, #36]	; 0x24
 // CHANNEL 1
 TIM2->CCMR1 |= (0b0110 << TIM_CCMR1_OC1M_Pos);		// PWM mode 1
 800166a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001674:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001678:	6193      	str	r3, [r2, #24]
 TIM2->CCMR1 &= ~(0b1 << TIM_CCMR1_OC1PE_Pos);   	// Disable preload register
 800167a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001684:	f023 0308 	bic.w	r3, r3, #8
 8001688:	6193      	str	r3, [r2, #24]
 TIM2->CCMR1 &= ~(0b11<< TIM_CCMR1_CC1S_Pos);  		// Set to output
 800168a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001694:	f023 0303 	bic.w	r3, r3, #3
 8001698:	6193      	str	r3, [r2, #24]
 TIM2->CCR1 = 1500;
 800169a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800169e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80016a2:	635a      	str	r2, [r3, #52]	; 0x34
 TIM2->CCER |= (0b1 << TIM_CCER_CC1E_Pos); 		// Capture/compare output
 80016a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6213      	str	r3, [r2, #32]
 // CHANNEL 2
 TIM2->CCMR1 |= (0b0110 << TIM_CCMR1_OC2M_Pos); // PWM mode 1
 80016b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016be:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80016c2:	6193      	str	r3, [r2, #24]
 TIM2->CCMR1 &= ~(0b1 << TIM_CCMR1_OC2PE_Pos);   // Disable preload register
 80016c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80016d2:	6193      	str	r3, [r2, #24]
 TIM2->CCMR1 &= ~(0b11 << TIM_CCMR1_CC2S_Pos);   // Set to output
 80016d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016e2:	6193      	str	r3, [r2, #24]
 TIM2->CCR2 = 1500;
 80016e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016e8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80016ec:	639a      	str	r2, [r3, #56]	; 0x38
 TIM2->CCER |= (0b1 << TIM_CCER_CC2E_Pos); 	// Capture/compare output
 80016ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016f8:	f043 0310 	orr.w	r3, r3, #16
 80016fc:	6213      	str	r3, [r2, #32]
 // CHANNEL 3
 TIM2->DIER = TIM_DIER_CC3IE; // Capture/compare interrupt flag enabled
 80016fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001702:	2208      	movs	r2, #8
 8001704:	60da      	str	r2, [r3, #12]
 // CHANNEL 4
 TIM2->DIER = TIM_DIER_CC4IE; // Capture/compare interrupt flag enabled
 8001706:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800170a:	2210      	movs	r2, #16
 800170c:	60da      	str	r2, [r3, #12]
 // Enable interrupt handler
 NVIC_EnableIRQ(TIM2_IRQn);
 800170e:	201c      	movs	r0, #28
 8001710:	f7ff fb08 	bl	8000d24 <__NVIC_EnableIRQ>
 // Enable counter
 TIM2->CR1 |= TIM_CR1_CEN;
 8001714:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6013      	str	r3, [r2, #0]
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}

08001728 <TIM3_FEEDBACK_LEFTWHEEL>:

void TIM3_FEEDBACK_LEFTWHEEL(void)
// ------------- LEFT WHEEL ----------------------
// TIM3 will control the input of the robot, feedback control
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
 // 16MHz clock speed
 TIM3->PSC = 16-1; // 1Mhz to achieve result in ms
 800172c:	4b2e      	ldr	r3, [pc, #184]	; (80017e8 <TIM3_FEEDBACK_LEFTWHEEL+0xc0>)
 800172e:	220f      	movs	r2, #15
 8001730:	629a      	str	r2, [r3, #40]	; 0x28
 // Reset counter
 TIM3->CNT = 0;
 8001732:	4b2d      	ldr	r3, [pc, #180]	; (80017e8 <TIM3_FEEDBACK_LEFTWHEEL+0xc0>)
 8001734:	2200      	movs	r2, #0
 8001736:	625a      	str	r2, [r3, #36]	; 0x24
 // CHANNEL 1 - Duty cycle of PWM signal in CCR2
 TIM3->CCMR1 |=  (TIM3->CCMR1 & ~TIM_CCMR1_CC1S) |  (0b01<<TIM_CCMR1_CC1S_Pos); // Input mode mapped on TI1
 8001738:	4b2b      	ldr	r3, [pc, #172]	; (80017e8 <TIM3_FEEDBACK_LEFTWHEEL+0xc0>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f023 0303 	bic.w	r3, r3, #3
 8001740:	f043 0201 	orr.w	r2, r3, #1
 8001744:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <TIM3_FEEDBACK_LEFTWHEEL+0xc0>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4927      	ldr	r1, [pc, #156]	; (80017e8 <TIM3_FEEDBACK_LEFTWHEEL+0xc0>)
 800174a:	4313      	orrs	r3, r2
 800174c:	618b      	str	r3, [r1, #24]
 TIM3->CCER &= ~((0b11 << TIM_CCER_CC1P_Pos) | (0b11 << TIM_CCER_CC1NP_Pos)); 	// Clear Register //noninverted/rising edge
 800174e:	4b26      	ldr	r3, [pc, #152]	; (80017e8 <TIM3_FEEDBACK_LEFTWHEEL+0xc0>)
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	4a25      	ldr	r2, [pc, #148]	; (80017e8 <TIM3_FEEDBACK_LEFTWHEEL+0xc0>)
 8001754:	f023 031e 	bic.w	r3, r3, #30
 8001758:	6213      	str	r3, [r2, #32]
 TIM3->CCER |= (0b01 << TIM_CCER_CC1P_Pos) | (0b01 << TIM_CCER_CC1NP_Pos);   	// inverted/falling edge
 800175a:	4b23      	ldr	r3, [pc, #140]	; (80017e8 <TIM3_FEEDBACK_LEFTWHEEL+0xc0>)
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	4a22      	ldr	r2, [pc, #136]	; (80017e8 <TIM3_FEEDBACK_LEFTWHEEL+0xc0>)
 8001760:	f043 030a 	orr.w	r3, r3, #10
 8001764:	6213      	str	r3, [r2, #32]
 TIM3->CCER |= TIM_CCER_CC1E_Msk;   											// Input IC1 mapped on TI1
 8001766:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <TIM3_FEEDBACK_LEFTWHEEL+0xc0>)
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	4a1f      	ldr	r2, [pc, #124]	; (80017e8 <TIM3_FEEDBACK_LEFTWHEEL+0xc0>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6213      	str	r3, [r2, #32]
 // CHANNEL 2 - Measure period in CCR1
 TIM3->CCMR1 |= (TIM3->CCMR1 & ~TIM_CCMR1_CC2S) |  (0b01<<TIM_CCMR1_CC2S_Pos);	 // Input mode mapped on TI2
 8001772:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <TIM3_FEEDBACK_LEFTWHEEL+0xc0>)
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800177a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800177e:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <TIM3_FEEDBACK_LEFTWHEEL+0xc0>)
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	4919      	ldr	r1, [pc, #100]	; (80017e8 <TIM3_FEEDBACK_LEFTWHEEL+0xc0>)
 8001784:	4313      	orrs	r3, r2
 8001786:	618b      	str	r3, [r1, #24]
 TIM3->CCER &= ~((0b11 << TIM_CCER_CC2P_Pos) | (0b11 << TIM_CCER_CC2NP_Pos)); 	 // noninverted/rising edge
 8001788:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <TIM3_FEEDBACK_LEFTWHEEL+0xc0>)
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	4a16      	ldr	r2, [pc, #88]	; (80017e8 <TIM3_FEEDBACK_LEFTWHEEL+0xc0>)
 800178e:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8001792:	6213      	str	r3, [r2, #32]
 //TIM3->CCER |= (0b01 << TIM_CCER_CC2P_Pos) | (0b01 << TIM_CCER_CC2NP_Pos); 	 // inverted/falling edge
 TIM3->CCER |= TIM_CCER_CC2E_Msk;   											 // Capture/Compare 2 output enable
 8001794:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <TIM3_FEEDBACK_LEFTWHEEL+0xc0>)
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	4a13      	ldr	r2, [pc, #76]	; (80017e8 <TIM3_FEEDBACK_LEFTWHEEL+0xc0>)
 800179a:	f043 0310 	orr.w	r3, r3, #16
 800179e:	6213      	str	r3, [r2, #32]

 // Filtered Timer Input 1 (TI1FP1)
 TIM3->SMCR = (TIM3->SMCR & ~TIM_SMCR_TS) | (0b101 << TIM_SMCR_TS_Pos);
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <TIM3_FEEDBACK_LEFTWHEEL+0xc0>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017a8:	4a0f      	ldr	r2, [pc, #60]	; (80017e8 <TIM3_FEEDBACK_LEFTWHEEL+0xc0>)
 80017aa:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80017ae:	6093      	str	r3, [r2, #8]
 // Reset Mode
 TIM3->SMCR = (TIM3->SMCR & ~TIM_SMCR_SMS) | (0b100 << TIM_SMCR_SMS_Pos);
 80017b0:	4b0d      	ldr	r3, [pc, #52]	; (80017e8 <TIM3_FEEDBACK_LEFTWHEEL+0xc0>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b8:	f023 0307 	bic.w	r3, r3, #7
 80017bc:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <TIM3_FEEDBACK_LEFTWHEEL+0xc0>)
 80017be:	f043 0304 	orr.w	r3, r3, #4
 80017c2:	6093      	str	r3, [r2, #8]

 // Enable Capture / Compare interrupt for channel 1 and 2
 TIM3->DIER |= TIM_DIER_UIE | TIM_DIER_CC1IE | TIM_DIER_CC2IE;
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <TIM3_FEEDBACK_LEFTWHEEL+0xc0>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <TIM3_FEEDBACK_LEFTWHEEL+0xc0>)
 80017ca:	f043 0307 	orr.w	r3, r3, #7
 80017ce:	60d3      	str	r3, [r2, #12]
 // Enable interrupt handler
 NVIC_EnableIRQ(TIM3_IRQn);
 80017d0:	201d      	movs	r0, #29
 80017d2:	f7ff faa7 	bl	8000d24 <__NVIC_EnableIRQ>
 // Enable counter
 TIM3->CR1 |= TIM_CR1_CEN | 0b10<<(TIM_CR1_CMS_Pos);
 80017d6:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <TIM3_FEEDBACK_LEFTWHEEL+0xc0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a03      	ldr	r2, [pc, #12]	; (80017e8 <TIM3_FEEDBACK_LEFTWHEEL+0xc0>)
 80017dc:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 80017e0:	6013      	str	r3, [r2, #0]
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40000400 	.word	0x40000400

080017ec <TIM4_FEEDBACK_RIGHTWHEEL>:

void TIM4_FEEDBACK_RIGHTWHEEL(void)
// ------------- Right WHEEL ----------------------
// TIM4 will control the input of the robot, feedback control
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
 // 16MHz clock speed
 TIM4->PSC = 16-1; // 1Mhz to achieve result in ms
 80017f0:	4b2e      	ldr	r3, [pc, #184]	; (80018ac <TIM4_FEEDBACK_RIGHTWHEEL+0xc0>)
 80017f2:	220f      	movs	r2, #15
 80017f4:	629a      	str	r2, [r3, #40]	; 0x28
 // Reset counter
 TIM4->CNT = 0;
 80017f6:	4b2d      	ldr	r3, [pc, #180]	; (80018ac <TIM4_FEEDBACK_RIGHTWHEEL+0xc0>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	625a      	str	r2, [r3, #36]	; 0x24
 // CHANNEL 1 - Duty cycle of PWM signal in CCR2
 TIM4->CCMR1 |=  (TIM3->CCMR1 & ~TIM_CCMR1_CC1S) |  (0b01<<TIM_CCMR1_CC1S_Pos); // Input mode mapped on TI1
 80017fc:	4b2c      	ldr	r3, [pc, #176]	; (80018b0 <TIM4_FEEDBACK_RIGHTWHEEL+0xc4>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f023 0303 	bic.w	r3, r3, #3
 8001804:	f043 0201 	orr.w	r2, r3, #1
 8001808:	4b28      	ldr	r3, [pc, #160]	; (80018ac <TIM4_FEEDBACK_RIGHTWHEEL+0xc0>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	4927      	ldr	r1, [pc, #156]	; (80018ac <TIM4_FEEDBACK_RIGHTWHEEL+0xc0>)
 800180e:	4313      	orrs	r3, r2
 8001810:	618b      	str	r3, [r1, #24]
 TIM4->CCER &= ~((0b11 << TIM_CCER_CC1P_Pos) | (0b11 << TIM_CCER_CC1NP_Pos)); 	// Clear Register //noninverted/rising edge
 8001812:	4b26      	ldr	r3, [pc, #152]	; (80018ac <TIM4_FEEDBACK_RIGHTWHEEL+0xc0>)
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	4a25      	ldr	r2, [pc, #148]	; (80018ac <TIM4_FEEDBACK_RIGHTWHEEL+0xc0>)
 8001818:	f023 031e 	bic.w	r3, r3, #30
 800181c:	6213      	str	r3, [r2, #32]
 TIM4->CCER |= (0b01 << TIM_CCER_CC1P_Pos) | (0b01 << TIM_CCER_CC1NP_Pos);   	// inverted/falling edge
 800181e:	4b23      	ldr	r3, [pc, #140]	; (80018ac <TIM4_FEEDBACK_RIGHTWHEEL+0xc0>)
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	4a22      	ldr	r2, [pc, #136]	; (80018ac <TIM4_FEEDBACK_RIGHTWHEEL+0xc0>)
 8001824:	f043 030a 	orr.w	r3, r3, #10
 8001828:	6213      	str	r3, [r2, #32]
 TIM4->CCER |= TIM_CCER_CC1E_Msk;   											// Input IC1 mapped on TI1
 800182a:	4b20      	ldr	r3, [pc, #128]	; (80018ac <TIM4_FEEDBACK_RIGHTWHEEL+0xc0>)
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	4a1f      	ldr	r2, [pc, #124]	; (80018ac <TIM4_FEEDBACK_RIGHTWHEEL+0xc0>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6213      	str	r3, [r2, #32]
 // CHANNEL 2 - Measure period in CCR1
 TIM4->CCMR1 |= (TIM3->CCMR1 & ~TIM_CCMR1_CC2S) |  (0b01<<TIM_CCMR1_CC2S_Pos);	 // Input mode mapped on TI2
 8001836:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <TIM4_FEEDBACK_RIGHTWHEEL+0xc4>)
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800183e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001842:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <TIM4_FEEDBACK_RIGHTWHEEL+0xc0>)
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	4919      	ldr	r1, [pc, #100]	; (80018ac <TIM4_FEEDBACK_RIGHTWHEEL+0xc0>)
 8001848:	4313      	orrs	r3, r2
 800184a:	618b      	str	r3, [r1, #24]
 TIM4->CCER &= ~((0b11 << TIM_CCER_CC2P_Pos) | (0b11 << TIM_CCER_CC2NP_Pos)); 	 // noninverted/rising edge
 800184c:	4b17      	ldr	r3, [pc, #92]	; (80018ac <TIM4_FEEDBACK_RIGHTWHEEL+0xc0>)
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	4a16      	ldr	r2, [pc, #88]	; (80018ac <TIM4_FEEDBACK_RIGHTWHEEL+0xc0>)
 8001852:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8001856:	6213      	str	r3, [r2, #32]
 //TIM4->CCER |= (0b01 << TIM_CCER_CC2P_Pos) | (0b01 << TIM_CCER_CC2NP_Pos); 	 // inverted/falling edge
 TIM4->CCER |= TIM_CCER_CC2E_Msk;   											 // Capture/Compare 2 output enable
 8001858:	4b14      	ldr	r3, [pc, #80]	; (80018ac <TIM4_FEEDBACK_RIGHTWHEEL+0xc0>)
 800185a:	6a1b      	ldr	r3, [r3, #32]
 800185c:	4a13      	ldr	r2, [pc, #76]	; (80018ac <TIM4_FEEDBACK_RIGHTWHEEL+0xc0>)
 800185e:	f043 0310 	orr.w	r3, r3, #16
 8001862:	6213      	str	r3, [r2, #32]

 // Filtered Timer Input 1 (TI1FP1)
 TIM4->SMCR = (TIM3->SMCR & ~TIM_SMCR_TS) | (0b101 << TIM_SMCR_TS_Pos);
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <TIM4_FEEDBACK_RIGHTWHEEL+0xc4>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800186c:	4a0f      	ldr	r2, [pc, #60]	; (80018ac <TIM4_FEEDBACK_RIGHTWHEEL+0xc0>)
 800186e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001872:	6093      	str	r3, [r2, #8]
 // Reset Mode
 TIM4->SMCR = (TIM3->SMCR & ~TIM_SMCR_SMS) | (0b100 << TIM_SMCR_SMS_Pos);
 8001874:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <TIM4_FEEDBACK_RIGHTWHEEL+0xc4>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800187c:	f023 0307 	bic.w	r3, r3, #7
 8001880:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <TIM4_FEEDBACK_RIGHTWHEEL+0xc0>)
 8001882:	f043 0304 	orr.w	r3, r3, #4
 8001886:	6093      	str	r3, [r2, #8]

 // Enable Capture / Compare interrupt for channel 1 and 2
 TIM4->DIER |= TIM_DIER_UIE | TIM_DIER_CC1IE | TIM_DIER_CC2IE;
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <TIM4_FEEDBACK_RIGHTWHEEL+0xc0>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	4a07      	ldr	r2, [pc, #28]	; (80018ac <TIM4_FEEDBACK_RIGHTWHEEL+0xc0>)
 800188e:	f043 0307 	orr.w	r3, r3, #7
 8001892:	60d3      	str	r3, [r2, #12]
 // Enable interrupt handler
 NVIC_EnableIRQ(TIM4_IRQn);
 8001894:	201e      	movs	r0, #30
 8001896:	f7ff fa45 	bl	8000d24 <__NVIC_EnableIRQ>
 // Enable counter
 TIM4->CR1 |= TIM_CR1_CEN | 0b01<<(TIM_CR1_CMS_Pos);
 800189a:	4b04      	ldr	r3, [pc, #16]	; (80018ac <TIM4_FEEDBACK_RIGHTWHEEL+0xc0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a03      	ldr	r2, [pc, #12]	; (80018ac <TIM4_FEEDBACK_RIGHTWHEEL+0xc0>)
 80018a0:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 80018a4:	6013      	str	r3, [r2, #0]
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40000800 	.word	0x40000800
 80018b0:	40000400 	.word	0x40000400

080018b4 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b0a6      	sub	sp, #152	; 0x98
 80018b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018be:	2228      	movs	r2, #40	; 0x28
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f002 fdda 	bl	800447c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	2258      	movs	r2, #88	; 0x58
 80018dc:	2100      	movs	r1, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	f002 fdcc 	bl	800447c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018e4:	2302      	movs	r3, #2
 80018e6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018e8:	2301      	movs	r3, #1
 80018ea:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018ec:	2310      	movs	r3, #16
 80018ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018f2:	2302      	movs	r3, #2
 80018f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001900:	2300      	movs	r3, #0
 8001902:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001906:	2300      	movs	r3, #0
 8001908:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800190c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001910:	4618      	mov	r0, r3
 8001912:	f000 fd2d 	bl	8002370 <HAL_RCC_OscConfig>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800191c:	f000 f888 	bl	8001a30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001920:	230f      	movs	r3, #15
 8001922:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001924:	2302      	movs	r3, #2
 8001926:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001928:	2300      	movs	r3, #0
 800192a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800192c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001930:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001932:	2300      	movs	r3, #0
 8001934:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001936:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800193a:	2100      	movs	r1, #0
 800193c:	4618      	mov	r0, r3
 800193e:	f001 fc2d 	bl	800319c <HAL_RCC_ClockConfig>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001948:	f000 f872 	bl	8001a30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800194c:	2302      	movs	r3, #2
 800194e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001950:	2300      	movs	r3, #0
 8001952:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	4618      	mov	r0, r3
 8001958:	f001 fe56 	bl	8003608 <HAL_RCCEx_PeriphCLKConfig>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001962:	f000 f865 	bl	8001a30 <Error_Handler>
  }
}
 8001966:	bf00      	nop
 8001968:	3798      	adds	r7, #152	; 0x98
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <MX_USART1_UART_Init>:

// ------------ COMMUNICATION------------------------
static void MX_USART1_UART_Init(void)
// TX: PC3 - RX: PC4
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001974:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <MX_USART1_UART_Init+0x58>)
 8001976:	4a15      	ldr	r2, [pc, #84]	; (80019cc <MX_USART1_UART_Init+0x5c>)
 8001978:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <MX_USART1_UART_Init+0x58>)
 800197c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001980:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <MX_USART1_UART_Init+0x58>)
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <MX_USART1_UART_Init+0x58>)
 800198a:	2200      	movs	r2, #0
 800198c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <MX_USART1_UART_Init+0x58>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <MX_USART1_UART_Init+0x58>)
 8001996:	220c      	movs	r2, #12
 8001998:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <MX_USART1_UART_Init+0x58>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <MX_USART1_UART_Init+0x58>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019a6:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <MX_USART1_UART_Init+0x58>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <MX_USART1_UART_Init+0x58>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019b2:	4805      	ldr	r0, [pc, #20]	; (80019c8 <MX_USART1_UART_Init+0x58>)
 80019b4:	f002 f846 	bl	8003a44 <HAL_UART_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80019be:	f000 f837 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	2000023c 	.word	0x2000023c
 80019cc:	40013800 	.word	0x40013800

080019d0 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80019d4:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <MX_USART2_UART_Init+0x58>)
 80019d6:	4a15      	ldr	r2, [pc, #84]	; (8001a2c <MX_USART2_UART_Init+0x5c>)
 80019d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019da:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <MX_USART2_UART_Init+0x58>)
 80019dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <MX_USART2_UART_Init+0x58>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019e8:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <MX_USART2_UART_Init+0x58>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019ee:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <MX_USART2_UART_Init+0x58>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <MX_USART2_UART_Init+0x58>)
 80019f6:	220c      	movs	r2, #12
 80019f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <MX_USART2_UART_Init+0x58>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <MX_USART2_UART_Init+0x58>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a06:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <MX_USART2_UART_Init+0x58>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <MX_USART2_UART_Init+0x58>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a12:	4805      	ldr	r0, [pc, #20]	; (8001a28 <MX_USART2_UART_Init+0x58>)
 8001a14:	f002 f816 	bl	8003a44 <HAL_UART_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a1e:	f000 f807 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	200003cc 	.word	0x200003cc
 8001a2c:	40004400 	.word	0x40004400

08001a30 <Error_Handler>:


void Error_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a34:	b672      	cpsid	i
}
 8001a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <Error_Handler+0x8>
	...

08001a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a42:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <HAL_MspInit+0x44>)
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	4a0e      	ldr	r2, [pc, #56]	; (8001a80 <HAL_MspInit+0x44>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6193      	str	r3, [r2, #24]
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <HAL_MspInit+0x44>)
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	607b      	str	r3, [r7, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <HAL_MspInit+0x44>)
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	4a08      	ldr	r2, [pc, #32]	; (8001a80 <HAL_MspInit+0x44>)
 8001a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a64:	61d3      	str	r3, [r2, #28]
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_MspInit+0x44>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a72:	2007      	movs	r0, #7
 8001a74:	f000 fabe 	bl	8001ff4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40021000 	.word	0x40021000

08001a84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08c      	sub	sp, #48	; 0x30
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a2e      	ldr	r2, [pc, #184]	; (8001b5c <HAL_UART_MspInit+0xd8>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d128      	bne.n	8001af8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aa6:	4b2e      	ldr	r3, [pc, #184]	; (8001b60 <HAL_UART_MspInit+0xdc>)
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	4a2d      	ldr	r2, [pc, #180]	; (8001b60 <HAL_UART_MspInit+0xdc>)
 8001aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab0:	6193      	str	r3, [r2, #24]
 8001ab2:	4b2b      	ldr	r3, [pc, #172]	; (8001b60 <HAL_UART_MspInit+0xdc>)
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aba:	61bb      	str	r3, [r7, #24]
 8001abc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001abe:	4b28      	ldr	r3, [pc, #160]	; (8001b60 <HAL_UART_MspInit+0xdc>)
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	4a27      	ldr	r2, [pc, #156]	; (8001b60 <HAL_UART_MspInit+0xdc>)
 8001ac4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ac8:	6153      	str	r3, [r2, #20]
 8001aca:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <HAL_UART_MspInit+0xdc>)
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ad6:	2330      	movs	r3, #48	; 0x30
 8001ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ada:	2302      	movs	r3, #2
 8001adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ae6:	2307      	movs	r3, #7
 8001ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aea:	f107 031c 	add.w	r3, r7, #28
 8001aee:	4619      	mov	r1, r3
 8001af0:	481c      	ldr	r0, [pc, #112]	; (8001b64 <HAL_UART_MspInit+0xe0>)
 8001af2:	f000 fab3 	bl	800205c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001af6:	e02d      	b.n	8001b54 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART2)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a1a      	ldr	r2, [pc, #104]	; (8001b68 <HAL_UART_MspInit+0xe4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d128      	bne.n	8001b54 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b02:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <HAL_UART_MspInit+0xdc>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	4a16      	ldr	r2, [pc, #88]	; (8001b60 <HAL_UART_MspInit+0xdc>)
 8001b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b0c:	61d3      	str	r3, [r2, #28]
 8001b0e:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <HAL_UART_MspInit+0xdc>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_UART_MspInit+0xdc>)
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	4a10      	ldr	r2, [pc, #64]	; (8001b60 <HAL_UART_MspInit+0xdc>)
 8001b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b24:	6153      	str	r3, [r2, #20]
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <HAL_UART_MspInit+0xdc>)
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b32:	230c      	movs	r3, #12
 8001b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b42:	2307      	movs	r3, #7
 8001b44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b46:	f107 031c 	add.w	r3, r7, #28
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b50:	f000 fa84 	bl	800205c <HAL_GPIO_Init>
}
 8001b54:	bf00      	nop
 8001b56:	3730      	adds	r7, #48	; 0x30
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40013800 	.word	0x40013800
 8001b60:	40021000 	.word	0x40021000
 8001b64:	48000800 	.word	0x48000800
 8001b68:	40004400 	.word	0x40004400

08001b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <NMI_Handler+0x4>

08001b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b76:	e7fe      	b.n	8001b76 <HardFault_Handler+0x4>

08001b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <MemManage_Handler+0x4>

08001b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b82:	e7fe      	b.n	8001b82 <BusFault_Handler+0x4>

08001b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <UsageFault_Handler+0x4>

08001b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb8:	f000 f94a 	bl	8001e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
	return 1;
 8001bc4:	2301      	movs	r3, #1
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <_kill>:

int _kill(int pid, int sig)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bda:	f002 fc25 	bl	8004428 <__errno>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2216      	movs	r2, #22
 8001be2:	601a      	str	r2, [r3, #0]
	return -1;
 8001be4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <_exit>:

void _exit (int status)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff ffe7 	bl	8001bd0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c02:	e7fe      	b.n	8001c02 <_exit+0x12>

08001c04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	e00a      	b.n	8001c2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c16:	f3af 8000 	nop.w
 8001c1a:	4601      	mov	r1, r0
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	60ba      	str	r2, [r7, #8]
 8001c22:	b2ca      	uxtb	r2, r1
 8001c24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	dbf0      	blt.n	8001c16 <_read+0x12>
	}

return len;
 8001c34:	687b      	ldr	r3, [r7, #4]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b086      	sub	sp, #24
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	60f8      	str	r0, [r7, #12]
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	e009      	b.n	8001c64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	1c5a      	adds	r2, r3, #1
 8001c54:	60ba      	str	r2, [r7, #8]
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	3301      	adds	r3, #1
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	dbf1      	blt.n	8001c50 <_write+0x12>
	}
	return len;
 8001c6c:	687b      	ldr	r3, [r7, #4]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <_close>:

int _close(int file)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
	return -1;
 8001c7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c9e:	605a      	str	r2, [r3, #4]
	return 0;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <_isatty>:

int _isatty(int file)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
	return 1;
 8001cb6:	2301      	movs	r3, #1
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
	return 0;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce8:	4a14      	ldr	r2, [pc, #80]	; (8001d3c <_sbrk+0x5c>)
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <_sbrk+0x60>)
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf4:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <_sbrk+0x64>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d102      	bne.n	8001d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <_sbrk+0x64>)
 8001cfe:	4a12      	ldr	r2, [pc, #72]	; (8001d48 <_sbrk+0x68>)
 8001d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <_sbrk+0x64>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d207      	bcs.n	8001d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d10:	f002 fb8a 	bl	8004428 <__errno>
 8001d14:	4603      	mov	r3, r0
 8001d16:	220c      	movs	r2, #12
 8001d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1e:	e009      	b.n	8001d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d20:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <_sbrk+0x64>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d26:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <_sbrk+0x64>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <_sbrk+0x64>)
 8001d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d32:	68fb      	ldr	r3, [r7, #12]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20010000 	.word	0x20010000
 8001d40:	00000400 	.word	0x00000400
 8001d44:	2000022c 	.word	0x2000022c
 8001d48:	20000468 	.word	0x20000468

08001d4c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <SystemInit+0x20>)
 8001d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d56:	4a05      	ldr	r2, [pc, #20]	; (8001d6c <SystemInit+0x20>)
 8001d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001da8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d74:	480d      	ldr	r0, [pc, #52]	; (8001dac <LoopForever+0x6>)
  ldr r1, =_edata
 8001d76:	490e      	ldr	r1, [pc, #56]	; (8001db0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d78:	4a0e      	ldr	r2, [pc, #56]	; (8001db4 <LoopForever+0xe>)
  movs r3, #0
 8001d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d7c:	e002      	b.n	8001d84 <LoopCopyDataInit>

08001d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d82:	3304      	adds	r3, #4

08001d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d88:	d3f9      	bcc.n	8001d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d8a:	4a0b      	ldr	r2, [pc, #44]	; (8001db8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d8c:	4c0b      	ldr	r4, [pc, #44]	; (8001dbc <LoopForever+0x16>)
  movs r3, #0
 8001d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d90:	e001      	b.n	8001d96 <LoopFillZerobss>

08001d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d94:	3204      	adds	r2, #4

08001d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d98:	d3fb      	bcc.n	8001d92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d9a:	f7ff ffd7 	bl	8001d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d9e:	f002 fb49 	bl	8004434 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001da2:	f7ff f807 	bl	8000db4 <main>

08001da6 <LoopForever>:

LoopForever:
    b LoopForever
 8001da6:	e7fe      	b.n	8001da6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001da8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001db4:	08009274 	.word	0x08009274
  ldr r2, =_sbss
 8001db8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001dbc:	20000468 	.word	0x20000468

08001dc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dc0:	e7fe      	b.n	8001dc0 <ADC1_2_IRQHandler>
	...

08001dc4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <HAL_Init+0x28>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a07      	ldr	r2, [pc, #28]	; (8001dec <HAL_Init+0x28>)
 8001dce:	f043 0310 	orr.w	r3, r3, #16
 8001dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd4:	2003      	movs	r0, #3
 8001dd6:	f000 f90d 	bl	8001ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f000 f808 	bl	8001df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001de0:	f7ff fe2c 	bl	8001a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40022000 	.word	0x40022000

08001df0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_InitTick+0x54>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_InitTick+0x58>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	4619      	mov	r1, r3
 8001e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 f917 	bl	8002042 <HAL_SYSTICK_Config>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e00e      	b.n	8001e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b0f      	cmp	r3, #15
 8001e22:	d80a      	bhi.n	8001e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e24:	2200      	movs	r2, #0
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2c:	f000 f8ed 	bl	800200a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e30:	4a06      	ldr	r2, [pc, #24]	; (8001e4c <HAL_InitTick+0x5c>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	e000      	b.n	8001e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	2000000c 	.word	0x2000000c
 8001e48:	20000014 	.word	0x20000014
 8001e4c:	20000010 	.word	0x20000010

08001e50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_IncTick+0x20>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <HAL_IncTick+0x24>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4413      	add	r3, r2
 8001e60:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <HAL_IncTick+0x24>)
 8001e62:	6013      	str	r3, [r2, #0]
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	20000014 	.word	0x20000014
 8001e74:	20000454 	.word	0x20000454

08001e78 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001e7c:	4b03      	ldr	r3, [pc, #12]	; (8001e8c <HAL_GetTick+0x14>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	20000454 	.word	0x20000454

08001e90 <__NVIC_SetPriorityGrouping>:
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eac:	4013      	ands	r3, r2
 8001eae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ec2:	4a04      	ldr	r2, [pc, #16]	; (8001ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	60d3      	str	r3, [r2, #12]
}
 8001ec8:	bf00      	nop
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <__NVIC_GetPriorityGrouping>:
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001edc:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	0a1b      	lsrs	r3, r3, #8
 8001ee2:	f003 0307 	and.w	r3, r3, #7
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <__NVIC_SetPriority>:
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	6039      	str	r1, [r7, #0]
 8001efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	db0a      	blt.n	8001f1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	490c      	ldr	r1, [pc, #48]	; (8001f40 <__NVIC_SetPriority+0x4c>)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	0112      	lsls	r2, r2, #4
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	440b      	add	r3, r1
 8001f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f1c:	e00a      	b.n	8001f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4908      	ldr	r1, [pc, #32]	; (8001f44 <__NVIC_SetPriority+0x50>)
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	3b04      	subs	r3, #4
 8001f2c:	0112      	lsls	r2, r2, #4
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	440b      	add	r3, r1
 8001f32:	761a      	strb	r2, [r3, #24]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000e100 	.word	0xe000e100
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f1c3 0307 	rsb	r3, r3, #7
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	bf28      	it	cs
 8001f66:	2304      	movcs	r3, #4
 8001f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	2b06      	cmp	r3, #6
 8001f70:	d902      	bls.n	8001f78 <NVIC_EncodePriority+0x30>
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3b03      	subs	r3, #3
 8001f76:	e000      	b.n	8001f7a <NVIC_EncodePriority+0x32>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43da      	mvns	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f90:	f04f 31ff 	mov.w	r1, #4294967295
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	43d9      	mvns	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	4313      	orrs	r3, r2
         );
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3724      	adds	r7, #36	; 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fc0:	d301      	bcc.n	8001fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e00f      	b.n	8001fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <SysTick_Config+0x40>)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fce:	210f      	movs	r1, #15
 8001fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd4:	f7ff ff8e 	bl	8001ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <SysTick_Config+0x40>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fde:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <SysTick_Config+0x40>)
 8001fe0:	2207      	movs	r2, #7
 8001fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	e000e010 	.word	0xe000e010

08001ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff ff47 	bl	8001e90 <__NVIC_SetPriorityGrouping>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b086      	sub	sp, #24
 800200e:	af00      	add	r7, sp, #0
 8002010:	4603      	mov	r3, r0
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800201c:	f7ff ff5c 	bl	8001ed8 <__NVIC_GetPriorityGrouping>
 8002020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	6978      	ldr	r0, [r7, #20]
 8002028:	f7ff ff8e 	bl	8001f48 <NVIC_EncodePriority>
 800202c:	4602      	mov	r2, r0
 800202e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff5d 	bl	8001ef4 <__NVIC_SetPriority>
}
 800203a:	bf00      	nop
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff ffb0 	bl	8001fb0 <SysTick_Config>
 8002050:	4603      	mov	r3, r0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800205c:	b480      	push	{r7}
 800205e:	b087      	sub	sp, #28
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800206a:	e160      	b.n	800232e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	2101      	movs	r1, #1
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	fa01 f303 	lsl.w	r3, r1, r3
 8002078:	4013      	ands	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 8152 	beq.w	8002328 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d00b      	beq.n	80020a4 <HAL_GPIO_Init+0x48>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b02      	cmp	r3, #2
 8002092:	d007      	beq.n	80020a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002098:	2b11      	cmp	r3, #17
 800209a:	d003      	beq.n	80020a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b12      	cmp	r3, #18
 80020a2:	d130      	bne.n	8002106 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	2203      	movs	r2, #3
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4013      	ands	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020da:	2201      	movs	r2, #1
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43db      	mvns	r3, r3
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	4013      	ands	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	091b      	lsrs	r3, r3, #4
 80020f0:	f003 0201 	and.w	r2, r3, #1
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	2203      	movs	r2, #3
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	4013      	ands	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_Init+0xea>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b12      	cmp	r3, #18
 8002144:	d123      	bne.n	800218e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	08da      	lsrs	r2, r3, #3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3208      	adds	r2, #8
 800214e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002152:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	220f      	movs	r2, #15
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4013      	ands	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	691a      	ldr	r2, [r3, #16]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	08da      	lsrs	r2, r3, #3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3208      	adds	r2, #8
 8002188:	6939      	ldr	r1, [r7, #16]
 800218a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	2203      	movs	r2, #3
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	4013      	ands	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0203 	and.w	r2, r3, #3
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 80ac 	beq.w	8002328 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d0:	4b5e      	ldr	r3, [pc, #376]	; (800234c <HAL_GPIO_Init+0x2f0>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	4a5d      	ldr	r2, [pc, #372]	; (800234c <HAL_GPIO_Init+0x2f0>)
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	6193      	str	r3, [r2, #24]
 80021dc:	4b5b      	ldr	r3, [pc, #364]	; (800234c <HAL_GPIO_Init+0x2f0>)
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021e8:	4a59      	ldr	r2, [pc, #356]	; (8002350 <HAL_GPIO_Init+0x2f4>)
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	089b      	lsrs	r3, r3, #2
 80021ee:	3302      	adds	r3, #2
 80021f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	220f      	movs	r2, #15
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002212:	d025      	beq.n	8002260 <HAL_GPIO_Init+0x204>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a4f      	ldr	r2, [pc, #316]	; (8002354 <HAL_GPIO_Init+0x2f8>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d01f      	beq.n	800225c <HAL_GPIO_Init+0x200>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a4e      	ldr	r2, [pc, #312]	; (8002358 <HAL_GPIO_Init+0x2fc>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d019      	beq.n	8002258 <HAL_GPIO_Init+0x1fc>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a4d      	ldr	r2, [pc, #308]	; (800235c <HAL_GPIO_Init+0x300>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d013      	beq.n	8002254 <HAL_GPIO_Init+0x1f8>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a4c      	ldr	r2, [pc, #304]	; (8002360 <HAL_GPIO_Init+0x304>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d00d      	beq.n	8002250 <HAL_GPIO_Init+0x1f4>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a4b      	ldr	r2, [pc, #300]	; (8002364 <HAL_GPIO_Init+0x308>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d007      	beq.n	800224c <HAL_GPIO_Init+0x1f0>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a4a      	ldr	r2, [pc, #296]	; (8002368 <HAL_GPIO_Init+0x30c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d101      	bne.n	8002248 <HAL_GPIO_Init+0x1ec>
 8002244:	2306      	movs	r3, #6
 8002246:	e00c      	b.n	8002262 <HAL_GPIO_Init+0x206>
 8002248:	2307      	movs	r3, #7
 800224a:	e00a      	b.n	8002262 <HAL_GPIO_Init+0x206>
 800224c:	2305      	movs	r3, #5
 800224e:	e008      	b.n	8002262 <HAL_GPIO_Init+0x206>
 8002250:	2304      	movs	r3, #4
 8002252:	e006      	b.n	8002262 <HAL_GPIO_Init+0x206>
 8002254:	2303      	movs	r3, #3
 8002256:	e004      	b.n	8002262 <HAL_GPIO_Init+0x206>
 8002258:	2302      	movs	r3, #2
 800225a:	e002      	b.n	8002262 <HAL_GPIO_Init+0x206>
 800225c:	2301      	movs	r3, #1
 800225e:	e000      	b.n	8002262 <HAL_GPIO_Init+0x206>
 8002260:	2300      	movs	r3, #0
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	f002 0203 	and.w	r2, r2, #3
 8002268:	0092      	lsls	r2, r2, #2
 800226a:	4093      	lsls	r3, r2
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002272:	4937      	ldr	r1, [pc, #220]	; (8002350 <HAL_GPIO_Init+0x2f4>)
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	089b      	lsrs	r3, r3, #2
 8002278:	3302      	adds	r3, #2
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002280:	4b3a      	ldr	r3, [pc, #232]	; (800236c <HAL_GPIO_Init+0x310>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	43db      	mvns	r3, r3
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4013      	ands	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80022a4:	4a31      	ldr	r2, [pc, #196]	; (800236c <HAL_GPIO_Init+0x310>)
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022aa:	4b30      	ldr	r3, [pc, #192]	; (800236c <HAL_GPIO_Init+0x310>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	43db      	mvns	r3, r3
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4013      	ands	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80022ce:	4a27      	ldr	r2, [pc, #156]	; (800236c <HAL_GPIO_Init+0x310>)
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022d4:	4b25      	ldr	r3, [pc, #148]	; (800236c <HAL_GPIO_Init+0x310>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	43db      	mvns	r3, r3
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4013      	ands	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80022f8:	4a1c      	ldr	r2, [pc, #112]	; (800236c <HAL_GPIO_Init+0x310>)
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022fe:	4b1b      	ldr	r3, [pc, #108]	; (800236c <HAL_GPIO_Init+0x310>)
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	43db      	mvns	r3, r3
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4013      	ands	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4313      	orrs	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002322:	4a12      	ldr	r2, [pc, #72]	; (800236c <HAL_GPIO_Init+0x310>)
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	3301      	adds	r3, #1
 800232c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	fa22 f303 	lsr.w	r3, r2, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	f47f ae97 	bne.w	800206c <HAL_GPIO_Init+0x10>
  }
}
 800233e:	bf00      	nop
 8002340:	bf00      	nop
 8002342:	371c      	adds	r7, #28
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	40021000 	.word	0x40021000
 8002350:	40010000 	.word	0x40010000
 8002354:	48000400 	.word	0x48000400
 8002358:	48000800 	.word	0x48000800
 800235c:	48000c00 	.word	0x48000c00
 8002360:	48001000 	.word	0x48001000
 8002364:	48001400 	.word	0x48001400
 8002368:	48001800 	.word	0x48001800
 800236c:	40010400 	.word	0x40010400

08002370 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002376:	af00      	add	r7, sp, #0
 8002378:	1d3b      	adds	r3, r7, #4
 800237a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800237c:	1d3b      	adds	r3, r7, #4
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d102      	bne.n	800238a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	f000 bf01 	b.w	800318c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800238a:	1d3b      	adds	r3, r7, #4
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 8160 	beq.w	800265a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800239a:	4bae      	ldr	r3, [pc, #696]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 030c 	and.w	r3, r3, #12
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d00c      	beq.n	80023c0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023a6:	4bab      	ldr	r3, [pc, #684]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d159      	bne.n	8002466 <HAL_RCC_OscConfig+0xf6>
 80023b2:	4ba8      	ldr	r3, [pc, #672]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80023ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023be:	d152      	bne.n	8002466 <HAL_RCC_OscConfig+0xf6>
 80023c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023c4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80023cc:	fa93 f3a3 	rbit	r3, r3
 80023d0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023d4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d8:	fab3 f383 	clz	r3, r3
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d102      	bne.n	80023f2 <HAL_RCC_OscConfig+0x82>
 80023ec:	4b99      	ldr	r3, [pc, #612]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	e015      	b.n	800241e <HAL_RCC_OscConfig+0xae>
 80023f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023f6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80023fe:	fa93 f3a3 	rbit	r3, r3
 8002402:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002406:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800240a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800240e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800241a:	4b8e      	ldr	r3, [pc, #568]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002422:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002426:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800242a:	fa92 f2a2 	rbit	r2, r2
 800242e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002432:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002436:	fab2 f282 	clz	r2, r2
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	f042 0220 	orr.w	r2, r2, #32
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	f002 021f 	and.w	r2, r2, #31
 8002446:	2101      	movs	r1, #1
 8002448:	fa01 f202 	lsl.w	r2, r1, r2
 800244c:	4013      	ands	r3, r2
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 8102 	beq.w	8002658 <HAL_RCC_OscConfig+0x2e8>
 8002454:	1d3b      	adds	r3, r7, #4
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	f040 80fc 	bne.w	8002658 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	f000 be93 	b.w	800318c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002466:	1d3b      	adds	r3, r7, #4
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002470:	d106      	bne.n	8002480 <HAL_RCC_OscConfig+0x110>
 8002472:	4b78      	ldr	r3, [pc, #480]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a77      	ldr	r2, [pc, #476]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 8002478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	e030      	b.n	80024e2 <HAL_RCC_OscConfig+0x172>
 8002480:	1d3b      	adds	r3, r7, #4
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10c      	bne.n	80024a4 <HAL_RCC_OscConfig+0x134>
 800248a:	4b72      	ldr	r3, [pc, #456]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a71      	ldr	r2, [pc, #452]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 8002490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	4b6f      	ldr	r3, [pc, #444]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a6e      	ldr	r2, [pc, #440]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 800249c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	e01e      	b.n	80024e2 <HAL_RCC_OscConfig+0x172>
 80024a4:	1d3b      	adds	r3, r7, #4
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024ae:	d10c      	bne.n	80024ca <HAL_RCC_OscConfig+0x15a>
 80024b0:	4b68      	ldr	r3, [pc, #416]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a67      	ldr	r2, [pc, #412]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 80024b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	4b65      	ldr	r3, [pc, #404]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a64      	ldr	r2, [pc, #400]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 80024c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	e00b      	b.n	80024e2 <HAL_RCC_OscConfig+0x172>
 80024ca:	4b62      	ldr	r3, [pc, #392]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a61      	ldr	r2, [pc, #388]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 80024d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	4b5f      	ldr	r3, [pc, #380]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a5e      	ldr	r2, [pc, #376]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 80024dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024e2:	1d3b      	adds	r3, r7, #4
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d059      	beq.n	80025a0 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7ff fcc4 	bl	8001e78 <HAL_GetTick>
 80024f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f4:	e00a      	b.n	800250c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f6:	f7ff fcbf 	bl	8001e78 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	; 0x64
 8002504:	d902      	bls.n	800250c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	f000 be40 	b.w	800318c <HAL_RCC_OscConfig+0xe1c>
 800250c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002510:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002514:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002518:	fa93 f3a3 	rbit	r3, r3
 800251c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002520:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002524:	fab3 f383 	clz	r3, r3
 8002528:	b2db      	uxtb	r3, r3
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	b2db      	uxtb	r3, r3
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b01      	cmp	r3, #1
 8002536:	d102      	bne.n	800253e <HAL_RCC_OscConfig+0x1ce>
 8002538:	4b46      	ldr	r3, [pc, #280]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	e015      	b.n	800256a <HAL_RCC_OscConfig+0x1fa>
 800253e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002542:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002552:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002556:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800255a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002566:	4b3b      	ldr	r3, [pc, #236]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800256e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002572:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002576:	fa92 f2a2 	rbit	r2, r2
 800257a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800257e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002582:	fab2 f282 	clz	r2, r2
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	f042 0220 	orr.w	r2, r2, #32
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	f002 021f 	and.w	r2, r2, #31
 8002592:	2101      	movs	r1, #1
 8002594:	fa01 f202 	lsl.w	r2, r1, r2
 8002598:	4013      	ands	r3, r2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0ab      	beq.n	80024f6 <HAL_RCC_OscConfig+0x186>
 800259e:	e05c      	b.n	800265a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a0:	f7ff fc6a 	bl	8001e78 <HAL_GetTick>
 80025a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a8:	e00a      	b.n	80025c0 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025aa:	f7ff fc65 	bl	8001e78 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b64      	cmp	r3, #100	; 0x64
 80025b8:	d902      	bls.n	80025c0 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	f000 bde6 	b.w	800318c <HAL_RCC_OscConfig+0xe1c>
 80025c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025c4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80025cc:	fa93 f3a3 	rbit	r3, r3
 80025d0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80025d4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d8:	fab3 f383 	clz	r3, r3
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d102      	bne.n	80025f2 <HAL_RCC_OscConfig+0x282>
 80025ec:	4b19      	ldr	r3, [pc, #100]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	e015      	b.n	800261e <HAL_RCC_OscConfig+0x2ae>
 80025f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025f6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80025fe:	fa93 f3a3 	rbit	r3, r3
 8002602:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002606:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800260a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800260e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800261a:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002622:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002626:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800262a:	fa92 f2a2 	rbit	r2, r2
 800262e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002632:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002636:	fab2 f282 	clz	r2, r2
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	f042 0220 	orr.w	r2, r2, #32
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	f002 021f 	and.w	r2, r2, #31
 8002646:	2101      	movs	r1, #1
 8002648:	fa01 f202 	lsl.w	r2, r1, r2
 800264c:	4013      	ands	r3, r2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1ab      	bne.n	80025aa <HAL_RCC_OscConfig+0x23a>
 8002652:	e002      	b.n	800265a <HAL_RCC_OscConfig+0x2ea>
 8002654:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800265a:	1d3b      	adds	r3, r7, #4
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 8170 	beq.w	800294a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800266a:	4bd0      	ldr	r3, [pc, #832]	; (80029ac <HAL_RCC_OscConfig+0x63c>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 030c 	and.w	r3, r3, #12
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00c      	beq.n	8002690 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002676:	4bcd      	ldr	r3, [pc, #820]	; (80029ac <HAL_RCC_OscConfig+0x63c>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 030c 	and.w	r3, r3, #12
 800267e:	2b08      	cmp	r3, #8
 8002680:	d16d      	bne.n	800275e <HAL_RCC_OscConfig+0x3ee>
 8002682:	4bca      	ldr	r3, [pc, #808]	; (80029ac <HAL_RCC_OscConfig+0x63c>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800268a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800268e:	d166      	bne.n	800275e <HAL_RCC_OscConfig+0x3ee>
 8002690:	2302      	movs	r3, #2
 8002692:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800269a:	fa93 f3a3 	rbit	r3, r3
 800269e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80026a2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a6:	fab3 f383 	clz	r3, r3
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	095b      	lsrs	r3, r3, #5
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d102      	bne.n	80026c0 <HAL_RCC_OscConfig+0x350>
 80026ba:	4bbc      	ldr	r3, [pc, #752]	; (80029ac <HAL_RCC_OscConfig+0x63c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	e013      	b.n	80026e8 <HAL_RCC_OscConfig+0x378>
 80026c0:	2302      	movs	r3, #2
 80026c2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80026ca:	fa93 f3a3 	rbit	r3, r3
 80026ce:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80026d2:	2302      	movs	r3, #2
 80026d4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80026d8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80026e4:	4bb1      	ldr	r3, [pc, #708]	; (80029ac <HAL_RCC_OscConfig+0x63c>)
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	2202      	movs	r2, #2
 80026ea:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80026ee:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80026f2:	fa92 f2a2 	rbit	r2, r2
 80026f6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80026fa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80026fe:	fab2 f282 	clz	r2, r2
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	f042 0220 	orr.w	r2, r2, #32
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	f002 021f 	and.w	r2, r2, #31
 800270e:	2101      	movs	r1, #1
 8002710:	fa01 f202 	lsl.w	r2, r1, r2
 8002714:	4013      	ands	r3, r2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d007      	beq.n	800272a <HAL_RCC_OscConfig+0x3ba>
 800271a:	1d3b      	adds	r3, r7, #4
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d002      	beq.n	800272a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	f000 bd31 	b.w	800318c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272a:	4ba0      	ldr	r3, [pc, #640]	; (80029ac <HAL_RCC_OscConfig+0x63c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002732:	1d3b      	adds	r3, r7, #4
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	21f8      	movs	r1, #248	; 0xf8
 800273a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002742:	fa91 f1a1 	rbit	r1, r1
 8002746:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800274a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800274e:	fab1 f181 	clz	r1, r1
 8002752:	b2c9      	uxtb	r1, r1
 8002754:	408b      	lsls	r3, r1
 8002756:	4995      	ldr	r1, [pc, #596]	; (80029ac <HAL_RCC_OscConfig+0x63c>)
 8002758:	4313      	orrs	r3, r2
 800275a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275c:	e0f5      	b.n	800294a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800275e:	1d3b      	adds	r3, r7, #4
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 8085 	beq.w	8002874 <HAL_RCC_OscConfig+0x504>
 800276a:	2301      	movs	r3, #1
 800276c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002770:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002774:	fa93 f3a3 	rbit	r3, r3
 8002778:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800277c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002780:	fab3 f383 	clz	r3, r3
 8002784:	b2db      	uxtb	r3, r3
 8002786:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800278a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	461a      	mov	r2, r3
 8002792:	2301      	movs	r3, #1
 8002794:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002796:	f7ff fb6f 	bl	8001e78 <HAL_GetTick>
 800279a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027a0:	f7ff fb6a 	bl	8001e78 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d902      	bls.n	80027b6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	f000 bceb 	b.w	800318c <HAL_RCC_OscConfig+0xe1c>
 80027b6:	2302      	movs	r3, #2
 80027b8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80027c0:	fa93 f3a3 	rbit	r3, r3
 80027c4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80027c8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027cc:	fab3 f383 	clz	r3, r3
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	095b      	lsrs	r3, r3, #5
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	f043 0301 	orr.w	r3, r3, #1
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d102      	bne.n	80027e6 <HAL_RCC_OscConfig+0x476>
 80027e0:	4b72      	ldr	r3, [pc, #456]	; (80029ac <HAL_RCC_OscConfig+0x63c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	e013      	b.n	800280e <HAL_RCC_OscConfig+0x49e>
 80027e6:	2302      	movs	r3, #2
 80027e8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ec:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80027f0:	fa93 f3a3 	rbit	r3, r3
 80027f4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80027f8:	2302      	movs	r3, #2
 80027fa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80027fe:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800280a:	4b68      	ldr	r3, [pc, #416]	; (80029ac <HAL_RCC_OscConfig+0x63c>)
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	2202      	movs	r2, #2
 8002810:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002814:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002818:	fa92 f2a2 	rbit	r2, r2
 800281c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002820:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002824:	fab2 f282 	clz	r2, r2
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	f042 0220 	orr.w	r2, r2, #32
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	f002 021f 	and.w	r2, r2, #31
 8002834:	2101      	movs	r1, #1
 8002836:	fa01 f202 	lsl.w	r2, r1, r2
 800283a:	4013      	ands	r3, r2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0af      	beq.n	80027a0 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002840:	4b5a      	ldr	r3, [pc, #360]	; (80029ac <HAL_RCC_OscConfig+0x63c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002848:	1d3b      	adds	r3, r7, #4
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	21f8      	movs	r1, #248	; 0xf8
 8002850:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002858:	fa91 f1a1 	rbit	r1, r1
 800285c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002860:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002864:	fab1 f181 	clz	r1, r1
 8002868:	b2c9      	uxtb	r1, r1
 800286a:	408b      	lsls	r3, r1
 800286c:	494f      	ldr	r1, [pc, #316]	; (80029ac <HAL_RCC_OscConfig+0x63c>)
 800286e:	4313      	orrs	r3, r2
 8002870:	600b      	str	r3, [r1, #0]
 8002872:	e06a      	b.n	800294a <HAL_RCC_OscConfig+0x5da>
 8002874:	2301      	movs	r3, #1
 8002876:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002886:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800288a:	fab3 f383 	clz	r3, r3
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002894:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	461a      	mov	r2, r3
 800289c:	2300      	movs	r3, #0
 800289e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a0:	f7ff faea 	bl	8001e78 <HAL_GetTick>
 80028a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a8:	e00a      	b.n	80028c0 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028aa:	f7ff fae5 	bl	8001e78 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d902      	bls.n	80028c0 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	f000 bc66 	b.w	800318c <HAL_RCC_OscConfig+0xe1c>
 80028c0:	2302      	movs	r3, #2
 80028c2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80028d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d6:	fab3 f383 	clz	r3, r3
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	095b      	lsrs	r3, r3, #5
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d102      	bne.n	80028f0 <HAL_RCC_OscConfig+0x580>
 80028ea:	4b30      	ldr	r3, [pc, #192]	; (80029ac <HAL_RCC_OscConfig+0x63c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	e013      	b.n	8002918 <HAL_RCC_OscConfig+0x5a8>
 80028f0:	2302      	movs	r3, #2
 80028f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80028fa:	fa93 f3a3 	rbit	r3, r3
 80028fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002902:	2302      	movs	r3, #2
 8002904:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002908:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800290c:	fa93 f3a3 	rbit	r3, r3
 8002910:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002914:	4b25      	ldr	r3, [pc, #148]	; (80029ac <HAL_RCC_OscConfig+0x63c>)
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	2202      	movs	r2, #2
 800291a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800291e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002922:	fa92 f2a2 	rbit	r2, r2
 8002926:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800292a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800292e:	fab2 f282 	clz	r2, r2
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	f042 0220 	orr.w	r2, r2, #32
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	f002 021f 	and.w	r2, r2, #31
 800293e:	2101      	movs	r1, #1
 8002940:	fa01 f202 	lsl.w	r2, r1, r2
 8002944:	4013      	ands	r3, r2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1af      	bne.n	80028aa <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800294a:	1d3b      	adds	r3, r7, #4
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 80da 	beq.w	8002b0e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800295a:	1d3b      	adds	r3, r7, #4
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d069      	beq.n	8002a38 <HAL_RCC_OscConfig+0x6c8>
 8002964:	2301      	movs	r3, #1
 8002966:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800296e:	fa93 f3a3 	rbit	r3, r3
 8002972:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002976:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800297a:	fab3 f383 	clz	r3, r3
 800297e:	b2db      	uxtb	r3, r3
 8002980:	461a      	mov	r2, r3
 8002982:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_RCC_OscConfig+0x640>)
 8002984:	4413      	add	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	461a      	mov	r2, r3
 800298a:	2301      	movs	r3, #1
 800298c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298e:	f7ff fa73 	bl	8001e78 <HAL_GetTick>
 8002992:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002996:	e00d      	b.n	80029b4 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002998:	f7ff fa6e 	bl	8001e78 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d905      	bls.n	80029b4 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e3ef      	b.n	800318c <HAL_RCC_OscConfig+0xe1c>
 80029ac:	40021000 	.word	0x40021000
 80029b0:	10908120 	.word	0x10908120
 80029b4:	2302      	movs	r3, #2
 80029b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029be:	fa93 f2a3 	rbit	r2, r3
 80029c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80029cc:	2202      	movs	r2, #2
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	fa93 f2a3 	rbit	r2, r3
 80029da:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80029e4:	2202      	movs	r2, #2
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	fa93 f2a3 	rbit	r2, r3
 80029f2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80029f6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f8:	4ba4      	ldr	r3, [pc, #656]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 80029fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029fc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002a00:	2102      	movs	r1, #2
 8002a02:	6019      	str	r1, [r3, #0]
 8002a04:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	fa93 f1a3 	rbit	r1, r3
 8002a0e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002a12:	6019      	str	r1, [r3, #0]
  return result;
 8002a14:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	fab3 f383 	clz	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	f003 031f 	and.w	r3, r3, #31
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0b0      	beq.n	8002998 <HAL_RCC_OscConfig+0x628>
 8002a36:	e06a      	b.n	8002b0e <HAL_RCC_OscConfig+0x79e>
 8002a38:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	fa93 f2a3 	rbit	r2, r3
 8002a4a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002a4e:	601a      	str	r2, [r3, #0]
  return result;
 8002a50:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002a54:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a56:	fab3 f383 	clz	r3, r3
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4b8c      	ldr	r3, [pc, #560]	; (8002c90 <HAL_RCC_OscConfig+0x920>)
 8002a60:	4413      	add	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	461a      	mov	r2, r3
 8002a66:	2300      	movs	r3, #0
 8002a68:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6a:	f7ff fa05 	bl	8001e78 <HAL_GetTick>
 8002a6e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a72:	e009      	b.n	8002a88 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a74:	f7ff fa00 	bl	8001e78 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e381      	b.n	800318c <HAL_RCC_OscConfig+0xe1c>
 8002a88:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a90:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	fa93 f2a3 	rbit	r2, r3
 8002a9a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	fa93 f2a3 	rbit	r2, r3
 8002ab2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002abc:	2202      	movs	r2, #2
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	fa93 f2a3 	rbit	r2, r3
 8002aca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002ace:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad0:	4b6e      	ldr	r3, [pc, #440]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ad4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ad8:	2102      	movs	r1, #2
 8002ada:	6019      	str	r1, [r3, #0]
 8002adc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	fa93 f1a3 	rbit	r1, r3
 8002ae6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002aea:	6019      	str	r1, [r3, #0]
  return result;
 8002aec:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	fab3 f383 	clz	r3, r3
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	f003 031f 	and.w	r3, r3, #31
 8002b02:	2101      	movs	r1, #1
 8002b04:	fa01 f303 	lsl.w	r3, r1, r3
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1b2      	bne.n	8002a74 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b0e:	1d3b      	adds	r3, r7, #4
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 8157 	beq.w	8002dcc <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b24:	4b59      	ldr	r3, [pc, #356]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d112      	bne.n	8002b56 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b30:	4b56      	ldr	r3, [pc, #344]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	4a55      	ldr	r2, [pc, #340]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	61d3      	str	r3, [r2, #28]
 8002b3c:	4b53      	ldr	r3, [pc, #332]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002b44:	f107 030c 	add.w	r3, r7, #12
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	f107 030c 	add.w	r3, r7, #12
 8002b4e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002b50:	2301      	movs	r3, #1
 8002b52:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b56:	4b4f      	ldr	r3, [pc, #316]	; (8002c94 <HAL_RCC_OscConfig+0x924>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d11a      	bne.n	8002b98 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b62:	4b4c      	ldr	r3, [pc, #304]	; (8002c94 <HAL_RCC_OscConfig+0x924>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a4b      	ldr	r2, [pc, #300]	; (8002c94 <HAL_RCC_OscConfig+0x924>)
 8002b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b6e:	f7ff f983 	bl	8001e78 <HAL_GetTick>
 8002b72:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b76:	e009      	b.n	8002b8c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b78:	f7ff f97e 	bl	8001e78 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b64      	cmp	r3, #100	; 0x64
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e2ff      	b.n	800318c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8c:	4b41      	ldr	r3, [pc, #260]	; (8002c94 <HAL_RCC_OscConfig+0x924>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0ef      	beq.n	8002b78 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b98:	1d3b      	adds	r3, r7, #4
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d106      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x840>
 8002ba2:	4b3a      	ldr	r3, [pc, #232]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	4a39      	ldr	r2, [pc, #228]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	6213      	str	r3, [r2, #32]
 8002bae:	e02f      	b.n	8002c10 <HAL_RCC_OscConfig+0x8a0>
 8002bb0:	1d3b      	adds	r3, r7, #4
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x864>
 8002bba:	4b34      	ldr	r3, [pc, #208]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	4a33      	ldr	r2, [pc, #204]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002bc0:	f023 0301 	bic.w	r3, r3, #1
 8002bc4:	6213      	str	r3, [r2, #32]
 8002bc6:	4b31      	ldr	r3, [pc, #196]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	4a30      	ldr	r2, [pc, #192]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002bcc:	f023 0304 	bic.w	r3, r3, #4
 8002bd0:	6213      	str	r3, [r2, #32]
 8002bd2:	e01d      	b.n	8002c10 <HAL_RCC_OscConfig+0x8a0>
 8002bd4:	1d3b      	adds	r3, r7, #4
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	2b05      	cmp	r3, #5
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x888>
 8002bde:	4b2b      	ldr	r3, [pc, #172]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	4a2a      	ldr	r2, [pc, #168]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002be4:	f043 0304 	orr.w	r3, r3, #4
 8002be8:	6213      	str	r3, [r2, #32]
 8002bea:	4b28      	ldr	r3, [pc, #160]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	4a27      	ldr	r2, [pc, #156]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	6213      	str	r3, [r2, #32]
 8002bf6:	e00b      	b.n	8002c10 <HAL_RCC_OscConfig+0x8a0>
 8002bf8:	4b24      	ldr	r3, [pc, #144]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	4a23      	ldr	r2, [pc, #140]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002bfe:	f023 0301 	bic.w	r3, r3, #1
 8002c02:	6213      	str	r3, [r2, #32]
 8002c04:	4b21      	ldr	r3, [pc, #132]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	4a20      	ldr	r2, [pc, #128]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002c0a:	f023 0304 	bic.w	r3, r3, #4
 8002c0e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c10:	1d3b      	adds	r3, r7, #4
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d06a      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c1a:	f7ff f92d 	bl	8001e78 <HAL_GetTick>
 8002c1e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c22:	e00b      	b.n	8002c3c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c24:	f7ff f928 	bl	8001e78 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e2a7      	b.n	800318c <HAL_RCC_OscConfig+0xe1c>
 8002c3c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002c40:	2202      	movs	r2, #2
 8002c42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	fa93 f2a3 	rbit	r2, r3
 8002c4e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002c58:	2202      	movs	r2, #2
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	fa93 f2a3 	rbit	r2, r3
 8002c66:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002c6a:	601a      	str	r2, [r3, #0]
  return result;
 8002c6c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002c70:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	095b      	lsrs	r3, r3, #5
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	f043 0302 	orr.w	r3, r3, #2
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d108      	bne.n	8002c98 <HAL_RCC_OscConfig+0x928>
 8002c86:	4b01      	ldr	r3, [pc, #4]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	e013      	b.n	8002cb4 <HAL_RCC_OscConfig+0x944>
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	10908120 	.word	0x10908120
 8002c94:	40007000 	.word	0x40007000
 8002c98:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	fa93 f2a3 	rbit	r2, r3
 8002caa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	4bc0      	ldr	r3, [pc, #768]	; (8002fb4 <HAL_RCC_OscConfig+0xc44>)
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002cb8:	2102      	movs	r1, #2
 8002cba:	6011      	str	r1, [r2, #0]
 8002cbc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002cc0:	6812      	ldr	r2, [r2, #0]
 8002cc2:	fa92 f1a2 	rbit	r1, r2
 8002cc6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002cca:	6011      	str	r1, [r2, #0]
  return result;
 8002ccc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002cd0:	6812      	ldr	r2, [r2, #0]
 8002cd2:	fab2 f282 	clz	r2, r2
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	f002 021f 	and.w	r2, r2, #31
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d09a      	beq.n	8002c24 <HAL_RCC_OscConfig+0x8b4>
 8002cee:	e063      	b.n	8002db8 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf0:	f7ff f8c2 	bl	8001e78 <HAL_GetTick>
 8002cf4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf8:	e00b      	b.n	8002d12 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cfa:	f7ff f8bd 	bl	8001e78 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e23c      	b.n	800318c <HAL_RCC_OscConfig+0xe1c>
 8002d12:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d16:	2202      	movs	r2, #2
 8002d18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	fa93 f2a3 	rbit	r2, r3
 8002d24:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d2e:	2202      	movs	r2, #2
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	fa93 f2a3 	rbit	r2, r3
 8002d3c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002d40:	601a      	str	r2, [r3, #0]
  return result;
 8002d42:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002d46:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d48:	fab3 f383 	clz	r3, r3
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	095b      	lsrs	r3, r3, #5
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	f043 0302 	orr.w	r3, r3, #2
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d102      	bne.n	8002d62 <HAL_RCC_OscConfig+0x9f2>
 8002d5c:	4b95      	ldr	r3, [pc, #596]	; (8002fb4 <HAL_RCC_OscConfig+0xc44>)
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	e00d      	b.n	8002d7e <HAL_RCC_OscConfig+0xa0e>
 8002d62:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002d66:	2202      	movs	r2, #2
 8002d68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	fa93 f2a3 	rbit	r2, r3
 8002d74:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	4b8e      	ldr	r3, [pc, #568]	; (8002fb4 <HAL_RCC_OscConfig+0xc44>)
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002d82:	2102      	movs	r1, #2
 8002d84:	6011      	str	r1, [r2, #0]
 8002d86:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002d8a:	6812      	ldr	r2, [r2, #0]
 8002d8c:	fa92 f1a2 	rbit	r1, r2
 8002d90:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d94:	6011      	str	r1, [r2, #0]
  return result;
 8002d96:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	fab2 f282 	clz	r2, r2
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	f002 021f 	and.w	r2, r2, #31
 8002dac:	2101      	movs	r1, #1
 8002dae:	fa01 f202 	lsl.w	r2, r1, r2
 8002db2:	4013      	ands	r3, r2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1a0      	bne.n	8002cfa <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002db8:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d105      	bne.n	8002dcc <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc0:	4b7c      	ldr	r3, [pc, #496]	; (8002fb4 <HAL_RCC_OscConfig+0xc44>)
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	4a7b      	ldr	r2, [pc, #492]	; (8002fb4 <HAL_RCC_OscConfig+0xc44>)
 8002dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dcc:	1d3b      	adds	r3, r7, #4
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 81d9 	beq.w	800318a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dd8:	4b76      	ldr	r3, [pc, #472]	; (8002fb4 <HAL_RCC_OscConfig+0xc44>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 030c 	and.w	r3, r3, #12
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	f000 81a6 	beq.w	8003132 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002de6:	1d3b      	adds	r3, r7, #4
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	f040 811e 	bne.w	800302e <HAL_RCC_OscConfig+0xcbe>
 8002df2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002df6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002dfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	fa93 f2a3 	rbit	r2, r3
 8002e06:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002e0a:	601a      	str	r2, [r3, #0]
  return result;
 8002e0c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002e10:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e12:	fab3 f383 	clz	r3, r3
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	461a      	mov	r2, r3
 8002e24:	2300      	movs	r3, #0
 8002e26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7ff f826 	bl	8001e78 <HAL_GetTick>
 8002e2c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e30:	e009      	b.n	8002e46 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e32:	f7ff f821 	bl	8001e78 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e1a2      	b.n	800318c <HAL_RCC_OscConfig+0xe1c>
 8002e46:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	fa93 f2a3 	rbit	r2, r3
 8002e5a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e5e:	601a      	str	r2, [r3, #0]
  return result;
 8002e60:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e64:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	095b      	lsrs	r3, r3, #5
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d102      	bne.n	8002e80 <HAL_RCC_OscConfig+0xb10>
 8002e7a:	4b4e      	ldr	r3, [pc, #312]	; (8002fb4 <HAL_RCC_OscConfig+0xc44>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	e01b      	b.n	8002eb8 <HAL_RCC_OscConfig+0xb48>
 8002e80:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	fa93 f2a3 	rbit	r2, r3
 8002e94:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	fa93 f2a3 	rbit	r2, r3
 8002eae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	4b3f      	ldr	r3, [pc, #252]	; (8002fb4 <HAL_RCC_OscConfig+0xc44>)
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002ebc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ec0:	6011      	str	r1, [r2, #0]
 8002ec2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	fa92 f1a2 	rbit	r1, r2
 8002ecc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002ed0:	6011      	str	r1, [r2, #0]
  return result;
 8002ed2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	fab2 f282 	clz	r2, r2
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	f042 0220 	orr.w	r2, r2, #32
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	f002 021f 	and.w	r2, r2, #31
 8002ee8:	2101      	movs	r1, #1
 8002eea:	fa01 f202 	lsl.w	r2, r1, r2
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d19e      	bne.n	8002e32 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ef4:	4b2f      	ldr	r3, [pc, #188]	; (8002fb4 <HAL_RCC_OscConfig+0xc44>)
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	f023 020f 	bic.w	r2, r3, #15
 8002efc:	1d3b      	adds	r3, r7, #4
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	492c      	ldr	r1, [pc, #176]	; (8002fb4 <HAL_RCC_OscConfig+0xc44>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002f08:	4b2a      	ldr	r3, [pc, #168]	; (8002fb4 <HAL_RCC_OscConfig+0xc44>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002f10:	1d3b      	adds	r3, r7, #4
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6a19      	ldr	r1, [r3, #32]
 8002f16:	1d3b      	adds	r3, r7, #4
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	4925      	ldr	r1, [pc, #148]	; (8002fb4 <HAL_RCC_OscConfig+0xc44>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	604b      	str	r3, [r1, #4]
 8002f24:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	fa93 f2a3 	rbit	r2, r3
 8002f38:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f3c:	601a      	str	r2, [r3, #0]
  return result;
 8002f3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f42:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f44:	fab3 f383 	clz	r3, r3
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f4e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	461a      	mov	r2, r3
 8002f56:	2301      	movs	r3, #1
 8002f58:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5a:	f7fe ff8d 	bl	8001e78 <HAL_GetTick>
 8002f5e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f62:	e009      	b.n	8002f78 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f64:	f7fe ff88 	bl	8001e78 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e109      	b.n	800318c <HAL_RCC_OscConfig+0xe1c>
 8002f78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	fa93 f2a3 	rbit	r2, r3
 8002f8c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f90:	601a      	str	r2, [r3, #0]
  return result;
 8002f92:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f96:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f98:	fab3 f383 	clz	r3, r3
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d105      	bne.n	8002fb8 <HAL_RCC_OscConfig+0xc48>
 8002fac:	4b01      	ldr	r3, [pc, #4]	; (8002fb4 <HAL_RCC_OscConfig+0xc44>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	e01e      	b.n	8002ff0 <HAL_RCC_OscConfig+0xc80>
 8002fb2:	bf00      	nop
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002fbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	fa93 f2a3 	rbit	r2, r3
 8002fcc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002fd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	fa93 f2a3 	rbit	r2, r3
 8002fe6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	4b6a      	ldr	r3, [pc, #424]	; (8003198 <HAL_RCC_OscConfig+0xe28>)
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002ff4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ff8:	6011      	str	r1, [r2, #0]
 8002ffa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002ffe:	6812      	ldr	r2, [r2, #0]
 8003000:	fa92 f1a2 	rbit	r1, r2
 8003004:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003008:	6011      	str	r1, [r2, #0]
  return result;
 800300a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	fab2 f282 	clz	r2, r2
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	f042 0220 	orr.w	r2, r2, #32
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	f002 021f 	and.w	r2, r2, #31
 8003020:	2101      	movs	r1, #1
 8003022:	fa01 f202 	lsl.w	r2, r1, r2
 8003026:	4013      	ands	r3, r2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d09b      	beq.n	8002f64 <HAL_RCC_OscConfig+0xbf4>
 800302c:	e0ad      	b.n	800318a <HAL_RCC_OscConfig+0xe1a>
 800302e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003032:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003036:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003038:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	fa93 f2a3 	rbit	r2, r3
 8003042:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003046:	601a      	str	r2, [r3, #0]
  return result;
 8003048:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800304c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304e:	fab3 f383 	clz	r3, r3
 8003052:	b2db      	uxtb	r3, r3
 8003054:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003058:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	461a      	mov	r2, r3
 8003060:	2300      	movs	r3, #0
 8003062:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7fe ff08 	bl	8001e78 <HAL_GetTick>
 8003068:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800306c:	e009      	b.n	8003082 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800306e:	f7fe ff03 	bl	8001e78 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e084      	b.n	800318c <HAL_RCC_OscConfig+0xe1c>
 8003082:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003086:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800308a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	fa93 f2a3 	rbit	r2, r3
 8003096:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800309a:	601a      	str	r2, [r3, #0]
  return result;
 800309c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a2:	fab3 f383 	clz	r3, r3
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	095b      	lsrs	r3, r3, #5
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d102      	bne.n	80030bc <HAL_RCC_OscConfig+0xd4c>
 80030b6:	4b38      	ldr	r3, [pc, #224]	; (8003198 <HAL_RCC_OscConfig+0xe28>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	e01b      	b.n	80030f4 <HAL_RCC_OscConfig+0xd84>
 80030bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	fa93 f2a3 	rbit	r2, r3
 80030d0:	f107 0320 	add.w	r3, r7, #32
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	f107 031c 	add.w	r3, r7, #28
 80030da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	f107 031c 	add.w	r3, r7, #28
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	fa93 f2a3 	rbit	r2, r3
 80030ea:	f107 0318 	add.w	r3, r7, #24
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	4b29      	ldr	r3, [pc, #164]	; (8003198 <HAL_RCC_OscConfig+0xe28>)
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	f107 0214 	add.w	r2, r7, #20
 80030f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030fc:	6011      	str	r1, [r2, #0]
 80030fe:	f107 0214 	add.w	r2, r7, #20
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	fa92 f1a2 	rbit	r1, r2
 8003108:	f107 0210 	add.w	r2, r7, #16
 800310c:	6011      	str	r1, [r2, #0]
  return result;
 800310e:	f107 0210 	add.w	r2, r7, #16
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	fab2 f282 	clz	r2, r2
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	f042 0220 	orr.w	r2, r2, #32
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	f002 021f 	and.w	r2, r2, #31
 8003124:	2101      	movs	r1, #1
 8003126:	fa01 f202 	lsl.w	r2, r1, r2
 800312a:	4013      	ands	r3, r2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d19e      	bne.n	800306e <HAL_RCC_OscConfig+0xcfe>
 8003130:	e02b      	b.n	800318a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003132:	1d3b      	adds	r3, r7, #4
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e025      	b.n	800318c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003140:	4b15      	ldr	r3, [pc, #84]	; (8003198 <HAL_RCC_OscConfig+0xe28>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003148:	4b13      	ldr	r3, [pc, #76]	; (8003198 <HAL_RCC_OscConfig+0xe28>)
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003150:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003154:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003158:	1d3b      	adds	r3, r7, #4
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	429a      	cmp	r2, r3
 8003160:	d111      	bne.n	8003186 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003162:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003166:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800316a:	1d3b      	adds	r3, r7, #4
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003170:	429a      	cmp	r2, r3
 8003172:	d108      	bne.n	8003186 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003174:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003178:	f003 020f 	and.w	r2, r3, #15
 800317c:	1d3b      	adds	r3, r7, #4
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003182:	429a      	cmp	r2, r3
 8003184:	d001      	beq.n	800318a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40021000 	.word	0x40021000

0800319c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b09e      	sub	sp, #120	; 0x78
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e162      	b.n	800347a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031b4:	4b90      	ldr	r3, [pc, #576]	; (80033f8 <HAL_RCC_ClockConfig+0x25c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d910      	bls.n	80031e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c2:	4b8d      	ldr	r3, [pc, #564]	; (80033f8 <HAL_RCC_ClockConfig+0x25c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f023 0207 	bic.w	r2, r3, #7
 80031ca:	498b      	ldr	r1, [pc, #556]	; (80033f8 <HAL_RCC_ClockConfig+0x25c>)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d2:	4b89      	ldr	r3, [pc, #548]	; (80033f8 <HAL_RCC_ClockConfig+0x25c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d001      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e14a      	b.n	800347a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d008      	beq.n	8003202 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f0:	4b82      	ldr	r3, [pc, #520]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	497f      	ldr	r1, [pc, #508]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 80dc 	beq.w	80033c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d13c      	bne.n	8003292 <HAL_RCC_ClockConfig+0xf6>
 8003218:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800321c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003220:	fa93 f3a3 	rbit	r3, r3
 8003224:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003228:	fab3 f383 	clz	r3, r3
 800322c:	b2db      	uxtb	r3, r3
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	b2db      	uxtb	r3, r3
 8003232:	f043 0301 	orr.w	r3, r3, #1
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b01      	cmp	r3, #1
 800323a:	d102      	bne.n	8003242 <HAL_RCC_ClockConfig+0xa6>
 800323c:	4b6f      	ldr	r3, [pc, #444]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	e00f      	b.n	8003262 <HAL_RCC_ClockConfig+0xc6>
 8003242:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003246:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003248:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800324a:	fa93 f3a3 	rbit	r3, r3
 800324e:	667b      	str	r3, [r7, #100]	; 0x64
 8003250:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003254:	663b      	str	r3, [r7, #96]	; 0x60
 8003256:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003258:	fa93 f3a3 	rbit	r3, r3
 800325c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800325e:	4b67      	ldr	r3, [pc, #412]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003266:	65ba      	str	r2, [r7, #88]	; 0x58
 8003268:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800326a:	fa92 f2a2 	rbit	r2, r2
 800326e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003270:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003272:	fab2 f282 	clz	r2, r2
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	f042 0220 	orr.w	r2, r2, #32
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	f002 021f 	and.w	r2, r2, #31
 8003282:	2101      	movs	r1, #1
 8003284:	fa01 f202 	lsl.w	r2, r1, r2
 8003288:	4013      	ands	r3, r2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d17b      	bne.n	8003386 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e0f3      	b.n	800347a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d13c      	bne.n	8003314 <HAL_RCC_ClockConfig+0x178>
 800329a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800329e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032a2:	fa93 f3a3 	rbit	r3, r3
 80032a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80032a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032aa:	fab3 f383 	clz	r3, r3
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	095b      	lsrs	r3, r3, #5
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	f043 0301 	orr.w	r3, r3, #1
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d102      	bne.n	80032c4 <HAL_RCC_ClockConfig+0x128>
 80032be:	4b4f      	ldr	r3, [pc, #316]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	e00f      	b.n	80032e4 <HAL_RCC_ClockConfig+0x148>
 80032c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032cc:	fa93 f3a3 	rbit	r3, r3
 80032d0:	647b      	str	r3, [r7, #68]	; 0x44
 80032d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032d6:	643b      	str	r3, [r7, #64]	; 0x40
 80032d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032da:	fa93 f3a3 	rbit	r3, r3
 80032de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032e0:	4b46      	ldr	r3, [pc, #280]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032e8:	63ba      	str	r2, [r7, #56]	; 0x38
 80032ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032ec:	fa92 f2a2 	rbit	r2, r2
 80032f0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80032f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032f4:	fab2 f282 	clz	r2, r2
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	f042 0220 	orr.w	r2, r2, #32
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	f002 021f 	and.w	r2, r2, #31
 8003304:	2101      	movs	r1, #1
 8003306:	fa01 f202 	lsl.w	r2, r1, r2
 800330a:	4013      	ands	r3, r2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d13a      	bne.n	8003386 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e0b2      	b.n	800347a <HAL_RCC_ClockConfig+0x2de>
 8003314:	2302      	movs	r3, #2
 8003316:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331a:	fa93 f3a3 	rbit	r3, r3
 800331e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003322:	fab3 f383 	clz	r3, r3
 8003326:	b2db      	uxtb	r3, r3
 8003328:	095b      	lsrs	r3, r3, #5
 800332a:	b2db      	uxtb	r3, r3
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b01      	cmp	r3, #1
 8003334:	d102      	bne.n	800333c <HAL_RCC_ClockConfig+0x1a0>
 8003336:	4b31      	ldr	r3, [pc, #196]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	e00d      	b.n	8003358 <HAL_RCC_ClockConfig+0x1bc>
 800333c:	2302      	movs	r3, #2
 800333e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003342:	fa93 f3a3 	rbit	r3, r3
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
 8003348:	2302      	movs	r3, #2
 800334a:	623b      	str	r3, [r7, #32]
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	fa93 f3a3 	rbit	r3, r3
 8003352:	61fb      	str	r3, [r7, #28]
 8003354:	4b29      	ldr	r3, [pc, #164]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	2202      	movs	r2, #2
 800335a:	61ba      	str	r2, [r7, #24]
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	fa92 f2a2 	rbit	r2, r2
 8003362:	617a      	str	r2, [r7, #20]
  return result;
 8003364:	697a      	ldr	r2, [r7, #20]
 8003366:	fab2 f282 	clz	r2, r2
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	f042 0220 	orr.w	r2, r2, #32
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	f002 021f 	and.w	r2, r2, #31
 8003376:	2101      	movs	r1, #1
 8003378:	fa01 f202 	lsl.w	r2, r1, r2
 800337c:	4013      	ands	r3, r2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e079      	b.n	800347a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003386:	4b1d      	ldr	r3, [pc, #116]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f023 0203 	bic.w	r2, r3, #3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	491a      	ldr	r1, [pc, #104]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 8003394:	4313      	orrs	r3, r2
 8003396:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003398:	f7fe fd6e 	bl	8001e78 <HAL_GetTick>
 800339c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339e:	e00a      	b.n	80033b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a0:	f7fe fd6a 	bl	8001e78 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e061      	b.n	800347a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b6:	4b11      	ldr	r3, [pc, #68]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 020c 	and.w	r2, r3, #12
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d1eb      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033c8:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <HAL_RCC_ClockConfig+0x25c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d214      	bcs.n	8003400 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d6:	4b08      	ldr	r3, [pc, #32]	; (80033f8 <HAL_RCC_ClockConfig+0x25c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 0207 	bic.w	r2, r3, #7
 80033de:	4906      	ldr	r1, [pc, #24]	; (80033f8 <HAL_RCC_ClockConfig+0x25c>)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e6:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <HAL_RCC_ClockConfig+0x25c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d005      	beq.n	8003400 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e040      	b.n	800347a <HAL_RCC_ClockConfig+0x2de>
 80033f8:	40022000 	.word	0x40022000
 80033fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800340c:	4b1d      	ldr	r3, [pc, #116]	; (8003484 <HAL_RCC_ClockConfig+0x2e8>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	491a      	ldr	r1, [pc, #104]	; (8003484 <HAL_RCC_ClockConfig+0x2e8>)
 800341a:	4313      	orrs	r3, r2
 800341c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d009      	beq.n	800343e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800342a:	4b16      	ldr	r3, [pc, #88]	; (8003484 <HAL_RCC_ClockConfig+0x2e8>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	4912      	ldr	r1, [pc, #72]	; (8003484 <HAL_RCC_ClockConfig+0x2e8>)
 800343a:	4313      	orrs	r3, r2
 800343c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800343e:	f000 f829 	bl	8003494 <HAL_RCC_GetSysClockFreq>
 8003442:	4601      	mov	r1, r0
 8003444:	4b0f      	ldr	r3, [pc, #60]	; (8003484 <HAL_RCC_ClockConfig+0x2e8>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800344c:	22f0      	movs	r2, #240	; 0xf0
 800344e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	fa92 f2a2 	rbit	r2, r2
 8003456:	60fa      	str	r2, [r7, #12]
  return result;
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	fab2 f282 	clz	r2, r2
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	40d3      	lsrs	r3, r2
 8003462:	4a09      	ldr	r2, [pc, #36]	; (8003488 <HAL_RCC_ClockConfig+0x2ec>)
 8003464:	5cd3      	ldrb	r3, [r2, r3]
 8003466:	fa21 f303 	lsr.w	r3, r1, r3
 800346a:	4a08      	ldr	r2, [pc, #32]	; (800348c <HAL_RCC_ClockConfig+0x2f0>)
 800346c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800346e:	4b08      	ldr	r3, [pc, #32]	; (8003490 <HAL_RCC_ClockConfig+0x2f4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f7fe fcbc 	bl	8001df0 <HAL_InitTick>
  
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3778      	adds	r7, #120	; 0x78
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40021000 	.word	0x40021000
 8003488:	08008d7c 	.word	0x08008d7c
 800348c:	2000000c 	.word	0x2000000c
 8003490:	20000010 	.word	0x20000010

08003494 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003494:	b480      	push	{r7}
 8003496:	b08b      	sub	sp, #44	; 0x2c
 8003498:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800349a:	2300      	movs	r3, #0
 800349c:	61fb      	str	r3, [r7, #28]
 800349e:	2300      	movs	r3, #0
 80034a0:	61bb      	str	r3, [r7, #24]
 80034a2:	2300      	movs	r3, #0
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
 80034a6:	2300      	movs	r3, #0
 80034a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80034ae:	4b2a      	ldr	r3, [pc, #168]	; (8003558 <HAL_RCC_GetSysClockFreq+0xc4>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 030c 	and.w	r3, r3, #12
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d002      	beq.n	80034c4 <HAL_RCC_GetSysClockFreq+0x30>
 80034be:	2b08      	cmp	r3, #8
 80034c0:	d003      	beq.n	80034ca <HAL_RCC_GetSysClockFreq+0x36>
 80034c2:	e03f      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034c4:	4b25      	ldr	r3, [pc, #148]	; (800355c <HAL_RCC_GetSysClockFreq+0xc8>)
 80034c6:	623b      	str	r3, [r7, #32]
      break;
 80034c8:	e03f      	b.n	800354a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80034d0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80034d4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	fa92 f2a2 	rbit	r2, r2
 80034dc:	607a      	str	r2, [r7, #4]
  return result;
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	fab2 f282 	clz	r2, r2
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	40d3      	lsrs	r3, r2
 80034e8:	4a1d      	ldr	r2, [pc, #116]	; (8003560 <HAL_RCC_GetSysClockFreq+0xcc>)
 80034ea:	5cd3      	ldrb	r3, [r2, r3]
 80034ec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80034ee:	4b1a      	ldr	r3, [pc, #104]	; (8003558 <HAL_RCC_GetSysClockFreq+0xc4>)
 80034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	220f      	movs	r2, #15
 80034f8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	fa92 f2a2 	rbit	r2, r2
 8003500:	60fa      	str	r2, [r7, #12]
  return result;
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	fab2 f282 	clz	r2, r2
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	40d3      	lsrs	r3, r2
 800350c:	4a15      	ldr	r2, [pc, #84]	; (8003564 <HAL_RCC_GetSysClockFreq+0xd0>)
 800350e:	5cd3      	ldrb	r3, [r2, r3]
 8003510:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800351c:	4a0f      	ldr	r2, [pc, #60]	; (800355c <HAL_RCC_GetSysClockFreq+0xc8>)
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	fbb2 f2f3 	udiv	r2, r2, r3
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	fb02 f303 	mul.w	r3, r2, r3
 800352a:	627b      	str	r3, [r7, #36]	; 0x24
 800352c:	e007      	b.n	800353e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800352e:	4a0b      	ldr	r2, [pc, #44]	; (800355c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	fbb2 f2f3 	udiv	r2, r2, r3
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	fb02 f303 	mul.w	r3, r2, r3
 800353c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	623b      	str	r3, [r7, #32]
      break;
 8003542:	e002      	b.n	800354a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003546:	623b      	str	r3, [r7, #32]
      break;
 8003548:	bf00      	nop
    }
  }
  return sysclockfreq;
 800354a:	6a3b      	ldr	r3, [r7, #32]
}
 800354c:	4618      	mov	r0, r3
 800354e:	372c      	adds	r7, #44	; 0x2c
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	40021000 	.word	0x40021000
 800355c:	007a1200 	.word	0x007a1200
 8003560:	08008d94 	.word	0x08008d94
 8003564:	08008da4 	.word	0x08008da4

08003568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800356c:	4b03      	ldr	r3, [pc, #12]	; (800357c <HAL_RCC_GetHCLKFreq+0x14>)
 800356e:	681b      	ldr	r3, [r3, #0]
}
 8003570:	4618      	mov	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	2000000c 	.word	0x2000000c

08003580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003586:	f7ff ffef 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 800358a:	4601      	mov	r1, r0
 800358c:	4b0b      	ldr	r3, [pc, #44]	; (80035bc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003594:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003598:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	fa92 f2a2 	rbit	r2, r2
 80035a0:	603a      	str	r2, [r7, #0]
  return result;
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	fab2 f282 	clz	r2, r2
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	40d3      	lsrs	r3, r2
 80035ac:	4a04      	ldr	r2, [pc, #16]	; (80035c0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80035ae:	5cd3      	ldrb	r3, [r2, r3]
 80035b0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80035b4:	4618      	mov	r0, r3
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40021000 	.word	0x40021000
 80035c0:	08008d8c 	.word	0x08008d8c

080035c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80035ca:	f7ff ffcd 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 80035ce:	4601      	mov	r1, r0
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80035d8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80035dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	fa92 f2a2 	rbit	r2, r2
 80035e4:	603a      	str	r2, [r7, #0]
  return result;
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	fab2 f282 	clz	r2, r2
 80035ec:	b2d2      	uxtb	r2, r2
 80035ee:	40d3      	lsrs	r3, r2
 80035f0:	4a04      	ldr	r2, [pc, #16]	; (8003604 <HAL_RCC_GetPCLK2Freq+0x40>)
 80035f2:	5cd3      	ldrb	r3, [r2, r3]
 80035f4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80035f8:	4618      	mov	r0, r3
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40021000 	.word	0x40021000
 8003604:	08008d8c 	.word	0x08008d8c

08003608 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b092      	sub	sp, #72	; 0x48
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003610:	2300      	movs	r3, #0
 8003612:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003618:	2300      	movs	r3, #0
 800361a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 80d4 	beq.w	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800362c:	4b4e      	ldr	r3, [pc, #312]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10e      	bne.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003638:	4b4b      	ldr	r3, [pc, #300]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	4a4a      	ldr	r2, [pc, #296]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800363e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003642:	61d3      	str	r3, [r2, #28]
 8003644:	4b48      	ldr	r3, [pc, #288]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003650:	2301      	movs	r3, #1
 8003652:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003656:	4b45      	ldr	r3, [pc, #276]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365e:	2b00      	cmp	r3, #0
 8003660:	d118      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003662:	4b42      	ldr	r3, [pc, #264]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a41      	ldr	r2, [pc, #260]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800366c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800366e:	f7fe fc03 	bl	8001e78 <HAL_GetTick>
 8003672:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003674:	e008      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003676:	f7fe fbff 	bl	8001e78 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b64      	cmp	r3, #100	; 0x64
 8003682:	d901      	bls.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e1d6      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003688:	4b38      	ldr	r3, [pc, #224]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0f0      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003694:	4b34      	ldr	r3, [pc, #208]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800369c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800369e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 8084 	beq.w	80037ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d07c      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036b4:	4b2c      	ldr	r3, [pc, #176]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c6:	fa93 f3a3 	rbit	r3, r3
 80036ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80036cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036ce:	fab3 f383 	clz	r3, r3
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	461a      	mov	r2, r3
 80036d6:	4b26      	ldr	r3, [pc, #152]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	461a      	mov	r2, r3
 80036de:	2301      	movs	r3, #1
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ea:	fa93 f3a3 	rbit	r3, r3
 80036ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80036f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036f2:	fab3 f383 	clz	r3, r3
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	461a      	mov	r2, r3
 80036fa:	4b1d      	ldr	r3, [pc, #116]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	461a      	mov	r2, r3
 8003702:	2300      	movs	r3, #0
 8003704:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003706:	4a18      	ldr	r2, [pc, #96]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800370a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800370c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d04b      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003716:	f7fe fbaf 	bl	8001e78 <HAL_GetTick>
 800371a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371c:	e00a      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800371e:	f7fe fbab 	bl	8001e78 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	f241 3288 	movw	r2, #5000	; 0x1388
 800372c:	4293      	cmp	r3, r2
 800372e:	d901      	bls.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e180      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003734:	2302      	movs	r3, #2
 8003736:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373a:	fa93 f3a3 	rbit	r3, r3
 800373e:	627b      	str	r3, [r7, #36]	; 0x24
 8003740:	2302      	movs	r3, #2
 8003742:	623b      	str	r3, [r7, #32]
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	fa93 f3a3 	rbit	r3, r3
 800374a:	61fb      	str	r3, [r7, #28]
  return result;
 800374c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800374e:	fab3 f383 	clz	r3, r3
 8003752:	b2db      	uxtb	r3, r3
 8003754:	095b      	lsrs	r3, r3, #5
 8003756:	b2db      	uxtb	r3, r3
 8003758:	f043 0302 	orr.w	r3, r3, #2
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d108      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003762:	4b01      	ldr	r3, [pc, #4]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	e00d      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003768:	40021000 	.word	0x40021000
 800376c:	40007000 	.word	0x40007000
 8003770:	10908100 	.word	0x10908100
 8003774:	2302      	movs	r3, #2
 8003776:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	fa93 f3a3 	rbit	r3, r3
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	4ba0      	ldr	r3, [pc, #640]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	2202      	movs	r2, #2
 8003786:	613a      	str	r2, [r7, #16]
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	fa92 f2a2 	rbit	r2, r2
 800378e:	60fa      	str	r2, [r7, #12]
  return result;
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	fab2 f282 	clz	r2, r2
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	f002 021f 	and.w	r2, r2, #31
 80037a2:	2101      	movs	r1, #1
 80037a4:	fa01 f202 	lsl.w	r2, r1, r2
 80037a8:	4013      	ands	r3, r2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0b7      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80037ae:	4b95      	ldr	r3, [pc, #596]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	4992      	ldr	r1, [pc, #584]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d105      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c8:	4b8e      	ldr	r3, [pc, #568]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	4a8d      	ldr	r2, [pc, #564]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037e0:	4b88      	ldr	r3, [pc, #544]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e4:	f023 0203 	bic.w	r2, r3, #3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	4985      	ldr	r1, [pc, #532]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d008      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037fe:	4b81      	ldr	r3, [pc, #516]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	497e      	ldr	r1, [pc, #504]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800380c:	4313      	orrs	r3, r2
 800380e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800381c:	4b79      	ldr	r3, [pc, #484]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800381e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003820:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	4976      	ldr	r1, [pc, #472]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800382a:	4313      	orrs	r3, r2
 800382c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0320 	and.w	r3, r3, #32
 8003836:	2b00      	cmp	r3, #0
 8003838:	d008      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800383a:	4b72      	ldr	r3, [pc, #456]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f023 0210 	bic.w	r2, r3, #16
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	496f      	ldr	r1, [pc, #444]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003848:	4313      	orrs	r3, r2
 800384a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003858:	4b6a      	ldr	r3, [pc, #424]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003864:	4967      	ldr	r1, [pc, #412]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003866:	4313      	orrs	r3, r2
 8003868:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003872:	2b00      	cmp	r3, #0
 8003874:	d008      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003876:	4b63      	ldr	r3, [pc, #396]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	f023 0220 	bic.w	r2, r3, #32
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	4960      	ldr	r1, [pc, #384]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003884:	4313      	orrs	r3, r2
 8003886:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003894:	4b5b      	ldr	r3, [pc, #364]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	4958      	ldr	r1, [pc, #352]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d008      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038b2:	4b54      	ldr	r3, [pc, #336]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	4951      	ldr	r1, [pc, #324]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0310 	and.w	r3, r3, #16
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038d0:	4b4c      	ldr	r3, [pc, #304]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	4949      	ldr	r1, [pc, #292]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d008      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038ee:	4b45      	ldr	r3, [pc, #276]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	4942      	ldr	r1, [pc, #264]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003908:	2b00      	cmp	r3, #0
 800390a:	d008      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800390c:	4b3d      	ldr	r3, [pc, #244]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003918:	493a      	ldr	r1, [pc, #232]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800391a:	4313      	orrs	r3, r2
 800391c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003926:	2b00      	cmp	r3, #0
 8003928:	d008      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800392a:	4b36      	ldr	r3, [pc, #216]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003936:	4933      	ldr	r1, [pc, #204]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003938:	4313      	orrs	r3, r2
 800393a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003948:	4b2e      	ldr	r3, [pc, #184]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003954:	492b      	ldr	r1, [pc, #172]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003956:	4313      	orrs	r3, r2
 8003958:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d008      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003966:	4b27      	ldr	r3, [pc, #156]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	4924      	ldr	r1, [pc, #144]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003974:	4313      	orrs	r3, r2
 8003976:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003984:	4b1f      	ldr	r3, [pc, #124]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003988:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003990:	491c      	ldr	r1, [pc, #112]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003992:	4313      	orrs	r3, r2
 8003994:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d008      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80039a2:	4b18      	ldr	r3, [pc, #96]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ae:	4915      	ldr	r1, [pc, #84]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d008      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80039c0:	4b10      	ldr	r3, [pc, #64]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039cc:	490d      	ldr	r1, [pc, #52]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d008      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80039de:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ea:	4906      	ldr	r1, [pc, #24]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00c      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80039fc:	4b01      	ldr	r3, [pc, #4]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a00:	e002      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003a02:	bf00      	nop
 8003a04:	40021000 	.word	0x40021000
 8003a08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a10:	490b      	ldr	r1, [pc, #44]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d008      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003a22:	4b07      	ldr	r3, [pc, #28]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2e:	4904      	ldr	r1, [pc, #16]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3748      	adds	r7, #72	; 0x48
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40021000 	.word	0x40021000

08003a44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e040      	b.n	8003ad8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d106      	bne.n	8003a6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7fe f80c 	bl	8001a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2224      	movs	r2, #36	; 0x24
 8003a70:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0201 	bic.w	r2, r2, #1
 8003a80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f992 	bl	8003dac <UART_SetConfig>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d101      	bne.n	8003a92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e022      	b.n	8003ad8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fb5c 	bl	8004158 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003abe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 fbe3 	bl	800429c <UART_CheckIdleState>
 8003ad6:	4603      	mov	r3, r0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08a      	sub	sp, #40	; 0x28
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	4613      	mov	r3, r2
 8003aee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003af4:	2b20      	cmp	r3, #32
 8003af6:	f040 8082 	bne.w	8003bfe <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <HAL_UART_Transmit+0x26>
 8003b00:	88fb      	ldrh	r3, [r7, #6]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e07a      	b.n	8003c00 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_UART_Transmit+0x38>
 8003b14:	2302      	movs	r3, #2
 8003b16:	e073      	b.n	8003c00 <HAL_UART_Transmit+0x120>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2221      	movs	r2, #33	; 0x21
 8003b2c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b2e:	f7fe f9a3 	bl	8001e78 <HAL_GetTick>
 8003b32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	88fa      	ldrh	r2, [r7, #6]
 8003b38:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	88fa      	ldrh	r2, [r7, #6]
 8003b40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b4c:	d108      	bne.n	8003b60 <HAL_UART_Transmit+0x80>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d104      	bne.n	8003b60 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	61bb      	str	r3, [r7, #24]
 8003b5e:	e003      	b.n	8003b68 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b64:	2300      	movs	r3, #0
 8003b66:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003b70:	e02d      	b.n	8003bce <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2180      	movs	r1, #128	; 0x80
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 fbd6 	bl	800432e <UART_WaitOnFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e039      	b.n	8003c00 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10b      	bne.n	8003baa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	881a      	ldrh	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b9e:	b292      	uxth	r2, r2
 8003ba0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	3302      	adds	r3, #2
 8003ba6:	61bb      	str	r3, [r7, #24]
 8003ba8:	e008      	b.n	8003bbc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	781a      	ldrb	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	b292      	uxth	r2, r2
 8003bb4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1cb      	bne.n	8003b72 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2200      	movs	r2, #0
 8003be2:	2140      	movs	r1, #64	; 0x40
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 fba2 	bl	800432e <UART_WaitOnFlagUntilTimeout>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e005      	b.n	8003c00 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e000      	b.n	8003c00 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003bfe:	2302      	movs	r3, #2
  }
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3720      	adds	r7, #32
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b08a      	sub	sp, #40	; 0x28
 8003c0c:	af02      	add	r7, sp, #8
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	4613      	mov	r3, r2
 8003c16:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c1c:	2b20      	cmp	r3, #32
 8003c1e:	f040 80bf 	bne.w	8003da0 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d002      	beq.n	8003c2e <HAL_UART_Receive+0x26>
 8003c28:	88fb      	ldrh	r3, [r7, #6]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e0b7      	b.n	8003da2 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_UART_Receive+0x38>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e0b0      	b.n	8003da2 <HAL_UART_Receive+0x19a>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2222      	movs	r2, #34	; 0x22
 8003c54:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c5c:	f7fe f90c 	bl	8001e78 <HAL_GetTick>
 8003c60:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	88fa      	ldrh	r2, [r7, #6]
 8003c66:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	88fa      	ldrh	r2, [r7, #6]
 8003c6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c7a:	d10e      	bne.n	8003c9a <HAL_UART_Receive+0x92>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d105      	bne.n	8003c90 <HAL_UART_Receive+0x88>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003c8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c8e:	e02d      	b.n	8003cec <HAL_UART_Receive+0xe4>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	22ff      	movs	r2, #255	; 0xff
 8003c94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c98:	e028      	b.n	8003cec <HAL_UART_Receive+0xe4>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10d      	bne.n	8003cbe <HAL_UART_Receive+0xb6>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d104      	bne.n	8003cb4 <HAL_UART_Receive+0xac>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	22ff      	movs	r2, #255	; 0xff
 8003cae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cb2:	e01b      	b.n	8003cec <HAL_UART_Receive+0xe4>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	227f      	movs	r2, #127	; 0x7f
 8003cb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cbc:	e016      	b.n	8003cec <HAL_UART_Receive+0xe4>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cc6:	d10d      	bne.n	8003ce4 <HAL_UART_Receive+0xdc>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d104      	bne.n	8003cda <HAL_UART_Receive+0xd2>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	227f      	movs	r2, #127	; 0x7f
 8003cd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cd8:	e008      	b.n	8003cec <HAL_UART_Receive+0xe4>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	223f      	movs	r2, #63	; 0x3f
 8003cde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ce2:	e003      	b.n	8003cec <HAL_UART_Receive+0xe4>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003cf2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cfc:	d108      	bne.n	8003d10 <HAL_UART_Receive+0x108>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d104      	bne.n	8003d10 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	61bb      	str	r3, [r7, #24]
 8003d0e:	e003      	b.n	8003d18 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d14:	2300      	movs	r3, #0
 8003d16:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003d20:	e033      	b.n	8003d8a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	2120      	movs	r1, #32
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 fafe 	bl	800432e <UART_WaitOnFlagUntilTimeout>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e032      	b.n	8003da2 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10c      	bne.n	8003d5c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	8a7b      	ldrh	r3, [r7, #18]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	3302      	adds	r3, #2
 8003d58:	61bb      	str	r3, [r7, #24]
 8003d5a:	e00d      	b.n	8003d78 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	8a7b      	ldrh	r3, [r7, #18]
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	3301      	adds	r3, #1
 8003d76:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1c5      	bne.n	8003d22 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	e000      	b.n	8003da2 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003da0:	2302      	movs	r3, #2
  }
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3720      	adds	r7, #32
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
	...

08003dac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b088      	sub	sp, #32
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003db4:	2300      	movs	r3, #0
 8003db6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	4bab      	ldr	r3, [pc, #684]	; (8004084 <UART_SetConfig+0x2d8>)
 8003dd8:	4013      	ands	r3, r2
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6812      	ldr	r2, [r2, #0]
 8003dde:	6979      	ldr	r1, [r7, #20]
 8003de0:	430b      	orrs	r3, r1
 8003de2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a99      	ldr	r2, [pc, #612]	; (8004088 <UART_SetConfig+0x2dc>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d120      	bne.n	8003e6a <UART_SetConfig+0xbe>
 8003e28:	4b98      	ldr	r3, [pc, #608]	; (800408c <UART_SetConfig+0x2e0>)
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2c:	f003 0303 	and.w	r3, r3, #3
 8003e30:	2b03      	cmp	r3, #3
 8003e32:	d817      	bhi.n	8003e64 <UART_SetConfig+0xb8>
 8003e34:	a201      	add	r2, pc, #4	; (adr r2, 8003e3c <UART_SetConfig+0x90>)
 8003e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3a:	bf00      	nop
 8003e3c:	08003e4d 	.word	0x08003e4d
 8003e40:	08003e59 	.word	0x08003e59
 8003e44:	08003e5f 	.word	0x08003e5f
 8003e48:	08003e53 	.word	0x08003e53
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	77fb      	strb	r3, [r7, #31]
 8003e50:	e0b5      	b.n	8003fbe <UART_SetConfig+0x212>
 8003e52:	2302      	movs	r3, #2
 8003e54:	77fb      	strb	r3, [r7, #31]
 8003e56:	e0b2      	b.n	8003fbe <UART_SetConfig+0x212>
 8003e58:	2304      	movs	r3, #4
 8003e5a:	77fb      	strb	r3, [r7, #31]
 8003e5c:	e0af      	b.n	8003fbe <UART_SetConfig+0x212>
 8003e5e:	2308      	movs	r3, #8
 8003e60:	77fb      	strb	r3, [r7, #31]
 8003e62:	e0ac      	b.n	8003fbe <UART_SetConfig+0x212>
 8003e64:	2310      	movs	r3, #16
 8003e66:	77fb      	strb	r3, [r7, #31]
 8003e68:	e0a9      	b.n	8003fbe <UART_SetConfig+0x212>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a88      	ldr	r2, [pc, #544]	; (8004090 <UART_SetConfig+0x2e4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d124      	bne.n	8003ebe <UART_SetConfig+0x112>
 8003e74:	4b85      	ldr	r3, [pc, #532]	; (800408c <UART_SetConfig+0x2e0>)
 8003e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e7c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e80:	d011      	beq.n	8003ea6 <UART_SetConfig+0xfa>
 8003e82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e86:	d817      	bhi.n	8003eb8 <UART_SetConfig+0x10c>
 8003e88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e8c:	d011      	beq.n	8003eb2 <UART_SetConfig+0x106>
 8003e8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e92:	d811      	bhi.n	8003eb8 <UART_SetConfig+0x10c>
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <UART_SetConfig+0xf4>
 8003e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e9c:	d006      	beq.n	8003eac <UART_SetConfig+0x100>
 8003e9e:	e00b      	b.n	8003eb8 <UART_SetConfig+0x10c>
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	77fb      	strb	r3, [r7, #31]
 8003ea4:	e08b      	b.n	8003fbe <UART_SetConfig+0x212>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	77fb      	strb	r3, [r7, #31]
 8003eaa:	e088      	b.n	8003fbe <UART_SetConfig+0x212>
 8003eac:	2304      	movs	r3, #4
 8003eae:	77fb      	strb	r3, [r7, #31]
 8003eb0:	e085      	b.n	8003fbe <UART_SetConfig+0x212>
 8003eb2:	2308      	movs	r3, #8
 8003eb4:	77fb      	strb	r3, [r7, #31]
 8003eb6:	e082      	b.n	8003fbe <UART_SetConfig+0x212>
 8003eb8:	2310      	movs	r3, #16
 8003eba:	77fb      	strb	r3, [r7, #31]
 8003ebc:	e07f      	b.n	8003fbe <UART_SetConfig+0x212>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a74      	ldr	r2, [pc, #464]	; (8004094 <UART_SetConfig+0x2e8>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d124      	bne.n	8003f12 <UART_SetConfig+0x166>
 8003ec8:	4b70      	ldr	r3, [pc, #448]	; (800408c <UART_SetConfig+0x2e0>)
 8003eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ecc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003ed0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003ed4:	d011      	beq.n	8003efa <UART_SetConfig+0x14e>
 8003ed6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003eda:	d817      	bhi.n	8003f0c <UART_SetConfig+0x160>
 8003edc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ee0:	d011      	beq.n	8003f06 <UART_SetConfig+0x15a>
 8003ee2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ee6:	d811      	bhi.n	8003f0c <UART_SetConfig+0x160>
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <UART_SetConfig+0x148>
 8003eec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ef0:	d006      	beq.n	8003f00 <UART_SetConfig+0x154>
 8003ef2:	e00b      	b.n	8003f0c <UART_SetConfig+0x160>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	77fb      	strb	r3, [r7, #31]
 8003ef8:	e061      	b.n	8003fbe <UART_SetConfig+0x212>
 8003efa:	2302      	movs	r3, #2
 8003efc:	77fb      	strb	r3, [r7, #31]
 8003efe:	e05e      	b.n	8003fbe <UART_SetConfig+0x212>
 8003f00:	2304      	movs	r3, #4
 8003f02:	77fb      	strb	r3, [r7, #31]
 8003f04:	e05b      	b.n	8003fbe <UART_SetConfig+0x212>
 8003f06:	2308      	movs	r3, #8
 8003f08:	77fb      	strb	r3, [r7, #31]
 8003f0a:	e058      	b.n	8003fbe <UART_SetConfig+0x212>
 8003f0c:	2310      	movs	r3, #16
 8003f0e:	77fb      	strb	r3, [r7, #31]
 8003f10:	e055      	b.n	8003fbe <UART_SetConfig+0x212>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a60      	ldr	r2, [pc, #384]	; (8004098 <UART_SetConfig+0x2ec>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d124      	bne.n	8003f66 <UART_SetConfig+0x1ba>
 8003f1c:	4b5b      	ldr	r3, [pc, #364]	; (800408c <UART_SetConfig+0x2e0>)
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f20:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003f24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f28:	d011      	beq.n	8003f4e <UART_SetConfig+0x1a2>
 8003f2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f2e:	d817      	bhi.n	8003f60 <UART_SetConfig+0x1b4>
 8003f30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f34:	d011      	beq.n	8003f5a <UART_SetConfig+0x1ae>
 8003f36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f3a:	d811      	bhi.n	8003f60 <UART_SetConfig+0x1b4>
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <UART_SetConfig+0x19c>
 8003f40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f44:	d006      	beq.n	8003f54 <UART_SetConfig+0x1a8>
 8003f46:	e00b      	b.n	8003f60 <UART_SetConfig+0x1b4>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	77fb      	strb	r3, [r7, #31]
 8003f4c:	e037      	b.n	8003fbe <UART_SetConfig+0x212>
 8003f4e:	2302      	movs	r3, #2
 8003f50:	77fb      	strb	r3, [r7, #31]
 8003f52:	e034      	b.n	8003fbe <UART_SetConfig+0x212>
 8003f54:	2304      	movs	r3, #4
 8003f56:	77fb      	strb	r3, [r7, #31]
 8003f58:	e031      	b.n	8003fbe <UART_SetConfig+0x212>
 8003f5a:	2308      	movs	r3, #8
 8003f5c:	77fb      	strb	r3, [r7, #31]
 8003f5e:	e02e      	b.n	8003fbe <UART_SetConfig+0x212>
 8003f60:	2310      	movs	r3, #16
 8003f62:	77fb      	strb	r3, [r7, #31]
 8003f64:	e02b      	b.n	8003fbe <UART_SetConfig+0x212>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a4c      	ldr	r2, [pc, #304]	; (800409c <UART_SetConfig+0x2f0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d124      	bne.n	8003fba <UART_SetConfig+0x20e>
 8003f70:	4b46      	ldr	r3, [pc, #280]	; (800408c <UART_SetConfig+0x2e0>)
 8003f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f74:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003f78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f7c:	d011      	beq.n	8003fa2 <UART_SetConfig+0x1f6>
 8003f7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f82:	d817      	bhi.n	8003fb4 <UART_SetConfig+0x208>
 8003f84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f88:	d011      	beq.n	8003fae <UART_SetConfig+0x202>
 8003f8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f8e:	d811      	bhi.n	8003fb4 <UART_SetConfig+0x208>
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <UART_SetConfig+0x1f0>
 8003f94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f98:	d006      	beq.n	8003fa8 <UART_SetConfig+0x1fc>
 8003f9a:	e00b      	b.n	8003fb4 <UART_SetConfig+0x208>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	77fb      	strb	r3, [r7, #31]
 8003fa0:	e00d      	b.n	8003fbe <UART_SetConfig+0x212>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	77fb      	strb	r3, [r7, #31]
 8003fa6:	e00a      	b.n	8003fbe <UART_SetConfig+0x212>
 8003fa8:	2304      	movs	r3, #4
 8003faa:	77fb      	strb	r3, [r7, #31]
 8003fac:	e007      	b.n	8003fbe <UART_SetConfig+0x212>
 8003fae:	2308      	movs	r3, #8
 8003fb0:	77fb      	strb	r3, [r7, #31]
 8003fb2:	e004      	b.n	8003fbe <UART_SetConfig+0x212>
 8003fb4:	2310      	movs	r3, #16
 8003fb6:	77fb      	strb	r3, [r7, #31]
 8003fb8:	e001      	b.n	8003fbe <UART_SetConfig+0x212>
 8003fba:	2310      	movs	r3, #16
 8003fbc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fc6:	d16d      	bne.n	80040a4 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8003fc8:	7ffb      	ldrb	r3, [r7, #31]
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d827      	bhi.n	800401e <UART_SetConfig+0x272>
 8003fce:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <UART_SetConfig+0x228>)
 8003fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd4:	08003ff9 	.word	0x08003ff9
 8003fd8:	08004001 	.word	0x08004001
 8003fdc:	08004009 	.word	0x08004009
 8003fe0:	0800401f 	.word	0x0800401f
 8003fe4:	0800400f 	.word	0x0800400f
 8003fe8:	0800401f 	.word	0x0800401f
 8003fec:	0800401f 	.word	0x0800401f
 8003ff0:	0800401f 	.word	0x0800401f
 8003ff4:	08004017 	.word	0x08004017
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ff8:	f7ff fac2 	bl	8003580 <HAL_RCC_GetPCLK1Freq>
 8003ffc:	61b8      	str	r0, [r7, #24]
        break;
 8003ffe:	e013      	b.n	8004028 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004000:	f7ff fae0 	bl	80035c4 <HAL_RCC_GetPCLK2Freq>
 8004004:	61b8      	str	r0, [r7, #24]
        break;
 8004006:	e00f      	b.n	8004028 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004008:	4b25      	ldr	r3, [pc, #148]	; (80040a0 <UART_SetConfig+0x2f4>)
 800400a:	61bb      	str	r3, [r7, #24]
        break;
 800400c:	e00c      	b.n	8004028 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800400e:	f7ff fa41 	bl	8003494 <HAL_RCC_GetSysClockFreq>
 8004012:	61b8      	str	r0, [r7, #24]
        break;
 8004014:	e008      	b.n	8004028 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800401a:	61bb      	str	r3, [r7, #24]
        break;
 800401c:	e004      	b.n	8004028 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	77bb      	strb	r3, [r7, #30]
        break;
 8004026:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 8086 	beq.w	800413c <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	005a      	lsls	r2, r3, #1
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	085b      	lsrs	r3, r3, #1
 800403a:	441a      	add	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	fbb2 f3f3 	udiv	r3, r2, r3
 8004044:	b29b      	uxth	r3, r3
 8004046:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	2b0f      	cmp	r3, #15
 800404c:	d916      	bls.n	800407c <UART_SetConfig+0x2d0>
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004054:	d212      	bcs.n	800407c <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	b29b      	uxth	r3, r3
 800405a:	f023 030f 	bic.w	r3, r3, #15
 800405e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	085b      	lsrs	r3, r3, #1
 8004064:	b29b      	uxth	r3, r3
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	b29a      	uxth	r2, r3
 800406c:	89fb      	ldrh	r3, [r7, #14]
 800406e:	4313      	orrs	r3, r2
 8004070:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	89fa      	ldrh	r2, [r7, #14]
 8004078:	60da      	str	r2, [r3, #12]
 800407a:	e05f      	b.n	800413c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	77bb      	strb	r3, [r7, #30]
 8004080:	e05c      	b.n	800413c <UART_SetConfig+0x390>
 8004082:	bf00      	nop
 8004084:	efff69f3 	.word	0xefff69f3
 8004088:	40013800 	.word	0x40013800
 800408c:	40021000 	.word	0x40021000
 8004090:	40004400 	.word	0x40004400
 8004094:	40004800 	.word	0x40004800
 8004098:	40004c00 	.word	0x40004c00
 800409c:	40005000 	.word	0x40005000
 80040a0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 80040a4:	7ffb      	ldrb	r3, [r7, #31]
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	d827      	bhi.n	80040fa <UART_SetConfig+0x34e>
 80040aa:	a201      	add	r2, pc, #4	; (adr r2, 80040b0 <UART_SetConfig+0x304>)
 80040ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b0:	080040d5 	.word	0x080040d5
 80040b4:	080040dd 	.word	0x080040dd
 80040b8:	080040e5 	.word	0x080040e5
 80040bc:	080040fb 	.word	0x080040fb
 80040c0:	080040eb 	.word	0x080040eb
 80040c4:	080040fb 	.word	0x080040fb
 80040c8:	080040fb 	.word	0x080040fb
 80040cc:	080040fb 	.word	0x080040fb
 80040d0:	080040f3 	.word	0x080040f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040d4:	f7ff fa54 	bl	8003580 <HAL_RCC_GetPCLK1Freq>
 80040d8:	61b8      	str	r0, [r7, #24]
        break;
 80040da:	e013      	b.n	8004104 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040dc:	f7ff fa72 	bl	80035c4 <HAL_RCC_GetPCLK2Freq>
 80040e0:	61b8      	str	r0, [r7, #24]
        break;
 80040e2:	e00f      	b.n	8004104 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040e4:	4b1b      	ldr	r3, [pc, #108]	; (8004154 <UART_SetConfig+0x3a8>)
 80040e6:	61bb      	str	r3, [r7, #24]
        break;
 80040e8:	e00c      	b.n	8004104 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ea:	f7ff f9d3 	bl	8003494 <HAL_RCC_GetSysClockFreq>
 80040ee:	61b8      	str	r0, [r7, #24]
        break;
 80040f0:	e008      	b.n	8004104 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040f6:	61bb      	str	r3, [r7, #24]
        break;
 80040f8:	e004      	b.n	8004104 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80040fa:	2300      	movs	r3, #0
 80040fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	77bb      	strb	r3, [r7, #30]
        break;
 8004102:	bf00      	nop
    }

    if (pclk != 0U)
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d018      	beq.n	800413c <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	085a      	lsrs	r2, r3, #1
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	441a      	add	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	fbb2 f3f3 	udiv	r3, r2, r3
 800411c:	b29b      	uxth	r3, r3
 800411e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	2b0f      	cmp	r3, #15
 8004124:	d908      	bls.n	8004138 <UART_SetConfig+0x38c>
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800412c:	d204      	bcs.n	8004138 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	60da      	str	r2, [r3, #12]
 8004136:	e001      	b.n	800413c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004148:	7fbb      	ldrb	r3, [r7, #30]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3720      	adds	r7, #32
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	007a1200 	.word	0x007a1200

08004158 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	f003 0308 	and.w	r3, r3, #8
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	f003 0320 	and.w	r3, r3, #32
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004234:	2b00      	cmp	r3, #0
 8004236:	d01a      	beq.n	800426e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004256:	d10a      	bne.n	800426e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	605a      	str	r2, [r3, #4]
  }
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af02      	add	r7, sp, #8
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042ac:	f7fd fde4 	bl	8001e78 <HAL_GetTick>
 80042b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0308 	and.w	r3, r3, #8
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d10e      	bne.n	80042de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f82d 	bl	800432e <UART_WaitOnFlagUntilTimeout>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e023      	b.n	8004326 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b04      	cmp	r3, #4
 80042ea:	d10e      	bne.n	800430a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f817 	bl	800432e <UART_WaitOnFlagUntilTimeout>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e00d      	b.n	8004326 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2220      	movs	r2, #32
 800430e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b084      	sub	sp, #16
 8004332:	af00      	add	r7, sp, #0
 8004334:	60f8      	str	r0, [r7, #12]
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	603b      	str	r3, [r7, #0]
 800433a:	4613      	mov	r3, r2
 800433c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800433e:	e05e      	b.n	80043fe <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004346:	d05a      	beq.n	80043fe <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004348:	f7fd fd96 	bl	8001e78 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	429a      	cmp	r2, r3
 8004356:	d302      	bcc.n	800435e <UART_WaitOnFlagUntilTimeout+0x30>
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d11b      	bne.n	8004396 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800436c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0201 	bic.w	r2, r2, #1
 800437c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2220      	movs	r2, #32
 8004382:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2220      	movs	r2, #32
 8004388:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e043      	b.n	800441e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d02c      	beq.n	80043fe <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b2:	d124      	bne.n	80043fe <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043cc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 0201 	bic.w	r2, r2, #1
 80043dc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2220      	movs	r2, #32
 80043e2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2220      	movs	r2, #32
 80043e8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2220      	movs	r2, #32
 80043ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e00f      	b.n	800441e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	69da      	ldr	r2, [r3, #28]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4013      	ands	r3, r2
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	429a      	cmp	r2, r3
 800440c:	bf0c      	ite	eq
 800440e:	2301      	moveq	r3, #1
 8004410:	2300      	movne	r3, #0
 8004412:	b2db      	uxtb	r3, r3
 8004414:	461a      	mov	r2, r3
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	429a      	cmp	r2, r3
 800441a:	d091      	beq.n	8004340 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <__errno>:
 8004428:	4b01      	ldr	r3, [pc, #4]	; (8004430 <__errno+0x8>)
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	20000018 	.word	0x20000018

08004434 <__libc_init_array>:
 8004434:	b570      	push	{r4, r5, r6, lr}
 8004436:	4d0d      	ldr	r5, [pc, #52]	; (800446c <__libc_init_array+0x38>)
 8004438:	4c0d      	ldr	r4, [pc, #52]	; (8004470 <__libc_init_array+0x3c>)
 800443a:	1b64      	subs	r4, r4, r5
 800443c:	10a4      	asrs	r4, r4, #2
 800443e:	2600      	movs	r6, #0
 8004440:	42a6      	cmp	r6, r4
 8004442:	d109      	bne.n	8004458 <__libc_init_array+0x24>
 8004444:	4d0b      	ldr	r5, [pc, #44]	; (8004474 <__libc_init_array+0x40>)
 8004446:	4c0c      	ldr	r4, [pc, #48]	; (8004478 <__libc_init_array+0x44>)
 8004448:	f004 fc46 	bl	8008cd8 <_init>
 800444c:	1b64      	subs	r4, r4, r5
 800444e:	10a4      	asrs	r4, r4, #2
 8004450:	2600      	movs	r6, #0
 8004452:	42a6      	cmp	r6, r4
 8004454:	d105      	bne.n	8004462 <__libc_init_array+0x2e>
 8004456:	bd70      	pop	{r4, r5, r6, pc}
 8004458:	f855 3b04 	ldr.w	r3, [r5], #4
 800445c:	4798      	blx	r3
 800445e:	3601      	adds	r6, #1
 8004460:	e7ee      	b.n	8004440 <__libc_init_array+0xc>
 8004462:	f855 3b04 	ldr.w	r3, [r5], #4
 8004466:	4798      	blx	r3
 8004468:	3601      	adds	r6, #1
 800446a:	e7f2      	b.n	8004452 <__libc_init_array+0x1e>
 800446c:	0800926c 	.word	0x0800926c
 8004470:	0800926c 	.word	0x0800926c
 8004474:	0800926c 	.word	0x0800926c
 8004478:	08009270 	.word	0x08009270

0800447c <memset>:
 800447c:	4402      	add	r2, r0
 800447e:	4603      	mov	r3, r0
 8004480:	4293      	cmp	r3, r2
 8004482:	d100      	bne.n	8004486 <memset+0xa>
 8004484:	4770      	bx	lr
 8004486:	f803 1b01 	strb.w	r1, [r3], #1
 800448a:	e7f9      	b.n	8004480 <memset+0x4>

0800448c <__cvt>:
 800448c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004490:	ec55 4b10 	vmov	r4, r5, d0
 8004494:	2d00      	cmp	r5, #0
 8004496:	460e      	mov	r6, r1
 8004498:	4619      	mov	r1, r3
 800449a:	462b      	mov	r3, r5
 800449c:	bfbb      	ittet	lt
 800449e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80044a2:	461d      	movlt	r5, r3
 80044a4:	2300      	movge	r3, #0
 80044a6:	232d      	movlt	r3, #45	; 0x2d
 80044a8:	700b      	strb	r3, [r1, #0]
 80044aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80044b0:	4691      	mov	r9, r2
 80044b2:	f023 0820 	bic.w	r8, r3, #32
 80044b6:	bfbc      	itt	lt
 80044b8:	4622      	movlt	r2, r4
 80044ba:	4614      	movlt	r4, r2
 80044bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80044c0:	d005      	beq.n	80044ce <__cvt+0x42>
 80044c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80044c6:	d100      	bne.n	80044ca <__cvt+0x3e>
 80044c8:	3601      	adds	r6, #1
 80044ca:	2102      	movs	r1, #2
 80044cc:	e000      	b.n	80044d0 <__cvt+0x44>
 80044ce:	2103      	movs	r1, #3
 80044d0:	ab03      	add	r3, sp, #12
 80044d2:	9301      	str	r3, [sp, #4]
 80044d4:	ab02      	add	r3, sp, #8
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	ec45 4b10 	vmov	d0, r4, r5
 80044dc:	4653      	mov	r3, sl
 80044de:	4632      	mov	r2, r6
 80044e0:	f001 fdb6 	bl	8006050 <_dtoa_r>
 80044e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80044e8:	4607      	mov	r7, r0
 80044ea:	d102      	bne.n	80044f2 <__cvt+0x66>
 80044ec:	f019 0f01 	tst.w	r9, #1
 80044f0:	d022      	beq.n	8004538 <__cvt+0xac>
 80044f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80044f6:	eb07 0906 	add.w	r9, r7, r6
 80044fa:	d110      	bne.n	800451e <__cvt+0x92>
 80044fc:	783b      	ldrb	r3, [r7, #0]
 80044fe:	2b30      	cmp	r3, #48	; 0x30
 8004500:	d10a      	bne.n	8004518 <__cvt+0x8c>
 8004502:	2200      	movs	r2, #0
 8004504:	2300      	movs	r3, #0
 8004506:	4620      	mov	r0, r4
 8004508:	4629      	mov	r1, r5
 800450a:	f7fc faf5 	bl	8000af8 <__aeabi_dcmpeq>
 800450e:	b918      	cbnz	r0, 8004518 <__cvt+0x8c>
 8004510:	f1c6 0601 	rsb	r6, r6, #1
 8004514:	f8ca 6000 	str.w	r6, [sl]
 8004518:	f8da 3000 	ldr.w	r3, [sl]
 800451c:	4499      	add	r9, r3
 800451e:	2200      	movs	r2, #0
 8004520:	2300      	movs	r3, #0
 8004522:	4620      	mov	r0, r4
 8004524:	4629      	mov	r1, r5
 8004526:	f7fc fae7 	bl	8000af8 <__aeabi_dcmpeq>
 800452a:	b108      	cbz	r0, 8004530 <__cvt+0xa4>
 800452c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004530:	2230      	movs	r2, #48	; 0x30
 8004532:	9b03      	ldr	r3, [sp, #12]
 8004534:	454b      	cmp	r3, r9
 8004536:	d307      	bcc.n	8004548 <__cvt+0xbc>
 8004538:	9b03      	ldr	r3, [sp, #12]
 800453a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800453c:	1bdb      	subs	r3, r3, r7
 800453e:	4638      	mov	r0, r7
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	b004      	add	sp, #16
 8004544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004548:	1c59      	adds	r1, r3, #1
 800454a:	9103      	str	r1, [sp, #12]
 800454c:	701a      	strb	r2, [r3, #0]
 800454e:	e7f0      	b.n	8004532 <__cvt+0xa6>

08004550 <__exponent>:
 8004550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004552:	4603      	mov	r3, r0
 8004554:	2900      	cmp	r1, #0
 8004556:	bfb8      	it	lt
 8004558:	4249      	neglt	r1, r1
 800455a:	f803 2b02 	strb.w	r2, [r3], #2
 800455e:	bfb4      	ite	lt
 8004560:	222d      	movlt	r2, #45	; 0x2d
 8004562:	222b      	movge	r2, #43	; 0x2b
 8004564:	2909      	cmp	r1, #9
 8004566:	7042      	strb	r2, [r0, #1]
 8004568:	dd2a      	ble.n	80045c0 <__exponent+0x70>
 800456a:	f10d 0407 	add.w	r4, sp, #7
 800456e:	46a4      	mov	ip, r4
 8004570:	270a      	movs	r7, #10
 8004572:	46a6      	mov	lr, r4
 8004574:	460a      	mov	r2, r1
 8004576:	fb91 f6f7 	sdiv	r6, r1, r7
 800457a:	fb07 1516 	mls	r5, r7, r6, r1
 800457e:	3530      	adds	r5, #48	; 0x30
 8004580:	2a63      	cmp	r2, #99	; 0x63
 8004582:	f104 34ff 	add.w	r4, r4, #4294967295
 8004586:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800458a:	4631      	mov	r1, r6
 800458c:	dcf1      	bgt.n	8004572 <__exponent+0x22>
 800458e:	3130      	adds	r1, #48	; 0x30
 8004590:	f1ae 0502 	sub.w	r5, lr, #2
 8004594:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004598:	1c44      	adds	r4, r0, #1
 800459a:	4629      	mov	r1, r5
 800459c:	4561      	cmp	r1, ip
 800459e:	d30a      	bcc.n	80045b6 <__exponent+0x66>
 80045a0:	f10d 0209 	add.w	r2, sp, #9
 80045a4:	eba2 020e 	sub.w	r2, r2, lr
 80045a8:	4565      	cmp	r5, ip
 80045aa:	bf88      	it	hi
 80045ac:	2200      	movhi	r2, #0
 80045ae:	4413      	add	r3, r2
 80045b0:	1a18      	subs	r0, r3, r0
 80045b2:	b003      	add	sp, #12
 80045b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80045be:	e7ed      	b.n	800459c <__exponent+0x4c>
 80045c0:	2330      	movs	r3, #48	; 0x30
 80045c2:	3130      	adds	r1, #48	; 0x30
 80045c4:	7083      	strb	r3, [r0, #2]
 80045c6:	70c1      	strb	r1, [r0, #3]
 80045c8:	1d03      	adds	r3, r0, #4
 80045ca:	e7f1      	b.n	80045b0 <__exponent+0x60>

080045cc <_printf_float>:
 80045cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045d0:	ed2d 8b02 	vpush	{d8}
 80045d4:	b08d      	sub	sp, #52	; 0x34
 80045d6:	460c      	mov	r4, r1
 80045d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80045dc:	4616      	mov	r6, r2
 80045de:	461f      	mov	r7, r3
 80045e0:	4605      	mov	r5, r0
 80045e2:	f002 fe91 	bl	8007308 <_localeconv_r>
 80045e6:	f8d0 a000 	ldr.w	sl, [r0]
 80045ea:	4650      	mov	r0, sl
 80045ec:	f7fb fe02 	bl	80001f4 <strlen>
 80045f0:	2300      	movs	r3, #0
 80045f2:	930a      	str	r3, [sp, #40]	; 0x28
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	9305      	str	r3, [sp, #20]
 80045f8:	f8d8 3000 	ldr.w	r3, [r8]
 80045fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004600:	3307      	adds	r3, #7
 8004602:	f023 0307 	bic.w	r3, r3, #7
 8004606:	f103 0208 	add.w	r2, r3, #8
 800460a:	f8c8 2000 	str.w	r2, [r8]
 800460e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004612:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004616:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800461a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800461e:	9307      	str	r3, [sp, #28]
 8004620:	f8cd 8018 	str.w	r8, [sp, #24]
 8004624:	ee08 0a10 	vmov	s16, r0
 8004628:	4b9f      	ldr	r3, [pc, #636]	; (80048a8 <_printf_float+0x2dc>)
 800462a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800462e:	f04f 32ff 	mov.w	r2, #4294967295
 8004632:	f7fc fa93 	bl	8000b5c <__aeabi_dcmpun>
 8004636:	bb88      	cbnz	r0, 800469c <_printf_float+0xd0>
 8004638:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800463c:	4b9a      	ldr	r3, [pc, #616]	; (80048a8 <_printf_float+0x2dc>)
 800463e:	f04f 32ff 	mov.w	r2, #4294967295
 8004642:	f7fc fa6d 	bl	8000b20 <__aeabi_dcmple>
 8004646:	bb48      	cbnz	r0, 800469c <_printf_float+0xd0>
 8004648:	2200      	movs	r2, #0
 800464a:	2300      	movs	r3, #0
 800464c:	4640      	mov	r0, r8
 800464e:	4649      	mov	r1, r9
 8004650:	f7fc fa5c 	bl	8000b0c <__aeabi_dcmplt>
 8004654:	b110      	cbz	r0, 800465c <_printf_float+0x90>
 8004656:	232d      	movs	r3, #45	; 0x2d
 8004658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800465c:	4b93      	ldr	r3, [pc, #588]	; (80048ac <_printf_float+0x2e0>)
 800465e:	4894      	ldr	r0, [pc, #592]	; (80048b0 <_printf_float+0x2e4>)
 8004660:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004664:	bf94      	ite	ls
 8004666:	4698      	movls	r8, r3
 8004668:	4680      	movhi	r8, r0
 800466a:	2303      	movs	r3, #3
 800466c:	6123      	str	r3, [r4, #16]
 800466e:	9b05      	ldr	r3, [sp, #20]
 8004670:	f023 0204 	bic.w	r2, r3, #4
 8004674:	6022      	str	r2, [r4, #0]
 8004676:	f04f 0900 	mov.w	r9, #0
 800467a:	9700      	str	r7, [sp, #0]
 800467c:	4633      	mov	r3, r6
 800467e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004680:	4621      	mov	r1, r4
 8004682:	4628      	mov	r0, r5
 8004684:	f000 f9d8 	bl	8004a38 <_printf_common>
 8004688:	3001      	adds	r0, #1
 800468a:	f040 8090 	bne.w	80047ae <_printf_float+0x1e2>
 800468e:	f04f 30ff 	mov.w	r0, #4294967295
 8004692:	b00d      	add	sp, #52	; 0x34
 8004694:	ecbd 8b02 	vpop	{d8}
 8004698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800469c:	4642      	mov	r2, r8
 800469e:	464b      	mov	r3, r9
 80046a0:	4640      	mov	r0, r8
 80046a2:	4649      	mov	r1, r9
 80046a4:	f7fc fa5a 	bl	8000b5c <__aeabi_dcmpun>
 80046a8:	b140      	cbz	r0, 80046bc <_printf_float+0xf0>
 80046aa:	464b      	mov	r3, r9
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	bfbc      	itt	lt
 80046b0:	232d      	movlt	r3, #45	; 0x2d
 80046b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80046b6:	487f      	ldr	r0, [pc, #508]	; (80048b4 <_printf_float+0x2e8>)
 80046b8:	4b7f      	ldr	r3, [pc, #508]	; (80048b8 <_printf_float+0x2ec>)
 80046ba:	e7d1      	b.n	8004660 <_printf_float+0x94>
 80046bc:	6863      	ldr	r3, [r4, #4]
 80046be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80046c2:	9206      	str	r2, [sp, #24]
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	d13f      	bne.n	8004748 <_printf_float+0x17c>
 80046c8:	2306      	movs	r3, #6
 80046ca:	6063      	str	r3, [r4, #4]
 80046cc:	9b05      	ldr	r3, [sp, #20]
 80046ce:	6861      	ldr	r1, [r4, #4]
 80046d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80046d4:	2300      	movs	r3, #0
 80046d6:	9303      	str	r3, [sp, #12]
 80046d8:	ab0a      	add	r3, sp, #40	; 0x28
 80046da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80046de:	ab09      	add	r3, sp, #36	; 0x24
 80046e0:	ec49 8b10 	vmov	d0, r8, r9
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	6022      	str	r2, [r4, #0]
 80046e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80046ec:	4628      	mov	r0, r5
 80046ee:	f7ff fecd 	bl	800448c <__cvt>
 80046f2:	9b06      	ldr	r3, [sp, #24]
 80046f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80046f6:	2b47      	cmp	r3, #71	; 0x47
 80046f8:	4680      	mov	r8, r0
 80046fa:	d108      	bne.n	800470e <_printf_float+0x142>
 80046fc:	1cc8      	adds	r0, r1, #3
 80046fe:	db02      	blt.n	8004706 <_printf_float+0x13a>
 8004700:	6863      	ldr	r3, [r4, #4]
 8004702:	4299      	cmp	r1, r3
 8004704:	dd41      	ble.n	800478a <_printf_float+0x1be>
 8004706:	f1ab 0b02 	sub.w	fp, fp, #2
 800470a:	fa5f fb8b 	uxtb.w	fp, fp
 800470e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004712:	d820      	bhi.n	8004756 <_printf_float+0x18a>
 8004714:	3901      	subs	r1, #1
 8004716:	465a      	mov	r2, fp
 8004718:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800471c:	9109      	str	r1, [sp, #36]	; 0x24
 800471e:	f7ff ff17 	bl	8004550 <__exponent>
 8004722:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004724:	1813      	adds	r3, r2, r0
 8004726:	2a01      	cmp	r2, #1
 8004728:	4681      	mov	r9, r0
 800472a:	6123      	str	r3, [r4, #16]
 800472c:	dc02      	bgt.n	8004734 <_printf_float+0x168>
 800472e:	6822      	ldr	r2, [r4, #0]
 8004730:	07d2      	lsls	r2, r2, #31
 8004732:	d501      	bpl.n	8004738 <_printf_float+0x16c>
 8004734:	3301      	adds	r3, #1
 8004736:	6123      	str	r3, [r4, #16]
 8004738:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800473c:	2b00      	cmp	r3, #0
 800473e:	d09c      	beq.n	800467a <_printf_float+0xae>
 8004740:	232d      	movs	r3, #45	; 0x2d
 8004742:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004746:	e798      	b.n	800467a <_printf_float+0xae>
 8004748:	9a06      	ldr	r2, [sp, #24]
 800474a:	2a47      	cmp	r2, #71	; 0x47
 800474c:	d1be      	bne.n	80046cc <_printf_float+0x100>
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1bc      	bne.n	80046cc <_printf_float+0x100>
 8004752:	2301      	movs	r3, #1
 8004754:	e7b9      	b.n	80046ca <_printf_float+0xfe>
 8004756:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800475a:	d118      	bne.n	800478e <_printf_float+0x1c2>
 800475c:	2900      	cmp	r1, #0
 800475e:	6863      	ldr	r3, [r4, #4]
 8004760:	dd0b      	ble.n	800477a <_printf_float+0x1ae>
 8004762:	6121      	str	r1, [r4, #16]
 8004764:	b913      	cbnz	r3, 800476c <_printf_float+0x1a0>
 8004766:	6822      	ldr	r2, [r4, #0]
 8004768:	07d0      	lsls	r0, r2, #31
 800476a:	d502      	bpl.n	8004772 <_printf_float+0x1a6>
 800476c:	3301      	adds	r3, #1
 800476e:	440b      	add	r3, r1
 8004770:	6123      	str	r3, [r4, #16]
 8004772:	65a1      	str	r1, [r4, #88]	; 0x58
 8004774:	f04f 0900 	mov.w	r9, #0
 8004778:	e7de      	b.n	8004738 <_printf_float+0x16c>
 800477a:	b913      	cbnz	r3, 8004782 <_printf_float+0x1b6>
 800477c:	6822      	ldr	r2, [r4, #0]
 800477e:	07d2      	lsls	r2, r2, #31
 8004780:	d501      	bpl.n	8004786 <_printf_float+0x1ba>
 8004782:	3302      	adds	r3, #2
 8004784:	e7f4      	b.n	8004770 <_printf_float+0x1a4>
 8004786:	2301      	movs	r3, #1
 8004788:	e7f2      	b.n	8004770 <_printf_float+0x1a4>
 800478a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800478e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004790:	4299      	cmp	r1, r3
 8004792:	db05      	blt.n	80047a0 <_printf_float+0x1d4>
 8004794:	6823      	ldr	r3, [r4, #0]
 8004796:	6121      	str	r1, [r4, #16]
 8004798:	07d8      	lsls	r0, r3, #31
 800479a:	d5ea      	bpl.n	8004772 <_printf_float+0x1a6>
 800479c:	1c4b      	adds	r3, r1, #1
 800479e:	e7e7      	b.n	8004770 <_printf_float+0x1a4>
 80047a0:	2900      	cmp	r1, #0
 80047a2:	bfd4      	ite	le
 80047a4:	f1c1 0202 	rsble	r2, r1, #2
 80047a8:	2201      	movgt	r2, #1
 80047aa:	4413      	add	r3, r2
 80047ac:	e7e0      	b.n	8004770 <_printf_float+0x1a4>
 80047ae:	6823      	ldr	r3, [r4, #0]
 80047b0:	055a      	lsls	r2, r3, #21
 80047b2:	d407      	bmi.n	80047c4 <_printf_float+0x1f8>
 80047b4:	6923      	ldr	r3, [r4, #16]
 80047b6:	4642      	mov	r2, r8
 80047b8:	4631      	mov	r1, r6
 80047ba:	4628      	mov	r0, r5
 80047bc:	47b8      	blx	r7
 80047be:	3001      	adds	r0, #1
 80047c0:	d12c      	bne.n	800481c <_printf_float+0x250>
 80047c2:	e764      	b.n	800468e <_printf_float+0xc2>
 80047c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80047c8:	f240 80e0 	bls.w	800498c <_printf_float+0x3c0>
 80047cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047d0:	2200      	movs	r2, #0
 80047d2:	2300      	movs	r3, #0
 80047d4:	f7fc f990 	bl	8000af8 <__aeabi_dcmpeq>
 80047d8:	2800      	cmp	r0, #0
 80047da:	d034      	beq.n	8004846 <_printf_float+0x27a>
 80047dc:	4a37      	ldr	r2, [pc, #220]	; (80048bc <_printf_float+0x2f0>)
 80047de:	2301      	movs	r3, #1
 80047e0:	4631      	mov	r1, r6
 80047e2:	4628      	mov	r0, r5
 80047e4:	47b8      	blx	r7
 80047e6:	3001      	adds	r0, #1
 80047e8:	f43f af51 	beq.w	800468e <_printf_float+0xc2>
 80047ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047f0:	429a      	cmp	r2, r3
 80047f2:	db02      	blt.n	80047fa <_printf_float+0x22e>
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	07d8      	lsls	r0, r3, #31
 80047f8:	d510      	bpl.n	800481c <_printf_float+0x250>
 80047fa:	ee18 3a10 	vmov	r3, s16
 80047fe:	4652      	mov	r2, sl
 8004800:	4631      	mov	r1, r6
 8004802:	4628      	mov	r0, r5
 8004804:	47b8      	blx	r7
 8004806:	3001      	adds	r0, #1
 8004808:	f43f af41 	beq.w	800468e <_printf_float+0xc2>
 800480c:	f04f 0800 	mov.w	r8, #0
 8004810:	f104 091a 	add.w	r9, r4, #26
 8004814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004816:	3b01      	subs	r3, #1
 8004818:	4543      	cmp	r3, r8
 800481a:	dc09      	bgt.n	8004830 <_printf_float+0x264>
 800481c:	6823      	ldr	r3, [r4, #0]
 800481e:	079b      	lsls	r3, r3, #30
 8004820:	f100 8105 	bmi.w	8004a2e <_printf_float+0x462>
 8004824:	68e0      	ldr	r0, [r4, #12]
 8004826:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004828:	4298      	cmp	r0, r3
 800482a:	bfb8      	it	lt
 800482c:	4618      	movlt	r0, r3
 800482e:	e730      	b.n	8004692 <_printf_float+0xc6>
 8004830:	2301      	movs	r3, #1
 8004832:	464a      	mov	r2, r9
 8004834:	4631      	mov	r1, r6
 8004836:	4628      	mov	r0, r5
 8004838:	47b8      	blx	r7
 800483a:	3001      	adds	r0, #1
 800483c:	f43f af27 	beq.w	800468e <_printf_float+0xc2>
 8004840:	f108 0801 	add.w	r8, r8, #1
 8004844:	e7e6      	b.n	8004814 <_printf_float+0x248>
 8004846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004848:	2b00      	cmp	r3, #0
 800484a:	dc39      	bgt.n	80048c0 <_printf_float+0x2f4>
 800484c:	4a1b      	ldr	r2, [pc, #108]	; (80048bc <_printf_float+0x2f0>)
 800484e:	2301      	movs	r3, #1
 8004850:	4631      	mov	r1, r6
 8004852:	4628      	mov	r0, r5
 8004854:	47b8      	blx	r7
 8004856:	3001      	adds	r0, #1
 8004858:	f43f af19 	beq.w	800468e <_printf_float+0xc2>
 800485c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004860:	4313      	orrs	r3, r2
 8004862:	d102      	bne.n	800486a <_printf_float+0x29e>
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	07d9      	lsls	r1, r3, #31
 8004868:	d5d8      	bpl.n	800481c <_printf_float+0x250>
 800486a:	ee18 3a10 	vmov	r3, s16
 800486e:	4652      	mov	r2, sl
 8004870:	4631      	mov	r1, r6
 8004872:	4628      	mov	r0, r5
 8004874:	47b8      	blx	r7
 8004876:	3001      	adds	r0, #1
 8004878:	f43f af09 	beq.w	800468e <_printf_float+0xc2>
 800487c:	f04f 0900 	mov.w	r9, #0
 8004880:	f104 0a1a 	add.w	sl, r4, #26
 8004884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004886:	425b      	negs	r3, r3
 8004888:	454b      	cmp	r3, r9
 800488a:	dc01      	bgt.n	8004890 <_printf_float+0x2c4>
 800488c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800488e:	e792      	b.n	80047b6 <_printf_float+0x1ea>
 8004890:	2301      	movs	r3, #1
 8004892:	4652      	mov	r2, sl
 8004894:	4631      	mov	r1, r6
 8004896:	4628      	mov	r0, r5
 8004898:	47b8      	blx	r7
 800489a:	3001      	adds	r0, #1
 800489c:	f43f aef7 	beq.w	800468e <_printf_float+0xc2>
 80048a0:	f109 0901 	add.w	r9, r9, #1
 80048a4:	e7ee      	b.n	8004884 <_printf_float+0x2b8>
 80048a6:	bf00      	nop
 80048a8:	7fefffff 	.word	0x7fefffff
 80048ac:	08008db8 	.word	0x08008db8
 80048b0:	08008dbc 	.word	0x08008dbc
 80048b4:	08008dc4 	.word	0x08008dc4
 80048b8:	08008dc0 	.word	0x08008dc0
 80048bc:	08008dc8 	.word	0x08008dc8
 80048c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048c4:	429a      	cmp	r2, r3
 80048c6:	bfa8      	it	ge
 80048c8:	461a      	movge	r2, r3
 80048ca:	2a00      	cmp	r2, #0
 80048cc:	4691      	mov	r9, r2
 80048ce:	dc37      	bgt.n	8004940 <_printf_float+0x374>
 80048d0:	f04f 0b00 	mov.w	fp, #0
 80048d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80048d8:	f104 021a 	add.w	r2, r4, #26
 80048dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048de:	9305      	str	r3, [sp, #20]
 80048e0:	eba3 0309 	sub.w	r3, r3, r9
 80048e4:	455b      	cmp	r3, fp
 80048e6:	dc33      	bgt.n	8004950 <_printf_float+0x384>
 80048e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048ec:	429a      	cmp	r2, r3
 80048ee:	db3b      	blt.n	8004968 <_printf_float+0x39c>
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	07da      	lsls	r2, r3, #31
 80048f4:	d438      	bmi.n	8004968 <_printf_float+0x39c>
 80048f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048f8:	9b05      	ldr	r3, [sp, #20]
 80048fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	eba2 0901 	sub.w	r9, r2, r1
 8004902:	4599      	cmp	r9, r3
 8004904:	bfa8      	it	ge
 8004906:	4699      	movge	r9, r3
 8004908:	f1b9 0f00 	cmp.w	r9, #0
 800490c:	dc35      	bgt.n	800497a <_printf_float+0x3ae>
 800490e:	f04f 0800 	mov.w	r8, #0
 8004912:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004916:	f104 0a1a 	add.w	sl, r4, #26
 800491a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800491e:	1a9b      	subs	r3, r3, r2
 8004920:	eba3 0309 	sub.w	r3, r3, r9
 8004924:	4543      	cmp	r3, r8
 8004926:	f77f af79 	ble.w	800481c <_printf_float+0x250>
 800492a:	2301      	movs	r3, #1
 800492c:	4652      	mov	r2, sl
 800492e:	4631      	mov	r1, r6
 8004930:	4628      	mov	r0, r5
 8004932:	47b8      	blx	r7
 8004934:	3001      	adds	r0, #1
 8004936:	f43f aeaa 	beq.w	800468e <_printf_float+0xc2>
 800493a:	f108 0801 	add.w	r8, r8, #1
 800493e:	e7ec      	b.n	800491a <_printf_float+0x34e>
 8004940:	4613      	mov	r3, r2
 8004942:	4631      	mov	r1, r6
 8004944:	4642      	mov	r2, r8
 8004946:	4628      	mov	r0, r5
 8004948:	47b8      	blx	r7
 800494a:	3001      	adds	r0, #1
 800494c:	d1c0      	bne.n	80048d0 <_printf_float+0x304>
 800494e:	e69e      	b.n	800468e <_printf_float+0xc2>
 8004950:	2301      	movs	r3, #1
 8004952:	4631      	mov	r1, r6
 8004954:	4628      	mov	r0, r5
 8004956:	9205      	str	r2, [sp, #20]
 8004958:	47b8      	blx	r7
 800495a:	3001      	adds	r0, #1
 800495c:	f43f ae97 	beq.w	800468e <_printf_float+0xc2>
 8004960:	9a05      	ldr	r2, [sp, #20]
 8004962:	f10b 0b01 	add.w	fp, fp, #1
 8004966:	e7b9      	b.n	80048dc <_printf_float+0x310>
 8004968:	ee18 3a10 	vmov	r3, s16
 800496c:	4652      	mov	r2, sl
 800496e:	4631      	mov	r1, r6
 8004970:	4628      	mov	r0, r5
 8004972:	47b8      	blx	r7
 8004974:	3001      	adds	r0, #1
 8004976:	d1be      	bne.n	80048f6 <_printf_float+0x32a>
 8004978:	e689      	b.n	800468e <_printf_float+0xc2>
 800497a:	9a05      	ldr	r2, [sp, #20]
 800497c:	464b      	mov	r3, r9
 800497e:	4442      	add	r2, r8
 8004980:	4631      	mov	r1, r6
 8004982:	4628      	mov	r0, r5
 8004984:	47b8      	blx	r7
 8004986:	3001      	adds	r0, #1
 8004988:	d1c1      	bne.n	800490e <_printf_float+0x342>
 800498a:	e680      	b.n	800468e <_printf_float+0xc2>
 800498c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800498e:	2a01      	cmp	r2, #1
 8004990:	dc01      	bgt.n	8004996 <_printf_float+0x3ca>
 8004992:	07db      	lsls	r3, r3, #31
 8004994:	d538      	bpl.n	8004a08 <_printf_float+0x43c>
 8004996:	2301      	movs	r3, #1
 8004998:	4642      	mov	r2, r8
 800499a:	4631      	mov	r1, r6
 800499c:	4628      	mov	r0, r5
 800499e:	47b8      	blx	r7
 80049a0:	3001      	adds	r0, #1
 80049a2:	f43f ae74 	beq.w	800468e <_printf_float+0xc2>
 80049a6:	ee18 3a10 	vmov	r3, s16
 80049aa:	4652      	mov	r2, sl
 80049ac:	4631      	mov	r1, r6
 80049ae:	4628      	mov	r0, r5
 80049b0:	47b8      	blx	r7
 80049b2:	3001      	adds	r0, #1
 80049b4:	f43f ae6b 	beq.w	800468e <_printf_float+0xc2>
 80049b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049bc:	2200      	movs	r2, #0
 80049be:	2300      	movs	r3, #0
 80049c0:	f7fc f89a 	bl	8000af8 <__aeabi_dcmpeq>
 80049c4:	b9d8      	cbnz	r0, 80049fe <_printf_float+0x432>
 80049c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049c8:	f108 0201 	add.w	r2, r8, #1
 80049cc:	3b01      	subs	r3, #1
 80049ce:	4631      	mov	r1, r6
 80049d0:	4628      	mov	r0, r5
 80049d2:	47b8      	blx	r7
 80049d4:	3001      	adds	r0, #1
 80049d6:	d10e      	bne.n	80049f6 <_printf_float+0x42a>
 80049d8:	e659      	b.n	800468e <_printf_float+0xc2>
 80049da:	2301      	movs	r3, #1
 80049dc:	4652      	mov	r2, sl
 80049de:	4631      	mov	r1, r6
 80049e0:	4628      	mov	r0, r5
 80049e2:	47b8      	blx	r7
 80049e4:	3001      	adds	r0, #1
 80049e6:	f43f ae52 	beq.w	800468e <_printf_float+0xc2>
 80049ea:	f108 0801 	add.w	r8, r8, #1
 80049ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049f0:	3b01      	subs	r3, #1
 80049f2:	4543      	cmp	r3, r8
 80049f4:	dcf1      	bgt.n	80049da <_printf_float+0x40e>
 80049f6:	464b      	mov	r3, r9
 80049f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80049fc:	e6dc      	b.n	80047b8 <_printf_float+0x1ec>
 80049fe:	f04f 0800 	mov.w	r8, #0
 8004a02:	f104 0a1a 	add.w	sl, r4, #26
 8004a06:	e7f2      	b.n	80049ee <_printf_float+0x422>
 8004a08:	2301      	movs	r3, #1
 8004a0a:	4642      	mov	r2, r8
 8004a0c:	e7df      	b.n	80049ce <_printf_float+0x402>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	464a      	mov	r2, r9
 8004a12:	4631      	mov	r1, r6
 8004a14:	4628      	mov	r0, r5
 8004a16:	47b8      	blx	r7
 8004a18:	3001      	adds	r0, #1
 8004a1a:	f43f ae38 	beq.w	800468e <_printf_float+0xc2>
 8004a1e:	f108 0801 	add.w	r8, r8, #1
 8004a22:	68e3      	ldr	r3, [r4, #12]
 8004a24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a26:	1a5b      	subs	r3, r3, r1
 8004a28:	4543      	cmp	r3, r8
 8004a2a:	dcf0      	bgt.n	8004a0e <_printf_float+0x442>
 8004a2c:	e6fa      	b.n	8004824 <_printf_float+0x258>
 8004a2e:	f04f 0800 	mov.w	r8, #0
 8004a32:	f104 0919 	add.w	r9, r4, #25
 8004a36:	e7f4      	b.n	8004a22 <_printf_float+0x456>

08004a38 <_printf_common>:
 8004a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a3c:	4616      	mov	r6, r2
 8004a3e:	4699      	mov	r9, r3
 8004a40:	688a      	ldr	r2, [r1, #8]
 8004a42:	690b      	ldr	r3, [r1, #16]
 8004a44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	bfb8      	it	lt
 8004a4c:	4613      	movlt	r3, r2
 8004a4e:	6033      	str	r3, [r6, #0]
 8004a50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a54:	4607      	mov	r7, r0
 8004a56:	460c      	mov	r4, r1
 8004a58:	b10a      	cbz	r2, 8004a5e <_printf_common+0x26>
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	6033      	str	r3, [r6, #0]
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	0699      	lsls	r1, r3, #26
 8004a62:	bf42      	ittt	mi
 8004a64:	6833      	ldrmi	r3, [r6, #0]
 8004a66:	3302      	addmi	r3, #2
 8004a68:	6033      	strmi	r3, [r6, #0]
 8004a6a:	6825      	ldr	r5, [r4, #0]
 8004a6c:	f015 0506 	ands.w	r5, r5, #6
 8004a70:	d106      	bne.n	8004a80 <_printf_common+0x48>
 8004a72:	f104 0a19 	add.w	sl, r4, #25
 8004a76:	68e3      	ldr	r3, [r4, #12]
 8004a78:	6832      	ldr	r2, [r6, #0]
 8004a7a:	1a9b      	subs	r3, r3, r2
 8004a7c:	42ab      	cmp	r3, r5
 8004a7e:	dc26      	bgt.n	8004ace <_printf_common+0x96>
 8004a80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a84:	1e13      	subs	r3, r2, #0
 8004a86:	6822      	ldr	r2, [r4, #0]
 8004a88:	bf18      	it	ne
 8004a8a:	2301      	movne	r3, #1
 8004a8c:	0692      	lsls	r2, r2, #26
 8004a8e:	d42b      	bmi.n	8004ae8 <_printf_common+0xb0>
 8004a90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a94:	4649      	mov	r1, r9
 8004a96:	4638      	mov	r0, r7
 8004a98:	47c0      	blx	r8
 8004a9a:	3001      	adds	r0, #1
 8004a9c:	d01e      	beq.n	8004adc <_printf_common+0xa4>
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	68e5      	ldr	r5, [r4, #12]
 8004aa2:	6832      	ldr	r2, [r6, #0]
 8004aa4:	f003 0306 	and.w	r3, r3, #6
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	bf08      	it	eq
 8004aac:	1aad      	subeq	r5, r5, r2
 8004aae:	68a3      	ldr	r3, [r4, #8]
 8004ab0:	6922      	ldr	r2, [r4, #16]
 8004ab2:	bf0c      	ite	eq
 8004ab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ab8:	2500      	movne	r5, #0
 8004aba:	4293      	cmp	r3, r2
 8004abc:	bfc4      	itt	gt
 8004abe:	1a9b      	subgt	r3, r3, r2
 8004ac0:	18ed      	addgt	r5, r5, r3
 8004ac2:	2600      	movs	r6, #0
 8004ac4:	341a      	adds	r4, #26
 8004ac6:	42b5      	cmp	r5, r6
 8004ac8:	d11a      	bne.n	8004b00 <_printf_common+0xc8>
 8004aca:	2000      	movs	r0, #0
 8004acc:	e008      	b.n	8004ae0 <_printf_common+0xa8>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	4652      	mov	r2, sl
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	4638      	mov	r0, r7
 8004ad6:	47c0      	blx	r8
 8004ad8:	3001      	adds	r0, #1
 8004ada:	d103      	bne.n	8004ae4 <_printf_common+0xac>
 8004adc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ae4:	3501      	adds	r5, #1
 8004ae6:	e7c6      	b.n	8004a76 <_printf_common+0x3e>
 8004ae8:	18e1      	adds	r1, r4, r3
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	2030      	movs	r0, #48	; 0x30
 8004aee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004af2:	4422      	add	r2, r4
 8004af4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004af8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004afc:	3302      	adds	r3, #2
 8004afe:	e7c7      	b.n	8004a90 <_printf_common+0x58>
 8004b00:	2301      	movs	r3, #1
 8004b02:	4622      	mov	r2, r4
 8004b04:	4649      	mov	r1, r9
 8004b06:	4638      	mov	r0, r7
 8004b08:	47c0      	blx	r8
 8004b0a:	3001      	adds	r0, #1
 8004b0c:	d0e6      	beq.n	8004adc <_printf_common+0xa4>
 8004b0e:	3601      	adds	r6, #1
 8004b10:	e7d9      	b.n	8004ac6 <_printf_common+0x8e>
	...

08004b14 <_printf_i>:
 8004b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b18:	460c      	mov	r4, r1
 8004b1a:	4691      	mov	r9, r2
 8004b1c:	7e27      	ldrb	r7, [r4, #24]
 8004b1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b20:	2f78      	cmp	r7, #120	; 0x78
 8004b22:	4680      	mov	r8, r0
 8004b24:	469a      	mov	sl, r3
 8004b26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b2a:	d807      	bhi.n	8004b3c <_printf_i+0x28>
 8004b2c:	2f62      	cmp	r7, #98	; 0x62
 8004b2e:	d80a      	bhi.n	8004b46 <_printf_i+0x32>
 8004b30:	2f00      	cmp	r7, #0
 8004b32:	f000 80d8 	beq.w	8004ce6 <_printf_i+0x1d2>
 8004b36:	2f58      	cmp	r7, #88	; 0x58
 8004b38:	f000 80a3 	beq.w	8004c82 <_printf_i+0x16e>
 8004b3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b44:	e03a      	b.n	8004bbc <_printf_i+0xa8>
 8004b46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b4a:	2b15      	cmp	r3, #21
 8004b4c:	d8f6      	bhi.n	8004b3c <_printf_i+0x28>
 8004b4e:	a001      	add	r0, pc, #4	; (adr r0, 8004b54 <_printf_i+0x40>)
 8004b50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004b54:	08004bad 	.word	0x08004bad
 8004b58:	08004bc1 	.word	0x08004bc1
 8004b5c:	08004b3d 	.word	0x08004b3d
 8004b60:	08004b3d 	.word	0x08004b3d
 8004b64:	08004b3d 	.word	0x08004b3d
 8004b68:	08004b3d 	.word	0x08004b3d
 8004b6c:	08004bc1 	.word	0x08004bc1
 8004b70:	08004b3d 	.word	0x08004b3d
 8004b74:	08004b3d 	.word	0x08004b3d
 8004b78:	08004b3d 	.word	0x08004b3d
 8004b7c:	08004b3d 	.word	0x08004b3d
 8004b80:	08004ccd 	.word	0x08004ccd
 8004b84:	08004bf1 	.word	0x08004bf1
 8004b88:	08004caf 	.word	0x08004caf
 8004b8c:	08004b3d 	.word	0x08004b3d
 8004b90:	08004b3d 	.word	0x08004b3d
 8004b94:	08004cef 	.word	0x08004cef
 8004b98:	08004b3d 	.word	0x08004b3d
 8004b9c:	08004bf1 	.word	0x08004bf1
 8004ba0:	08004b3d 	.word	0x08004b3d
 8004ba4:	08004b3d 	.word	0x08004b3d
 8004ba8:	08004cb7 	.word	0x08004cb7
 8004bac:	680b      	ldr	r3, [r1, #0]
 8004bae:	1d1a      	adds	r2, r3, #4
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	600a      	str	r2, [r1, #0]
 8004bb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e0a3      	b.n	8004d08 <_printf_i+0x1f4>
 8004bc0:	6825      	ldr	r5, [r4, #0]
 8004bc2:	6808      	ldr	r0, [r1, #0]
 8004bc4:	062e      	lsls	r6, r5, #24
 8004bc6:	f100 0304 	add.w	r3, r0, #4
 8004bca:	d50a      	bpl.n	8004be2 <_printf_i+0xce>
 8004bcc:	6805      	ldr	r5, [r0, #0]
 8004bce:	600b      	str	r3, [r1, #0]
 8004bd0:	2d00      	cmp	r5, #0
 8004bd2:	da03      	bge.n	8004bdc <_printf_i+0xc8>
 8004bd4:	232d      	movs	r3, #45	; 0x2d
 8004bd6:	426d      	negs	r5, r5
 8004bd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bdc:	485e      	ldr	r0, [pc, #376]	; (8004d58 <_printf_i+0x244>)
 8004bde:	230a      	movs	r3, #10
 8004be0:	e019      	b.n	8004c16 <_printf_i+0x102>
 8004be2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004be6:	6805      	ldr	r5, [r0, #0]
 8004be8:	600b      	str	r3, [r1, #0]
 8004bea:	bf18      	it	ne
 8004bec:	b22d      	sxthne	r5, r5
 8004bee:	e7ef      	b.n	8004bd0 <_printf_i+0xbc>
 8004bf0:	680b      	ldr	r3, [r1, #0]
 8004bf2:	6825      	ldr	r5, [r4, #0]
 8004bf4:	1d18      	adds	r0, r3, #4
 8004bf6:	6008      	str	r0, [r1, #0]
 8004bf8:	0628      	lsls	r0, r5, #24
 8004bfa:	d501      	bpl.n	8004c00 <_printf_i+0xec>
 8004bfc:	681d      	ldr	r5, [r3, #0]
 8004bfe:	e002      	b.n	8004c06 <_printf_i+0xf2>
 8004c00:	0669      	lsls	r1, r5, #25
 8004c02:	d5fb      	bpl.n	8004bfc <_printf_i+0xe8>
 8004c04:	881d      	ldrh	r5, [r3, #0]
 8004c06:	4854      	ldr	r0, [pc, #336]	; (8004d58 <_printf_i+0x244>)
 8004c08:	2f6f      	cmp	r7, #111	; 0x6f
 8004c0a:	bf0c      	ite	eq
 8004c0c:	2308      	moveq	r3, #8
 8004c0e:	230a      	movne	r3, #10
 8004c10:	2100      	movs	r1, #0
 8004c12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c16:	6866      	ldr	r6, [r4, #4]
 8004c18:	60a6      	str	r6, [r4, #8]
 8004c1a:	2e00      	cmp	r6, #0
 8004c1c:	bfa2      	ittt	ge
 8004c1e:	6821      	ldrge	r1, [r4, #0]
 8004c20:	f021 0104 	bicge.w	r1, r1, #4
 8004c24:	6021      	strge	r1, [r4, #0]
 8004c26:	b90d      	cbnz	r5, 8004c2c <_printf_i+0x118>
 8004c28:	2e00      	cmp	r6, #0
 8004c2a:	d04d      	beq.n	8004cc8 <_printf_i+0x1b4>
 8004c2c:	4616      	mov	r6, r2
 8004c2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c32:	fb03 5711 	mls	r7, r3, r1, r5
 8004c36:	5dc7      	ldrb	r7, [r0, r7]
 8004c38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c3c:	462f      	mov	r7, r5
 8004c3e:	42bb      	cmp	r3, r7
 8004c40:	460d      	mov	r5, r1
 8004c42:	d9f4      	bls.n	8004c2e <_printf_i+0x11a>
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d10b      	bne.n	8004c60 <_printf_i+0x14c>
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	07df      	lsls	r7, r3, #31
 8004c4c:	d508      	bpl.n	8004c60 <_printf_i+0x14c>
 8004c4e:	6923      	ldr	r3, [r4, #16]
 8004c50:	6861      	ldr	r1, [r4, #4]
 8004c52:	4299      	cmp	r1, r3
 8004c54:	bfde      	ittt	le
 8004c56:	2330      	movle	r3, #48	; 0x30
 8004c58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c60:	1b92      	subs	r2, r2, r6
 8004c62:	6122      	str	r2, [r4, #16]
 8004c64:	f8cd a000 	str.w	sl, [sp]
 8004c68:	464b      	mov	r3, r9
 8004c6a:	aa03      	add	r2, sp, #12
 8004c6c:	4621      	mov	r1, r4
 8004c6e:	4640      	mov	r0, r8
 8004c70:	f7ff fee2 	bl	8004a38 <_printf_common>
 8004c74:	3001      	adds	r0, #1
 8004c76:	d14c      	bne.n	8004d12 <_printf_i+0x1fe>
 8004c78:	f04f 30ff 	mov.w	r0, #4294967295
 8004c7c:	b004      	add	sp, #16
 8004c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c82:	4835      	ldr	r0, [pc, #212]	; (8004d58 <_printf_i+0x244>)
 8004c84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c88:	6823      	ldr	r3, [r4, #0]
 8004c8a:	680e      	ldr	r6, [r1, #0]
 8004c8c:	061f      	lsls	r7, r3, #24
 8004c8e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004c92:	600e      	str	r6, [r1, #0]
 8004c94:	d514      	bpl.n	8004cc0 <_printf_i+0x1ac>
 8004c96:	07d9      	lsls	r1, r3, #31
 8004c98:	bf44      	itt	mi
 8004c9a:	f043 0320 	orrmi.w	r3, r3, #32
 8004c9e:	6023      	strmi	r3, [r4, #0]
 8004ca0:	b91d      	cbnz	r5, 8004caa <_printf_i+0x196>
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	f023 0320 	bic.w	r3, r3, #32
 8004ca8:	6023      	str	r3, [r4, #0]
 8004caa:	2310      	movs	r3, #16
 8004cac:	e7b0      	b.n	8004c10 <_printf_i+0xfc>
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	f043 0320 	orr.w	r3, r3, #32
 8004cb4:	6023      	str	r3, [r4, #0]
 8004cb6:	2378      	movs	r3, #120	; 0x78
 8004cb8:	4828      	ldr	r0, [pc, #160]	; (8004d5c <_printf_i+0x248>)
 8004cba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cbe:	e7e3      	b.n	8004c88 <_printf_i+0x174>
 8004cc0:	065e      	lsls	r6, r3, #25
 8004cc2:	bf48      	it	mi
 8004cc4:	b2ad      	uxthmi	r5, r5
 8004cc6:	e7e6      	b.n	8004c96 <_printf_i+0x182>
 8004cc8:	4616      	mov	r6, r2
 8004cca:	e7bb      	b.n	8004c44 <_printf_i+0x130>
 8004ccc:	680b      	ldr	r3, [r1, #0]
 8004cce:	6826      	ldr	r6, [r4, #0]
 8004cd0:	6960      	ldr	r0, [r4, #20]
 8004cd2:	1d1d      	adds	r5, r3, #4
 8004cd4:	600d      	str	r5, [r1, #0]
 8004cd6:	0635      	lsls	r5, r6, #24
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	d501      	bpl.n	8004ce0 <_printf_i+0x1cc>
 8004cdc:	6018      	str	r0, [r3, #0]
 8004cde:	e002      	b.n	8004ce6 <_printf_i+0x1d2>
 8004ce0:	0671      	lsls	r1, r6, #25
 8004ce2:	d5fb      	bpl.n	8004cdc <_printf_i+0x1c8>
 8004ce4:	8018      	strh	r0, [r3, #0]
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	6123      	str	r3, [r4, #16]
 8004cea:	4616      	mov	r6, r2
 8004cec:	e7ba      	b.n	8004c64 <_printf_i+0x150>
 8004cee:	680b      	ldr	r3, [r1, #0]
 8004cf0:	1d1a      	adds	r2, r3, #4
 8004cf2:	600a      	str	r2, [r1, #0]
 8004cf4:	681e      	ldr	r6, [r3, #0]
 8004cf6:	6862      	ldr	r2, [r4, #4]
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	f7fb fa88 	bl	8000210 <memchr>
 8004d00:	b108      	cbz	r0, 8004d06 <_printf_i+0x1f2>
 8004d02:	1b80      	subs	r0, r0, r6
 8004d04:	6060      	str	r0, [r4, #4]
 8004d06:	6863      	ldr	r3, [r4, #4]
 8004d08:	6123      	str	r3, [r4, #16]
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d10:	e7a8      	b.n	8004c64 <_printf_i+0x150>
 8004d12:	6923      	ldr	r3, [r4, #16]
 8004d14:	4632      	mov	r2, r6
 8004d16:	4649      	mov	r1, r9
 8004d18:	4640      	mov	r0, r8
 8004d1a:	47d0      	blx	sl
 8004d1c:	3001      	adds	r0, #1
 8004d1e:	d0ab      	beq.n	8004c78 <_printf_i+0x164>
 8004d20:	6823      	ldr	r3, [r4, #0]
 8004d22:	079b      	lsls	r3, r3, #30
 8004d24:	d413      	bmi.n	8004d4e <_printf_i+0x23a>
 8004d26:	68e0      	ldr	r0, [r4, #12]
 8004d28:	9b03      	ldr	r3, [sp, #12]
 8004d2a:	4298      	cmp	r0, r3
 8004d2c:	bfb8      	it	lt
 8004d2e:	4618      	movlt	r0, r3
 8004d30:	e7a4      	b.n	8004c7c <_printf_i+0x168>
 8004d32:	2301      	movs	r3, #1
 8004d34:	4632      	mov	r2, r6
 8004d36:	4649      	mov	r1, r9
 8004d38:	4640      	mov	r0, r8
 8004d3a:	47d0      	blx	sl
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	d09b      	beq.n	8004c78 <_printf_i+0x164>
 8004d40:	3501      	adds	r5, #1
 8004d42:	68e3      	ldr	r3, [r4, #12]
 8004d44:	9903      	ldr	r1, [sp, #12]
 8004d46:	1a5b      	subs	r3, r3, r1
 8004d48:	42ab      	cmp	r3, r5
 8004d4a:	dcf2      	bgt.n	8004d32 <_printf_i+0x21e>
 8004d4c:	e7eb      	b.n	8004d26 <_printf_i+0x212>
 8004d4e:	2500      	movs	r5, #0
 8004d50:	f104 0619 	add.w	r6, r4, #25
 8004d54:	e7f5      	b.n	8004d42 <_printf_i+0x22e>
 8004d56:	bf00      	nop
 8004d58:	08008dca 	.word	0x08008dca
 8004d5c:	08008ddb 	.word	0x08008ddb

08004d60 <_scanf_float>:
 8004d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d64:	b087      	sub	sp, #28
 8004d66:	4617      	mov	r7, r2
 8004d68:	9303      	str	r3, [sp, #12]
 8004d6a:	688b      	ldr	r3, [r1, #8]
 8004d6c:	1e5a      	subs	r2, r3, #1
 8004d6e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004d72:	bf83      	ittte	hi
 8004d74:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004d78:	195b      	addhi	r3, r3, r5
 8004d7a:	9302      	strhi	r3, [sp, #8]
 8004d7c:	2300      	movls	r3, #0
 8004d7e:	bf86      	itte	hi
 8004d80:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004d84:	608b      	strhi	r3, [r1, #8]
 8004d86:	9302      	strls	r3, [sp, #8]
 8004d88:	680b      	ldr	r3, [r1, #0]
 8004d8a:	468b      	mov	fp, r1
 8004d8c:	2500      	movs	r5, #0
 8004d8e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004d92:	f84b 3b1c 	str.w	r3, [fp], #28
 8004d96:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004d9a:	4680      	mov	r8, r0
 8004d9c:	460c      	mov	r4, r1
 8004d9e:	465e      	mov	r6, fp
 8004da0:	46aa      	mov	sl, r5
 8004da2:	46a9      	mov	r9, r5
 8004da4:	9501      	str	r5, [sp, #4]
 8004da6:	68a2      	ldr	r2, [r4, #8]
 8004da8:	b152      	cbz	r2, 8004dc0 <_scanf_float+0x60>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	2b4e      	cmp	r3, #78	; 0x4e
 8004db0:	d864      	bhi.n	8004e7c <_scanf_float+0x11c>
 8004db2:	2b40      	cmp	r3, #64	; 0x40
 8004db4:	d83c      	bhi.n	8004e30 <_scanf_float+0xd0>
 8004db6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004dba:	b2c8      	uxtb	r0, r1
 8004dbc:	280e      	cmp	r0, #14
 8004dbe:	d93a      	bls.n	8004e36 <_scanf_float+0xd6>
 8004dc0:	f1b9 0f00 	cmp.w	r9, #0
 8004dc4:	d003      	beq.n	8004dce <_scanf_float+0x6e>
 8004dc6:	6823      	ldr	r3, [r4, #0]
 8004dc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dcc:	6023      	str	r3, [r4, #0]
 8004dce:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dd2:	f1ba 0f01 	cmp.w	sl, #1
 8004dd6:	f200 8113 	bhi.w	8005000 <_scanf_float+0x2a0>
 8004dda:	455e      	cmp	r6, fp
 8004ddc:	f200 8105 	bhi.w	8004fea <_scanf_float+0x28a>
 8004de0:	2501      	movs	r5, #1
 8004de2:	4628      	mov	r0, r5
 8004de4:	b007      	add	sp, #28
 8004de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004dee:	2a0d      	cmp	r2, #13
 8004df0:	d8e6      	bhi.n	8004dc0 <_scanf_float+0x60>
 8004df2:	a101      	add	r1, pc, #4	; (adr r1, 8004df8 <_scanf_float+0x98>)
 8004df4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004df8:	08004f37 	.word	0x08004f37
 8004dfc:	08004dc1 	.word	0x08004dc1
 8004e00:	08004dc1 	.word	0x08004dc1
 8004e04:	08004dc1 	.word	0x08004dc1
 8004e08:	08004f97 	.word	0x08004f97
 8004e0c:	08004f6f 	.word	0x08004f6f
 8004e10:	08004dc1 	.word	0x08004dc1
 8004e14:	08004dc1 	.word	0x08004dc1
 8004e18:	08004f45 	.word	0x08004f45
 8004e1c:	08004dc1 	.word	0x08004dc1
 8004e20:	08004dc1 	.word	0x08004dc1
 8004e24:	08004dc1 	.word	0x08004dc1
 8004e28:	08004dc1 	.word	0x08004dc1
 8004e2c:	08004efd 	.word	0x08004efd
 8004e30:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004e34:	e7db      	b.n	8004dee <_scanf_float+0x8e>
 8004e36:	290e      	cmp	r1, #14
 8004e38:	d8c2      	bhi.n	8004dc0 <_scanf_float+0x60>
 8004e3a:	a001      	add	r0, pc, #4	; (adr r0, 8004e40 <_scanf_float+0xe0>)
 8004e3c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004e40:	08004eef 	.word	0x08004eef
 8004e44:	08004dc1 	.word	0x08004dc1
 8004e48:	08004eef 	.word	0x08004eef
 8004e4c:	08004f83 	.word	0x08004f83
 8004e50:	08004dc1 	.word	0x08004dc1
 8004e54:	08004e9d 	.word	0x08004e9d
 8004e58:	08004ed9 	.word	0x08004ed9
 8004e5c:	08004ed9 	.word	0x08004ed9
 8004e60:	08004ed9 	.word	0x08004ed9
 8004e64:	08004ed9 	.word	0x08004ed9
 8004e68:	08004ed9 	.word	0x08004ed9
 8004e6c:	08004ed9 	.word	0x08004ed9
 8004e70:	08004ed9 	.word	0x08004ed9
 8004e74:	08004ed9 	.word	0x08004ed9
 8004e78:	08004ed9 	.word	0x08004ed9
 8004e7c:	2b6e      	cmp	r3, #110	; 0x6e
 8004e7e:	d809      	bhi.n	8004e94 <_scanf_float+0x134>
 8004e80:	2b60      	cmp	r3, #96	; 0x60
 8004e82:	d8b2      	bhi.n	8004dea <_scanf_float+0x8a>
 8004e84:	2b54      	cmp	r3, #84	; 0x54
 8004e86:	d077      	beq.n	8004f78 <_scanf_float+0x218>
 8004e88:	2b59      	cmp	r3, #89	; 0x59
 8004e8a:	d199      	bne.n	8004dc0 <_scanf_float+0x60>
 8004e8c:	2d07      	cmp	r5, #7
 8004e8e:	d197      	bne.n	8004dc0 <_scanf_float+0x60>
 8004e90:	2508      	movs	r5, #8
 8004e92:	e029      	b.n	8004ee8 <_scanf_float+0x188>
 8004e94:	2b74      	cmp	r3, #116	; 0x74
 8004e96:	d06f      	beq.n	8004f78 <_scanf_float+0x218>
 8004e98:	2b79      	cmp	r3, #121	; 0x79
 8004e9a:	e7f6      	b.n	8004e8a <_scanf_float+0x12a>
 8004e9c:	6821      	ldr	r1, [r4, #0]
 8004e9e:	05c8      	lsls	r0, r1, #23
 8004ea0:	d51a      	bpl.n	8004ed8 <_scanf_float+0x178>
 8004ea2:	9b02      	ldr	r3, [sp, #8]
 8004ea4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004ea8:	6021      	str	r1, [r4, #0]
 8004eaa:	f109 0901 	add.w	r9, r9, #1
 8004eae:	b11b      	cbz	r3, 8004eb8 <_scanf_float+0x158>
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	3201      	adds	r2, #1
 8004eb4:	9302      	str	r3, [sp, #8]
 8004eb6:	60a2      	str	r2, [r4, #8]
 8004eb8:	68a3      	ldr	r3, [r4, #8]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	60a3      	str	r3, [r4, #8]
 8004ebe:	6923      	ldr	r3, [r4, #16]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	6123      	str	r3, [r4, #16]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	607b      	str	r3, [r7, #4]
 8004ecc:	f340 8084 	ble.w	8004fd8 <_scanf_float+0x278>
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	603b      	str	r3, [r7, #0]
 8004ed6:	e766      	b.n	8004da6 <_scanf_float+0x46>
 8004ed8:	eb1a 0f05 	cmn.w	sl, r5
 8004edc:	f47f af70 	bne.w	8004dc0 <_scanf_float+0x60>
 8004ee0:	6822      	ldr	r2, [r4, #0]
 8004ee2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004ee6:	6022      	str	r2, [r4, #0]
 8004ee8:	f806 3b01 	strb.w	r3, [r6], #1
 8004eec:	e7e4      	b.n	8004eb8 <_scanf_float+0x158>
 8004eee:	6822      	ldr	r2, [r4, #0]
 8004ef0:	0610      	lsls	r0, r2, #24
 8004ef2:	f57f af65 	bpl.w	8004dc0 <_scanf_float+0x60>
 8004ef6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004efa:	e7f4      	b.n	8004ee6 <_scanf_float+0x186>
 8004efc:	f1ba 0f00 	cmp.w	sl, #0
 8004f00:	d10e      	bne.n	8004f20 <_scanf_float+0x1c0>
 8004f02:	f1b9 0f00 	cmp.w	r9, #0
 8004f06:	d10e      	bne.n	8004f26 <_scanf_float+0x1c6>
 8004f08:	6822      	ldr	r2, [r4, #0]
 8004f0a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004f0e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004f12:	d108      	bne.n	8004f26 <_scanf_float+0x1c6>
 8004f14:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004f18:	6022      	str	r2, [r4, #0]
 8004f1a:	f04f 0a01 	mov.w	sl, #1
 8004f1e:	e7e3      	b.n	8004ee8 <_scanf_float+0x188>
 8004f20:	f1ba 0f02 	cmp.w	sl, #2
 8004f24:	d055      	beq.n	8004fd2 <_scanf_float+0x272>
 8004f26:	2d01      	cmp	r5, #1
 8004f28:	d002      	beq.n	8004f30 <_scanf_float+0x1d0>
 8004f2a:	2d04      	cmp	r5, #4
 8004f2c:	f47f af48 	bne.w	8004dc0 <_scanf_float+0x60>
 8004f30:	3501      	adds	r5, #1
 8004f32:	b2ed      	uxtb	r5, r5
 8004f34:	e7d8      	b.n	8004ee8 <_scanf_float+0x188>
 8004f36:	f1ba 0f01 	cmp.w	sl, #1
 8004f3a:	f47f af41 	bne.w	8004dc0 <_scanf_float+0x60>
 8004f3e:	f04f 0a02 	mov.w	sl, #2
 8004f42:	e7d1      	b.n	8004ee8 <_scanf_float+0x188>
 8004f44:	b97d      	cbnz	r5, 8004f66 <_scanf_float+0x206>
 8004f46:	f1b9 0f00 	cmp.w	r9, #0
 8004f4a:	f47f af3c 	bne.w	8004dc6 <_scanf_float+0x66>
 8004f4e:	6822      	ldr	r2, [r4, #0]
 8004f50:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004f54:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004f58:	f47f af39 	bne.w	8004dce <_scanf_float+0x6e>
 8004f5c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004f60:	6022      	str	r2, [r4, #0]
 8004f62:	2501      	movs	r5, #1
 8004f64:	e7c0      	b.n	8004ee8 <_scanf_float+0x188>
 8004f66:	2d03      	cmp	r5, #3
 8004f68:	d0e2      	beq.n	8004f30 <_scanf_float+0x1d0>
 8004f6a:	2d05      	cmp	r5, #5
 8004f6c:	e7de      	b.n	8004f2c <_scanf_float+0x1cc>
 8004f6e:	2d02      	cmp	r5, #2
 8004f70:	f47f af26 	bne.w	8004dc0 <_scanf_float+0x60>
 8004f74:	2503      	movs	r5, #3
 8004f76:	e7b7      	b.n	8004ee8 <_scanf_float+0x188>
 8004f78:	2d06      	cmp	r5, #6
 8004f7a:	f47f af21 	bne.w	8004dc0 <_scanf_float+0x60>
 8004f7e:	2507      	movs	r5, #7
 8004f80:	e7b2      	b.n	8004ee8 <_scanf_float+0x188>
 8004f82:	6822      	ldr	r2, [r4, #0]
 8004f84:	0591      	lsls	r1, r2, #22
 8004f86:	f57f af1b 	bpl.w	8004dc0 <_scanf_float+0x60>
 8004f8a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004f8e:	6022      	str	r2, [r4, #0]
 8004f90:	f8cd 9004 	str.w	r9, [sp, #4]
 8004f94:	e7a8      	b.n	8004ee8 <_scanf_float+0x188>
 8004f96:	6822      	ldr	r2, [r4, #0]
 8004f98:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004f9c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004fa0:	d006      	beq.n	8004fb0 <_scanf_float+0x250>
 8004fa2:	0550      	lsls	r0, r2, #21
 8004fa4:	f57f af0c 	bpl.w	8004dc0 <_scanf_float+0x60>
 8004fa8:	f1b9 0f00 	cmp.w	r9, #0
 8004fac:	f43f af0f 	beq.w	8004dce <_scanf_float+0x6e>
 8004fb0:	0591      	lsls	r1, r2, #22
 8004fb2:	bf58      	it	pl
 8004fb4:	9901      	ldrpl	r1, [sp, #4]
 8004fb6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004fba:	bf58      	it	pl
 8004fbc:	eba9 0101 	subpl.w	r1, r9, r1
 8004fc0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004fc4:	bf58      	it	pl
 8004fc6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004fca:	6022      	str	r2, [r4, #0]
 8004fcc:	f04f 0900 	mov.w	r9, #0
 8004fd0:	e78a      	b.n	8004ee8 <_scanf_float+0x188>
 8004fd2:	f04f 0a03 	mov.w	sl, #3
 8004fd6:	e787      	b.n	8004ee8 <_scanf_float+0x188>
 8004fd8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004fdc:	4639      	mov	r1, r7
 8004fde:	4640      	mov	r0, r8
 8004fe0:	4798      	blx	r3
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	f43f aedf 	beq.w	8004da6 <_scanf_float+0x46>
 8004fe8:	e6ea      	b.n	8004dc0 <_scanf_float+0x60>
 8004fea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004fee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004ff2:	463a      	mov	r2, r7
 8004ff4:	4640      	mov	r0, r8
 8004ff6:	4798      	blx	r3
 8004ff8:	6923      	ldr	r3, [r4, #16]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	6123      	str	r3, [r4, #16]
 8004ffe:	e6ec      	b.n	8004dda <_scanf_float+0x7a>
 8005000:	1e6b      	subs	r3, r5, #1
 8005002:	2b06      	cmp	r3, #6
 8005004:	d825      	bhi.n	8005052 <_scanf_float+0x2f2>
 8005006:	2d02      	cmp	r5, #2
 8005008:	d836      	bhi.n	8005078 <_scanf_float+0x318>
 800500a:	455e      	cmp	r6, fp
 800500c:	f67f aee8 	bls.w	8004de0 <_scanf_float+0x80>
 8005010:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005014:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005018:	463a      	mov	r2, r7
 800501a:	4640      	mov	r0, r8
 800501c:	4798      	blx	r3
 800501e:	6923      	ldr	r3, [r4, #16]
 8005020:	3b01      	subs	r3, #1
 8005022:	6123      	str	r3, [r4, #16]
 8005024:	e7f1      	b.n	800500a <_scanf_float+0x2aa>
 8005026:	9802      	ldr	r0, [sp, #8]
 8005028:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800502c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005030:	9002      	str	r0, [sp, #8]
 8005032:	463a      	mov	r2, r7
 8005034:	4640      	mov	r0, r8
 8005036:	4798      	blx	r3
 8005038:	6923      	ldr	r3, [r4, #16]
 800503a:	3b01      	subs	r3, #1
 800503c:	6123      	str	r3, [r4, #16]
 800503e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005042:	fa5f fa8a 	uxtb.w	sl, sl
 8005046:	f1ba 0f02 	cmp.w	sl, #2
 800504a:	d1ec      	bne.n	8005026 <_scanf_float+0x2c6>
 800504c:	3d03      	subs	r5, #3
 800504e:	b2ed      	uxtb	r5, r5
 8005050:	1b76      	subs	r6, r6, r5
 8005052:	6823      	ldr	r3, [r4, #0]
 8005054:	05da      	lsls	r2, r3, #23
 8005056:	d52f      	bpl.n	80050b8 <_scanf_float+0x358>
 8005058:	055b      	lsls	r3, r3, #21
 800505a:	d510      	bpl.n	800507e <_scanf_float+0x31e>
 800505c:	455e      	cmp	r6, fp
 800505e:	f67f aebf 	bls.w	8004de0 <_scanf_float+0x80>
 8005062:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005066:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800506a:	463a      	mov	r2, r7
 800506c:	4640      	mov	r0, r8
 800506e:	4798      	blx	r3
 8005070:	6923      	ldr	r3, [r4, #16]
 8005072:	3b01      	subs	r3, #1
 8005074:	6123      	str	r3, [r4, #16]
 8005076:	e7f1      	b.n	800505c <_scanf_float+0x2fc>
 8005078:	46aa      	mov	sl, r5
 800507a:	9602      	str	r6, [sp, #8]
 800507c:	e7df      	b.n	800503e <_scanf_float+0x2de>
 800507e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005082:	6923      	ldr	r3, [r4, #16]
 8005084:	2965      	cmp	r1, #101	; 0x65
 8005086:	f103 33ff 	add.w	r3, r3, #4294967295
 800508a:	f106 35ff 	add.w	r5, r6, #4294967295
 800508e:	6123      	str	r3, [r4, #16]
 8005090:	d00c      	beq.n	80050ac <_scanf_float+0x34c>
 8005092:	2945      	cmp	r1, #69	; 0x45
 8005094:	d00a      	beq.n	80050ac <_scanf_float+0x34c>
 8005096:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800509a:	463a      	mov	r2, r7
 800509c:	4640      	mov	r0, r8
 800509e:	4798      	blx	r3
 80050a0:	6923      	ldr	r3, [r4, #16]
 80050a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80050a6:	3b01      	subs	r3, #1
 80050a8:	1eb5      	subs	r5, r6, #2
 80050aa:	6123      	str	r3, [r4, #16]
 80050ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050b0:	463a      	mov	r2, r7
 80050b2:	4640      	mov	r0, r8
 80050b4:	4798      	blx	r3
 80050b6:	462e      	mov	r6, r5
 80050b8:	6825      	ldr	r5, [r4, #0]
 80050ba:	f015 0510 	ands.w	r5, r5, #16
 80050be:	d158      	bne.n	8005172 <_scanf_float+0x412>
 80050c0:	7035      	strb	r5, [r6, #0]
 80050c2:	6823      	ldr	r3, [r4, #0]
 80050c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050cc:	d11c      	bne.n	8005108 <_scanf_float+0x3a8>
 80050ce:	9b01      	ldr	r3, [sp, #4]
 80050d0:	454b      	cmp	r3, r9
 80050d2:	eba3 0209 	sub.w	r2, r3, r9
 80050d6:	d124      	bne.n	8005122 <_scanf_float+0x3c2>
 80050d8:	2200      	movs	r2, #0
 80050da:	4659      	mov	r1, fp
 80050dc:	4640      	mov	r0, r8
 80050de:	f000 fe9d 	bl	8005e1c <_strtod_r>
 80050e2:	9b03      	ldr	r3, [sp, #12]
 80050e4:	6821      	ldr	r1, [r4, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f011 0f02 	tst.w	r1, #2
 80050ec:	ec57 6b10 	vmov	r6, r7, d0
 80050f0:	f103 0204 	add.w	r2, r3, #4
 80050f4:	d020      	beq.n	8005138 <_scanf_float+0x3d8>
 80050f6:	9903      	ldr	r1, [sp, #12]
 80050f8:	600a      	str	r2, [r1, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	e9c3 6700 	strd	r6, r7, [r3]
 8005100:	68e3      	ldr	r3, [r4, #12]
 8005102:	3301      	adds	r3, #1
 8005104:	60e3      	str	r3, [r4, #12]
 8005106:	e66c      	b.n	8004de2 <_scanf_float+0x82>
 8005108:	9b04      	ldr	r3, [sp, #16]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d0e4      	beq.n	80050d8 <_scanf_float+0x378>
 800510e:	9905      	ldr	r1, [sp, #20]
 8005110:	230a      	movs	r3, #10
 8005112:	462a      	mov	r2, r5
 8005114:	3101      	adds	r1, #1
 8005116:	4640      	mov	r0, r8
 8005118:	f000 ff0a 	bl	8005f30 <_strtol_r>
 800511c:	9b04      	ldr	r3, [sp, #16]
 800511e:	9e05      	ldr	r6, [sp, #20]
 8005120:	1ac2      	subs	r2, r0, r3
 8005122:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005126:	429e      	cmp	r6, r3
 8005128:	bf28      	it	cs
 800512a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800512e:	4912      	ldr	r1, [pc, #72]	; (8005178 <_scanf_float+0x418>)
 8005130:	4630      	mov	r0, r6
 8005132:	f000 f82b 	bl	800518c <siprintf>
 8005136:	e7cf      	b.n	80050d8 <_scanf_float+0x378>
 8005138:	f011 0f04 	tst.w	r1, #4
 800513c:	9903      	ldr	r1, [sp, #12]
 800513e:	600a      	str	r2, [r1, #0]
 8005140:	d1db      	bne.n	80050fa <_scanf_float+0x39a>
 8005142:	f8d3 8000 	ldr.w	r8, [r3]
 8005146:	ee10 2a10 	vmov	r2, s0
 800514a:	ee10 0a10 	vmov	r0, s0
 800514e:	463b      	mov	r3, r7
 8005150:	4639      	mov	r1, r7
 8005152:	f7fb fd03 	bl	8000b5c <__aeabi_dcmpun>
 8005156:	b128      	cbz	r0, 8005164 <_scanf_float+0x404>
 8005158:	4808      	ldr	r0, [pc, #32]	; (800517c <_scanf_float+0x41c>)
 800515a:	f000 f811 	bl	8005180 <nanf>
 800515e:	ed88 0a00 	vstr	s0, [r8]
 8005162:	e7cd      	b.n	8005100 <_scanf_float+0x3a0>
 8005164:	4630      	mov	r0, r6
 8005166:	4639      	mov	r1, r7
 8005168:	f7fb fd56 	bl	8000c18 <__aeabi_d2f>
 800516c:	f8c8 0000 	str.w	r0, [r8]
 8005170:	e7c6      	b.n	8005100 <_scanf_float+0x3a0>
 8005172:	2500      	movs	r5, #0
 8005174:	e635      	b.n	8004de2 <_scanf_float+0x82>
 8005176:	bf00      	nop
 8005178:	08008dec 	.word	0x08008dec
 800517c:	08009208 	.word	0x08009208

08005180 <nanf>:
 8005180:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005188 <nanf+0x8>
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	7fc00000 	.word	0x7fc00000

0800518c <siprintf>:
 800518c:	b40e      	push	{r1, r2, r3}
 800518e:	b500      	push	{lr}
 8005190:	b09c      	sub	sp, #112	; 0x70
 8005192:	ab1d      	add	r3, sp, #116	; 0x74
 8005194:	9002      	str	r0, [sp, #8]
 8005196:	9006      	str	r0, [sp, #24]
 8005198:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800519c:	4809      	ldr	r0, [pc, #36]	; (80051c4 <siprintf+0x38>)
 800519e:	9107      	str	r1, [sp, #28]
 80051a0:	9104      	str	r1, [sp, #16]
 80051a2:	4909      	ldr	r1, [pc, #36]	; (80051c8 <siprintf+0x3c>)
 80051a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80051a8:	9105      	str	r1, [sp, #20]
 80051aa:	6800      	ldr	r0, [r0, #0]
 80051ac:	9301      	str	r3, [sp, #4]
 80051ae:	a902      	add	r1, sp, #8
 80051b0:	f002 fea6 	bl	8007f00 <_svfiprintf_r>
 80051b4:	9b02      	ldr	r3, [sp, #8]
 80051b6:	2200      	movs	r2, #0
 80051b8:	701a      	strb	r2, [r3, #0]
 80051ba:	b01c      	add	sp, #112	; 0x70
 80051bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80051c0:	b003      	add	sp, #12
 80051c2:	4770      	bx	lr
 80051c4:	20000018 	.word	0x20000018
 80051c8:	ffff0208 	.word	0xffff0208

080051cc <sulp>:
 80051cc:	b570      	push	{r4, r5, r6, lr}
 80051ce:	4604      	mov	r4, r0
 80051d0:	460d      	mov	r5, r1
 80051d2:	ec45 4b10 	vmov	d0, r4, r5
 80051d6:	4616      	mov	r6, r2
 80051d8:	f002 fc2e 	bl	8007a38 <__ulp>
 80051dc:	ec51 0b10 	vmov	r0, r1, d0
 80051e0:	b17e      	cbz	r6, 8005202 <sulp+0x36>
 80051e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80051e6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	dd09      	ble.n	8005202 <sulp+0x36>
 80051ee:	051b      	lsls	r3, r3, #20
 80051f0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80051f4:	2400      	movs	r4, #0
 80051f6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80051fa:	4622      	mov	r2, r4
 80051fc:	462b      	mov	r3, r5
 80051fe:	f7fb fa13 	bl	8000628 <__aeabi_dmul>
 8005202:	bd70      	pop	{r4, r5, r6, pc}
 8005204:	0000      	movs	r0, r0
	...

08005208 <_strtod_l>:
 8005208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800520c:	b0a3      	sub	sp, #140	; 0x8c
 800520e:	461f      	mov	r7, r3
 8005210:	2300      	movs	r3, #0
 8005212:	931e      	str	r3, [sp, #120]	; 0x78
 8005214:	4ba4      	ldr	r3, [pc, #656]	; (80054a8 <_strtod_l+0x2a0>)
 8005216:	9219      	str	r2, [sp, #100]	; 0x64
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	9307      	str	r3, [sp, #28]
 800521c:	4604      	mov	r4, r0
 800521e:	4618      	mov	r0, r3
 8005220:	4688      	mov	r8, r1
 8005222:	f7fa ffe7 	bl	80001f4 <strlen>
 8005226:	f04f 0a00 	mov.w	sl, #0
 800522a:	4605      	mov	r5, r0
 800522c:	f04f 0b00 	mov.w	fp, #0
 8005230:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005234:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005236:	781a      	ldrb	r2, [r3, #0]
 8005238:	2a2b      	cmp	r2, #43	; 0x2b
 800523a:	d04c      	beq.n	80052d6 <_strtod_l+0xce>
 800523c:	d839      	bhi.n	80052b2 <_strtod_l+0xaa>
 800523e:	2a0d      	cmp	r2, #13
 8005240:	d832      	bhi.n	80052a8 <_strtod_l+0xa0>
 8005242:	2a08      	cmp	r2, #8
 8005244:	d832      	bhi.n	80052ac <_strtod_l+0xa4>
 8005246:	2a00      	cmp	r2, #0
 8005248:	d03c      	beq.n	80052c4 <_strtod_l+0xbc>
 800524a:	2300      	movs	r3, #0
 800524c:	930e      	str	r3, [sp, #56]	; 0x38
 800524e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005250:	7833      	ldrb	r3, [r6, #0]
 8005252:	2b30      	cmp	r3, #48	; 0x30
 8005254:	f040 80b4 	bne.w	80053c0 <_strtod_l+0x1b8>
 8005258:	7873      	ldrb	r3, [r6, #1]
 800525a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800525e:	2b58      	cmp	r3, #88	; 0x58
 8005260:	d16c      	bne.n	800533c <_strtod_l+0x134>
 8005262:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005264:	9301      	str	r3, [sp, #4]
 8005266:	ab1e      	add	r3, sp, #120	; 0x78
 8005268:	9702      	str	r7, [sp, #8]
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	4a8f      	ldr	r2, [pc, #572]	; (80054ac <_strtod_l+0x2a4>)
 800526e:	ab1f      	add	r3, sp, #124	; 0x7c
 8005270:	a91d      	add	r1, sp, #116	; 0x74
 8005272:	4620      	mov	r0, r4
 8005274:	f001 fd40 	bl	8006cf8 <__gethex>
 8005278:	f010 0707 	ands.w	r7, r0, #7
 800527c:	4605      	mov	r5, r0
 800527e:	d005      	beq.n	800528c <_strtod_l+0x84>
 8005280:	2f06      	cmp	r7, #6
 8005282:	d12a      	bne.n	80052da <_strtod_l+0xd2>
 8005284:	3601      	adds	r6, #1
 8005286:	2300      	movs	r3, #0
 8005288:	961d      	str	r6, [sp, #116]	; 0x74
 800528a:	930e      	str	r3, [sp, #56]	; 0x38
 800528c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800528e:	2b00      	cmp	r3, #0
 8005290:	f040 8596 	bne.w	8005dc0 <_strtod_l+0xbb8>
 8005294:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005296:	b1db      	cbz	r3, 80052d0 <_strtod_l+0xc8>
 8005298:	4652      	mov	r2, sl
 800529a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800529e:	ec43 2b10 	vmov	d0, r2, r3
 80052a2:	b023      	add	sp, #140	; 0x8c
 80052a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052a8:	2a20      	cmp	r2, #32
 80052aa:	d1ce      	bne.n	800524a <_strtod_l+0x42>
 80052ac:	3301      	adds	r3, #1
 80052ae:	931d      	str	r3, [sp, #116]	; 0x74
 80052b0:	e7c0      	b.n	8005234 <_strtod_l+0x2c>
 80052b2:	2a2d      	cmp	r2, #45	; 0x2d
 80052b4:	d1c9      	bne.n	800524a <_strtod_l+0x42>
 80052b6:	2201      	movs	r2, #1
 80052b8:	920e      	str	r2, [sp, #56]	; 0x38
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	921d      	str	r2, [sp, #116]	; 0x74
 80052be:	785b      	ldrb	r3, [r3, #1]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1c4      	bne.n	800524e <_strtod_l+0x46>
 80052c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80052c6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f040 8576 	bne.w	8005dbc <_strtod_l+0xbb4>
 80052d0:	4652      	mov	r2, sl
 80052d2:	465b      	mov	r3, fp
 80052d4:	e7e3      	b.n	800529e <_strtod_l+0x96>
 80052d6:	2200      	movs	r2, #0
 80052d8:	e7ee      	b.n	80052b8 <_strtod_l+0xb0>
 80052da:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80052dc:	b13a      	cbz	r2, 80052ee <_strtod_l+0xe6>
 80052de:	2135      	movs	r1, #53	; 0x35
 80052e0:	a820      	add	r0, sp, #128	; 0x80
 80052e2:	f002 fcb4 	bl	8007c4e <__copybits>
 80052e6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80052e8:	4620      	mov	r0, r4
 80052ea:	f002 f879 	bl	80073e0 <_Bfree>
 80052ee:	3f01      	subs	r7, #1
 80052f0:	2f05      	cmp	r7, #5
 80052f2:	d807      	bhi.n	8005304 <_strtod_l+0xfc>
 80052f4:	e8df f007 	tbb	[pc, r7]
 80052f8:	1d180b0e 	.word	0x1d180b0e
 80052fc:	030e      	.short	0x030e
 80052fe:	f04f 0b00 	mov.w	fp, #0
 8005302:	46da      	mov	sl, fp
 8005304:	0728      	lsls	r0, r5, #28
 8005306:	d5c1      	bpl.n	800528c <_strtod_l+0x84>
 8005308:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800530c:	e7be      	b.n	800528c <_strtod_l+0x84>
 800530e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8005312:	e7f7      	b.n	8005304 <_strtod_l+0xfc>
 8005314:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8005318:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800531a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800531e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005322:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005326:	e7ed      	b.n	8005304 <_strtod_l+0xfc>
 8005328:	f8df b184 	ldr.w	fp, [pc, #388]	; 80054b0 <_strtod_l+0x2a8>
 800532c:	f04f 0a00 	mov.w	sl, #0
 8005330:	e7e8      	b.n	8005304 <_strtod_l+0xfc>
 8005332:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005336:	f04f 3aff 	mov.w	sl, #4294967295
 800533a:	e7e3      	b.n	8005304 <_strtod_l+0xfc>
 800533c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800533e:	1c5a      	adds	r2, r3, #1
 8005340:	921d      	str	r2, [sp, #116]	; 0x74
 8005342:	785b      	ldrb	r3, [r3, #1]
 8005344:	2b30      	cmp	r3, #48	; 0x30
 8005346:	d0f9      	beq.n	800533c <_strtod_l+0x134>
 8005348:	2b00      	cmp	r3, #0
 800534a:	d09f      	beq.n	800528c <_strtod_l+0x84>
 800534c:	2301      	movs	r3, #1
 800534e:	f04f 0900 	mov.w	r9, #0
 8005352:	9304      	str	r3, [sp, #16]
 8005354:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005356:	930a      	str	r3, [sp, #40]	; 0x28
 8005358:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800535c:	464f      	mov	r7, r9
 800535e:	220a      	movs	r2, #10
 8005360:	981d      	ldr	r0, [sp, #116]	; 0x74
 8005362:	7806      	ldrb	r6, [r0, #0]
 8005364:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005368:	b2d9      	uxtb	r1, r3
 800536a:	2909      	cmp	r1, #9
 800536c:	d92a      	bls.n	80053c4 <_strtod_l+0x1bc>
 800536e:	9907      	ldr	r1, [sp, #28]
 8005370:	462a      	mov	r2, r5
 8005372:	f002 fedd 	bl	8008130 <strncmp>
 8005376:	b398      	cbz	r0, 80053e0 <_strtod_l+0x1d8>
 8005378:	2000      	movs	r0, #0
 800537a:	4633      	mov	r3, r6
 800537c:	463d      	mov	r5, r7
 800537e:	9007      	str	r0, [sp, #28]
 8005380:	4602      	mov	r2, r0
 8005382:	2b65      	cmp	r3, #101	; 0x65
 8005384:	d001      	beq.n	800538a <_strtod_l+0x182>
 8005386:	2b45      	cmp	r3, #69	; 0x45
 8005388:	d118      	bne.n	80053bc <_strtod_l+0x1b4>
 800538a:	b91d      	cbnz	r5, 8005394 <_strtod_l+0x18c>
 800538c:	9b04      	ldr	r3, [sp, #16]
 800538e:	4303      	orrs	r3, r0
 8005390:	d098      	beq.n	80052c4 <_strtod_l+0xbc>
 8005392:	2500      	movs	r5, #0
 8005394:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8005398:	f108 0301 	add.w	r3, r8, #1
 800539c:	931d      	str	r3, [sp, #116]	; 0x74
 800539e:	f898 3001 	ldrb.w	r3, [r8, #1]
 80053a2:	2b2b      	cmp	r3, #43	; 0x2b
 80053a4:	d075      	beq.n	8005492 <_strtod_l+0x28a>
 80053a6:	2b2d      	cmp	r3, #45	; 0x2d
 80053a8:	d07b      	beq.n	80054a2 <_strtod_l+0x29a>
 80053aa:	f04f 0c00 	mov.w	ip, #0
 80053ae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80053b2:	2909      	cmp	r1, #9
 80053b4:	f240 8082 	bls.w	80054bc <_strtod_l+0x2b4>
 80053b8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80053bc:	2600      	movs	r6, #0
 80053be:	e09d      	b.n	80054fc <_strtod_l+0x2f4>
 80053c0:	2300      	movs	r3, #0
 80053c2:	e7c4      	b.n	800534e <_strtod_l+0x146>
 80053c4:	2f08      	cmp	r7, #8
 80053c6:	bfd8      	it	le
 80053c8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80053ca:	f100 0001 	add.w	r0, r0, #1
 80053ce:	bfda      	itte	le
 80053d0:	fb02 3301 	mlale	r3, r2, r1, r3
 80053d4:	9309      	strle	r3, [sp, #36]	; 0x24
 80053d6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80053da:	3701      	adds	r7, #1
 80053dc:	901d      	str	r0, [sp, #116]	; 0x74
 80053de:	e7bf      	b.n	8005360 <_strtod_l+0x158>
 80053e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80053e2:	195a      	adds	r2, r3, r5
 80053e4:	921d      	str	r2, [sp, #116]	; 0x74
 80053e6:	5d5b      	ldrb	r3, [r3, r5]
 80053e8:	2f00      	cmp	r7, #0
 80053ea:	d037      	beq.n	800545c <_strtod_l+0x254>
 80053ec:	9007      	str	r0, [sp, #28]
 80053ee:	463d      	mov	r5, r7
 80053f0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80053f4:	2a09      	cmp	r2, #9
 80053f6:	d912      	bls.n	800541e <_strtod_l+0x216>
 80053f8:	2201      	movs	r2, #1
 80053fa:	e7c2      	b.n	8005382 <_strtod_l+0x17a>
 80053fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80053fe:	1c5a      	adds	r2, r3, #1
 8005400:	921d      	str	r2, [sp, #116]	; 0x74
 8005402:	785b      	ldrb	r3, [r3, #1]
 8005404:	3001      	adds	r0, #1
 8005406:	2b30      	cmp	r3, #48	; 0x30
 8005408:	d0f8      	beq.n	80053fc <_strtod_l+0x1f4>
 800540a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800540e:	2a08      	cmp	r2, #8
 8005410:	f200 84db 	bhi.w	8005dca <_strtod_l+0xbc2>
 8005414:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005416:	9007      	str	r0, [sp, #28]
 8005418:	2000      	movs	r0, #0
 800541a:	920a      	str	r2, [sp, #40]	; 0x28
 800541c:	4605      	mov	r5, r0
 800541e:	3b30      	subs	r3, #48	; 0x30
 8005420:	f100 0201 	add.w	r2, r0, #1
 8005424:	d014      	beq.n	8005450 <_strtod_l+0x248>
 8005426:	9907      	ldr	r1, [sp, #28]
 8005428:	4411      	add	r1, r2
 800542a:	9107      	str	r1, [sp, #28]
 800542c:	462a      	mov	r2, r5
 800542e:	eb00 0e05 	add.w	lr, r0, r5
 8005432:	210a      	movs	r1, #10
 8005434:	4572      	cmp	r2, lr
 8005436:	d113      	bne.n	8005460 <_strtod_l+0x258>
 8005438:	182a      	adds	r2, r5, r0
 800543a:	2a08      	cmp	r2, #8
 800543c:	f105 0501 	add.w	r5, r5, #1
 8005440:	4405      	add	r5, r0
 8005442:	dc1c      	bgt.n	800547e <_strtod_l+0x276>
 8005444:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005446:	220a      	movs	r2, #10
 8005448:	fb02 3301 	mla	r3, r2, r1, r3
 800544c:	9309      	str	r3, [sp, #36]	; 0x24
 800544e:	2200      	movs	r2, #0
 8005450:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005452:	1c59      	adds	r1, r3, #1
 8005454:	911d      	str	r1, [sp, #116]	; 0x74
 8005456:	785b      	ldrb	r3, [r3, #1]
 8005458:	4610      	mov	r0, r2
 800545a:	e7c9      	b.n	80053f0 <_strtod_l+0x1e8>
 800545c:	4638      	mov	r0, r7
 800545e:	e7d2      	b.n	8005406 <_strtod_l+0x1fe>
 8005460:	2a08      	cmp	r2, #8
 8005462:	dc04      	bgt.n	800546e <_strtod_l+0x266>
 8005464:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005466:	434e      	muls	r6, r1
 8005468:	9609      	str	r6, [sp, #36]	; 0x24
 800546a:	3201      	adds	r2, #1
 800546c:	e7e2      	b.n	8005434 <_strtod_l+0x22c>
 800546e:	f102 0c01 	add.w	ip, r2, #1
 8005472:	f1bc 0f10 	cmp.w	ip, #16
 8005476:	bfd8      	it	le
 8005478:	fb01 f909 	mulle.w	r9, r1, r9
 800547c:	e7f5      	b.n	800546a <_strtod_l+0x262>
 800547e:	2d10      	cmp	r5, #16
 8005480:	bfdc      	itt	le
 8005482:	220a      	movle	r2, #10
 8005484:	fb02 3909 	mlale	r9, r2, r9, r3
 8005488:	e7e1      	b.n	800544e <_strtod_l+0x246>
 800548a:	2300      	movs	r3, #0
 800548c:	9307      	str	r3, [sp, #28]
 800548e:	2201      	movs	r2, #1
 8005490:	e77c      	b.n	800538c <_strtod_l+0x184>
 8005492:	f04f 0c00 	mov.w	ip, #0
 8005496:	f108 0302 	add.w	r3, r8, #2
 800549a:	931d      	str	r3, [sp, #116]	; 0x74
 800549c:	f898 3002 	ldrb.w	r3, [r8, #2]
 80054a0:	e785      	b.n	80053ae <_strtod_l+0x1a6>
 80054a2:	f04f 0c01 	mov.w	ip, #1
 80054a6:	e7f6      	b.n	8005496 <_strtod_l+0x28e>
 80054a8:	08009048 	.word	0x08009048
 80054ac:	08008df4 	.word	0x08008df4
 80054b0:	7ff00000 	.word	0x7ff00000
 80054b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80054b6:	1c59      	adds	r1, r3, #1
 80054b8:	911d      	str	r1, [sp, #116]	; 0x74
 80054ba:	785b      	ldrb	r3, [r3, #1]
 80054bc:	2b30      	cmp	r3, #48	; 0x30
 80054be:	d0f9      	beq.n	80054b4 <_strtod_l+0x2ac>
 80054c0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80054c4:	2908      	cmp	r1, #8
 80054c6:	f63f af79 	bhi.w	80053bc <_strtod_l+0x1b4>
 80054ca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80054ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80054d0:	9308      	str	r3, [sp, #32]
 80054d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80054d4:	1c59      	adds	r1, r3, #1
 80054d6:	911d      	str	r1, [sp, #116]	; 0x74
 80054d8:	785b      	ldrb	r3, [r3, #1]
 80054da:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80054de:	2e09      	cmp	r6, #9
 80054e0:	d937      	bls.n	8005552 <_strtod_l+0x34a>
 80054e2:	9e08      	ldr	r6, [sp, #32]
 80054e4:	1b89      	subs	r1, r1, r6
 80054e6:	2908      	cmp	r1, #8
 80054e8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80054ec:	dc02      	bgt.n	80054f4 <_strtod_l+0x2ec>
 80054ee:	4576      	cmp	r6, lr
 80054f0:	bfa8      	it	ge
 80054f2:	4676      	movge	r6, lr
 80054f4:	f1bc 0f00 	cmp.w	ip, #0
 80054f8:	d000      	beq.n	80054fc <_strtod_l+0x2f4>
 80054fa:	4276      	negs	r6, r6
 80054fc:	2d00      	cmp	r5, #0
 80054fe:	d14f      	bne.n	80055a0 <_strtod_l+0x398>
 8005500:	9904      	ldr	r1, [sp, #16]
 8005502:	4301      	orrs	r1, r0
 8005504:	f47f aec2 	bne.w	800528c <_strtod_l+0x84>
 8005508:	2a00      	cmp	r2, #0
 800550a:	f47f aedb 	bne.w	80052c4 <_strtod_l+0xbc>
 800550e:	2b69      	cmp	r3, #105	; 0x69
 8005510:	d027      	beq.n	8005562 <_strtod_l+0x35a>
 8005512:	dc24      	bgt.n	800555e <_strtod_l+0x356>
 8005514:	2b49      	cmp	r3, #73	; 0x49
 8005516:	d024      	beq.n	8005562 <_strtod_l+0x35a>
 8005518:	2b4e      	cmp	r3, #78	; 0x4e
 800551a:	f47f aed3 	bne.w	80052c4 <_strtod_l+0xbc>
 800551e:	499e      	ldr	r1, [pc, #632]	; (8005798 <_strtod_l+0x590>)
 8005520:	a81d      	add	r0, sp, #116	; 0x74
 8005522:	f001 fe41 	bl	80071a8 <__match>
 8005526:	2800      	cmp	r0, #0
 8005528:	f43f aecc 	beq.w	80052c4 <_strtod_l+0xbc>
 800552c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	2b28      	cmp	r3, #40	; 0x28
 8005532:	d12d      	bne.n	8005590 <_strtod_l+0x388>
 8005534:	4999      	ldr	r1, [pc, #612]	; (800579c <_strtod_l+0x594>)
 8005536:	aa20      	add	r2, sp, #128	; 0x80
 8005538:	a81d      	add	r0, sp, #116	; 0x74
 800553a:	f001 fe49 	bl	80071d0 <__hexnan>
 800553e:	2805      	cmp	r0, #5
 8005540:	d126      	bne.n	8005590 <_strtod_l+0x388>
 8005542:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005544:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8005548:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800554c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005550:	e69c      	b.n	800528c <_strtod_l+0x84>
 8005552:	210a      	movs	r1, #10
 8005554:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005558:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800555c:	e7b9      	b.n	80054d2 <_strtod_l+0x2ca>
 800555e:	2b6e      	cmp	r3, #110	; 0x6e
 8005560:	e7db      	b.n	800551a <_strtod_l+0x312>
 8005562:	498f      	ldr	r1, [pc, #572]	; (80057a0 <_strtod_l+0x598>)
 8005564:	a81d      	add	r0, sp, #116	; 0x74
 8005566:	f001 fe1f 	bl	80071a8 <__match>
 800556a:	2800      	cmp	r0, #0
 800556c:	f43f aeaa 	beq.w	80052c4 <_strtod_l+0xbc>
 8005570:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005572:	498c      	ldr	r1, [pc, #560]	; (80057a4 <_strtod_l+0x59c>)
 8005574:	3b01      	subs	r3, #1
 8005576:	a81d      	add	r0, sp, #116	; 0x74
 8005578:	931d      	str	r3, [sp, #116]	; 0x74
 800557a:	f001 fe15 	bl	80071a8 <__match>
 800557e:	b910      	cbnz	r0, 8005586 <_strtod_l+0x37e>
 8005580:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005582:	3301      	adds	r3, #1
 8005584:	931d      	str	r3, [sp, #116]	; 0x74
 8005586:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80057b4 <_strtod_l+0x5ac>
 800558a:	f04f 0a00 	mov.w	sl, #0
 800558e:	e67d      	b.n	800528c <_strtod_l+0x84>
 8005590:	4885      	ldr	r0, [pc, #532]	; (80057a8 <_strtod_l+0x5a0>)
 8005592:	f002 fdb5 	bl	8008100 <nan>
 8005596:	ed8d 0b04 	vstr	d0, [sp, #16]
 800559a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800559e:	e675      	b.n	800528c <_strtod_l+0x84>
 80055a0:	9b07      	ldr	r3, [sp, #28]
 80055a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055a4:	1af3      	subs	r3, r6, r3
 80055a6:	2f00      	cmp	r7, #0
 80055a8:	bf08      	it	eq
 80055aa:	462f      	moveq	r7, r5
 80055ac:	2d10      	cmp	r5, #16
 80055ae:	9308      	str	r3, [sp, #32]
 80055b0:	46a8      	mov	r8, r5
 80055b2:	bfa8      	it	ge
 80055b4:	f04f 0810 	movge.w	r8, #16
 80055b8:	f7fa ffbc 	bl	8000534 <__aeabi_ui2d>
 80055bc:	2d09      	cmp	r5, #9
 80055be:	4682      	mov	sl, r0
 80055c0:	468b      	mov	fp, r1
 80055c2:	dd13      	ble.n	80055ec <_strtod_l+0x3e4>
 80055c4:	4b79      	ldr	r3, [pc, #484]	; (80057ac <_strtod_l+0x5a4>)
 80055c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80055ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80055ce:	f7fb f82b 	bl	8000628 <__aeabi_dmul>
 80055d2:	4682      	mov	sl, r0
 80055d4:	4648      	mov	r0, r9
 80055d6:	468b      	mov	fp, r1
 80055d8:	f7fa ffac 	bl	8000534 <__aeabi_ui2d>
 80055dc:	4602      	mov	r2, r0
 80055de:	460b      	mov	r3, r1
 80055e0:	4650      	mov	r0, sl
 80055e2:	4659      	mov	r1, fp
 80055e4:	f7fa fe6a 	bl	80002bc <__adddf3>
 80055e8:	4682      	mov	sl, r0
 80055ea:	468b      	mov	fp, r1
 80055ec:	2d0f      	cmp	r5, #15
 80055ee:	dc38      	bgt.n	8005662 <_strtod_l+0x45a>
 80055f0:	9b08      	ldr	r3, [sp, #32]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f43f ae4a 	beq.w	800528c <_strtod_l+0x84>
 80055f8:	dd24      	ble.n	8005644 <_strtod_l+0x43c>
 80055fa:	2b16      	cmp	r3, #22
 80055fc:	dc0b      	bgt.n	8005616 <_strtod_l+0x40e>
 80055fe:	4d6b      	ldr	r5, [pc, #428]	; (80057ac <_strtod_l+0x5a4>)
 8005600:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8005604:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005608:	4652      	mov	r2, sl
 800560a:	465b      	mov	r3, fp
 800560c:	f7fb f80c 	bl	8000628 <__aeabi_dmul>
 8005610:	4682      	mov	sl, r0
 8005612:	468b      	mov	fp, r1
 8005614:	e63a      	b.n	800528c <_strtod_l+0x84>
 8005616:	9a08      	ldr	r2, [sp, #32]
 8005618:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800561c:	4293      	cmp	r3, r2
 800561e:	db20      	blt.n	8005662 <_strtod_l+0x45a>
 8005620:	4c62      	ldr	r4, [pc, #392]	; (80057ac <_strtod_l+0x5a4>)
 8005622:	f1c5 050f 	rsb	r5, r5, #15
 8005626:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800562a:	4652      	mov	r2, sl
 800562c:	465b      	mov	r3, fp
 800562e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005632:	f7fa fff9 	bl	8000628 <__aeabi_dmul>
 8005636:	9b08      	ldr	r3, [sp, #32]
 8005638:	1b5d      	subs	r5, r3, r5
 800563a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800563e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005642:	e7e3      	b.n	800560c <_strtod_l+0x404>
 8005644:	9b08      	ldr	r3, [sp, #32]
 8005646:	3316      	adds	r3, #22
 8005648:	db0b      	blt.n	8005662 <_strtod_l+0x45a>
 800564a:	9b07      	ldr	r3, [sp, #28]
 800564c:	4a57      	ldr	r2, [pc, #348]	; (80057ac <_strtod_l+0x5a4>)
 800564e:	1b9e      	subs	r6, r3, r6
 8005650:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8005654:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005658:	4650      	mov	r0, sl
 800565a:	4659      	mov	r1, fp
 800565c:	f7fb f90e 	bl	800087c <__aeabi_ddiv>
 8005660:	e7d6      	b.n	8005610 <_strtod_l+0x408>
 8005662:	9b08      	ldr	r3, [sp, #32]
 8005664:	eba5 0808 	sub.w	r8, r5, r8
 8005668:	4498      	add	r8, r3
 800566a:	f1b8 0f00 	cmp.w	r8, #0
 800566e:	dd71      	ble.n	8005754 <_strtod_l+0x54c>
 8005670:	f018 030f 	ands.w	r3, r8, #15
 8005674:	d00a      	beq.n	800568c <_strtod_l+0x484>
 8005676:	494d      	ldr	r1, [pc, #308]	; (80057ac <_strtod_l+0x5a4>)
 8005678:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800567c:	4652      	mov	r2, sl
 800567e:	465b      	mov	r3, fp
 8005680:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005684:	f7fa ffd0 	bl	8000628 <__aeabi_dmul>
 8005688:	4682      	mov	sl, r0
 800568a:	468b      	mov	fp, r1
 800568c:	f038 080f 	bics.w	r8, r8, #15
 8005690:	d04d      	beq.n	800572e <_strtod_l+0x526>
 8005692:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005696:	dd22      	ble.n	80056de <_strtod_l+0x4d6>
 8005698:	2500      	movs	r5, #0
 800569a:	462e      	mov	r6, r5
 800569c:	9509      	str	r5, [sp, #36]	; 0x24
 800569e:	9507      	str	r5, [sp, #28]
 80056a0:	2322      	movs	r3, #34	; 0x22
 80056a2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80057b4 <_strtod_l+0x5ac>
 80056a6:	6023      	str	r3, [r4, #0]
 80056a8:	f04f 0a00 	mov.w	sl, #0
 80056ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f43f adec 	beq.w	800528c <_strtod_l+0x84>
 80056b4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80056b6:	4620      	mov	r0, r4
 80056b8:	f001 fe92 	bl	80073e0 <_Bfree>
 80056bc:	9907      	ldr	r1, [sp, #28]
 80056be:	4620      	mov	r0, r4
 80056c0:	f001 fe8e 	bl	80073e0 <_Bfree>
 80056c4:	4631      	mov	r1, r6
 80056c6:	4620      	mov	r0, r4
 80056c8:	f001 fe8a 	bl	80073e0 <_Bfree>
 80056cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056ce:	4620      	mov	r0, r4
 80056d0:	f001 fe86 	bl	80073e0 <_Bfree>
 80056d4:	4629      	mov	r1, r5
 80056d6:	4620      	mov	r0, r4
 80056d8:	f001 fe82 	bl	80073e0 <_Bfree>
 80056dc:	e5d6      	b.n	800528c <_strtod_l+0x84>
 80056de:	2300      	movs	r3, #0
 80056e0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80056e4:	4650      	mov	r0, sl
 80056e6:	4659      	mov	r1, fp
 80056e8:	4699      	mov	r9, r3
 80056ea:	f1b8 0f01 	cmp.w	r8, #1
 80056ee:	dc21      	bgt.n	8005734 <_strtod_l+0x52c>
 80056f0:	b10b      	cbz	r3, 80056f6 <_strtod_l+0x4ee>
 80056f2:	4682      	mov	sl, r0
 80056f4:	468b      	mov	fp, r1
 80056f6:	4b2e      	ldr	r3, [pc, #184]	; (80057b0 <_strtod_l+0x5a8>)
 80056f8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80056fc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005700:	4652      	mov	r2, sl
 8005702:	465b      	mov	r3, fp
 8005704:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005708:	f7fa ff8e 	bl	8000628 <__aeabi_dmul>
 800570c:	4b29      	ldr	r3, [pc, #164]	; (80057b4 <_strtod_l+0x5ac>)
 800570e:	460a      	mov	r2, r1
 8005710:	400b      	ands	r3, r1
 8005712:	4929      	ldr	r1, [pc, #164]	; (80057b8 <_strtod_l+0x5b0>)
 8005714:	428b      	cmp	r3, r1
 8005716:	4682      	mov	sl, r0
 8005718:	d8be      	bhi.n	8005698 <_strtod_l+0x490>
 800571a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800571e:	428b      	cmp	r3, r1
 8005720:	bf86      	itte	hi
 8005722:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80057bc <_strtod_l+0x5b4>
 8005726:	f04f 3aff 	movhi.w	sl, #4294967295
 800572a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800572e:	2300      	movs	r3, #0
 8005730:	9304      	str	r3, [sp, #16]
 8005732:	e081      	b.n	8005838 <_strtod_l+0x630>
 8005734:	f018 0f01 	tst.w	r8, #1
 8005738:	d007      	beq.n	800574a <_strtod_l+0x542>
 800573a:	4b1d      	ldr	r3, [pc, #116]	; (80057b0 <_strtod_l+0x5a8>)
 800573c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005744:	f7fa ff70 	bl	8000628 <__aeabi_dmul>
 8005748:	2301      	movs	r3, #1
 800574a:	f109 0901 	add.w	r9, r9, #1
 800574e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005752:	e7ca      	b.n	80056ea <_strtod_l+0x4e2>
 8005754:	d0eb      	beq.n	800572e <_strtod_l+0x526>
 8005756:	f1c8 0800 	rsb	r8, r8, #0
 800575a:	f018 020f 	ands.w	r2, r8, #15
 800575e:	d00a      	beq.n	8005776 <_strtod_l+0x56e>
 8005760:	4b12      	ldr	r3, [pc, #72]	; (80057ac <_strtod_l+0x5a4>)
 8005762:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005766:	4650      	mov	r0, sl
 8005768:	4659      	mov	r1, fp
 800576a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576e:	f7fb f885 	bl	800087c <__aeabi_ddiv>
 8005772:	4682      	mov	sl, r0
 8005774:	468b      	mov	fp, r1
 8005776:	ea5f 1828 	movs.w	r8, r8, asr #4
 800577a:	d0d8      	beq.n	800572e <_strtod_l+0x526>
 800577c:	f1b8 0f1f 	cmp.w	r8, #31
 8005780:	dd1e      	ble.n	80057c0 <_strtod_l+0x5b8>
 8005782:	2500      	movs	r5, #0
 8005784:	462e      	mov	r6, r5
 8005786:	9509      	str	r5, [sp, #36]	; 0x24
 8005788:	9507      	str	r5, [sp, #28]
 800578a:	2322      	movs	r3, #34	; 0x22
 800578c:	f04f 0a00 	mov.w	sl, #0
 8005790:	f04f 0b00 	mov.w	fp, #0
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	e789      	b.n	80056ac <_strtod_l+0x4a4>
 8005798:	08008dc5 	.word	0x08008dc5
 800579c:	08008e08 	.word	0x08008e08
 80057a0:	08008dbd 	.word	0x08008dbd
 80057a4:	08008f4c 	.word	0x08008f4c
 80057a8:	08009208 	.word	0x08009208
 80057ac:	080090e8 	.word	0x080090e8
 80057b0:	080090c0 	.word	0x080090c0
 80057b4:	7ff00000 	.word	0x7ff00000
 80057b8:	7ca00000 	.word	0x7ca00000
 80057bc:	7fefffff 	.word	0x7fefffff
 80057c0:	f018 0310 	ands.w	r3, r8, #16
 80057c4:	bf18      	it	ne
 80057c6:	236a      	movne	r3, #106	; 0x6a
 80057c8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8005b80 <_strtod_l+0x978>
 80057cc:	9304      	str	r3, [sp, #16]
 80057ce:	4650      	mov	r0, sl
 80057d0:	4659      	mov	r1, fp
 80057d2:	2300      	movs	r3, #0
 80057d4:	f018 0f01 	tst.w	r8, #1
 80057d8:	d004      	beq.n	80057e4 <_strtod_l+0x5dc>
 80057da:	e9d9 2300 	ldrd	r2, r3, [r9]
 80057de:	f7fa ff23 	bl	8000628 <__aeabi_dmul>
 80057e2:	2301      	movs	r3, #1
 80057e4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80057e8:	f109 0908 	add.w	r9, r9, #8
 80057ec:	d1f2      	bne.n	80057d4 <_strtod_l+0x5cc>
 80057ee:	b10b      	cbz	r3, 80057f4 <_strtod_l+0x5ec>
 80057f0:	4682      	mov	sl, r0
 80057f2:	468b      	mov	fp, r1
 80057f4:	9b04      	ldr	r3, [sp, #16]
 80057f6:	b1bb      	cbz	r3, 8005828 <_strtod_l+0x620>
 80057f8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80057fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005800:	2b00      	cmp	r3, #0
 8005802:	4659      	mov	r1, fp
 8005804:	dd10      	ble.n	8005828 <_strtod_l+0x620>
 8005806:	2b1f      	cmp	r3, #31
 8005808:	f340 8128 	ble.w	8005a5c <_strtod_l+0x854>
 800580c:	2b34      	cmp	r3, #52	; 0x34
 800580e:	bfde      	ittt	le
 8005810:	3b20      	suble	r3, #32
 8005812:	f04f 32ff 	movle.w	r2, #4294967295
 8005816:	fa02 f303 	lslle.w	r3, r2, r3
 800581a:	f04f 0a00 	mov.w	sl, #0
 800581e:	bfcc      	ite	gt
 8005820:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005824:	ea03 0b01 	andle.w	fp, r3, r1
 8005828:	2200      	movs	r2, #0
 800582a:	2300      	movs	r3, #0
 800582c:	4650      	mov	r0, sl
 800582e:	4659      	mov	r1, fp
 8005830:	f7fb f962 	bl	8000af8 <__aeabi_dcmpeq>
 8005834:	2800      	cmp	r0, #0
 8005836:	d1a4      	bne.n	8005782 <_strtod_l+0x57a>
 8005838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800583e:	462b      	mov	r3, r5
 8005840:	463a      	mov	r2, r7
 8005842:	4620      	mov	r0, r4
 8005844:	f001 fe38 	bl	80074b8 <__s2b>
 8005848:	9009      	str	r0, [sp, #36]	; 0x24
 800584a:	2800      	cmp	r0, #0
 800584c:	f43f af24 	beq.w	8005698 <_strtod_l+0x490>
 8005850:	9b07      	ldr	r3, [sp, #28]
 8005852:	1b9e      	subs	r6, r3, r6
 8005854:	9b08      	ldr	r3, [sp, #32]
 8005856:	2b00      	cmp	r3, #0
 8005858:	bfb4      	ite	lt
 800585a:	4633      	movlt	r3, r6
 800585c:	2300      	movge	r3, #0
 800585e:	9310      	str	r3, [sp, #64]	; 0x40
 8005860:	9b08      	ldr	r3, [sp, #32]
 8005862:	2500      	movs	r5, #0
 8005864:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005868:	9318      	str	r3, [sp, #96]	; 0x60
 800586a:	462e      	mov	r6, r5
 800586c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800586e:	4620      	mov	r0, r4
 8005870:	6859      	ldr	r1, [r3, #4]
 8005872:	f001 fd75 	bl	8007360 <_Balloc>
 8005876:	9007      	str	r0, [sp, #28]
 8005878:	2800      	cmp	r0, #0
 800587a:	f43f af11 	beq.w	80056a0 <_strtod_l+0x498>
 800587e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005880:	691a      	ldr	r2, [r3, #16]
 8005882:	3202      	adds	r2, #2
 8005884:	f103 010c 	add.w	r1, r3, #12
 8005888:	0092      	lsls	r2, r2, #2
 800588a:	300c      	adds	r0, #12
 800588c:	f001 fd5a 	bl	8007344 <memcpy>
 8005890:	ec4b ab10 	vmov	d0, sl, fp
 8005894:	aa20      	add	r2, sp, #128	; 0x80
 8005896:	a91f      	add	r1, sp, #124	; 0x7c
 8005898:	4620      	mov	r0, r4
 800589a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800589e:	f002 f947 	bl	8007b30 <__d2b>
 80058a2:	901e      	str	r0, [sp, #120]	; 0x78
 80058a4:	2800      	cmp	r0, #0
 80058a6:	f43f aefb 	beq.w	80056a0 <_strtod_l+0x498>
 80058aa:	2101      	movs	r1, #1
 80058ac:	4620      	mov	r0, r4
 80058ae:	f001 fe9d 	bl	80075ec <__i2b>
 80058b2:	4606      	mov	r6, r0
 80058b4:	2800      	cmp	r0, #0
 80058b6:	f43f aef3 	beq.w	80056a0 <_strtod_l+0x498>
 80058ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80058bc:	9904      	ldr	r1, [sp, #16]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	bfab      	itete	ge
 80058c2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80058c4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80058c6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80058c8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80058cc:	bfac      	ite	ge
 80058ce:	eb03 0902 	addge.w	r9, r3, r2
 80058d2:	1ad7      	sublt	r7, r2, r3
 80058d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80058d6:	eba3 0801 	sub.w	r8, r3, r1
 80058da:	4490      	add	r8, r2
 80058dc:	4ba3      	ldr	r3, [pc, #652]	; (8005b6c <_strtod_l+0x964>)
 80058de:	f108 38ff 	add.w	r8, r8, #4294967295
 80058e2:	4598      	cmp	r8, r3
 80058e4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80058e8:	f280 80cc 	bge.w	8005a84 <_strtod_l+0x87c>
 80058ec:	eba3 0308 	sub.w	r3, r3, r8
 80058f0:	2b1f      	cmp	r3, #31
 80058f2:	eba2 0203 	sub.w	r2, r2, r3
 80058f6:	f04f 0101 	mov.w	r1, #1
 80058fa:	f300 80b6 	bgt.w	8005a6a <_strtod_l+0x862>
 80058fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005902:	9311      	str	r3, [sp, #68]	; 0x44
 8005904:	2300      	movs	r3, #0
 8005906:	930c      	str	r3, [sp, #48]	; 0x30
 8005908:	eb09 0802 	add.w	r8, r9, r2
 800590c:	9b04      	ldr	r3, [sp, #16]
 800590e:	45c1      	cmp	r9, r8
 8005910:	4417      	add	r7, r2
 8005912:	441f      	add	r7, r3
 8005914:	464b      	mov	r3, r9
 8005916:	bfa8      	it	ge
 8005918:	4643      	movge	r3, r8
 800591a:	42bb      	cmp	r3, r7
 800591c:	bfa8      	it	ge
 800591e:	463b      	movge	r3, r7
 8005920:	2b00      	cmp	r3, #0
 8005922:	bfc2      	ittt	gt
 8005924:	eba8 0803 	subgt.w	r8, r8, r3
 8005928:	1aff      	subgt	r7, r7, r3
 800592a:	eba9 0903 	subgt.w	r9, r9, r3
 800592e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005930:	2b00      	cmp	r3, #0
 8005932:	dd17      	ble.n	8005964 <_strtod_l+0x75c>
 8005934:	4631      	mov	r1, r6
 8005936:	461a      	mov	r2, r3
 8005938:	4620      	mov	r0, r4
 800593a:	f001 ff13 	bl	8007764 <__pow5mult>
 800593e:	4606      	mov	r6, r0
 8005940:	2800      	cmp	r0, #0
 8005942:	f43f aead 	beq.w	80056a0 <_strtod_l+0x498>
 8005946:	4601      	mov	r1, r0
 8005948:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800594a:	4620      	mov	r0, r4
 800594c:	f001 fe64 	bl	8007618 <__multiply>
 8005950:	900f      	str	r0, [sp, #60]	; 0x3c
 8005952:	2800      	cmp	r0, #0
 8005954:	f43f aea4 	beq.w	80056a0 <_strtod_l+0x498>
 8005958:	991e      	ldr	r1, [sp, #120]	; 0x78
 800595a:	4620      	mov	r0, r4
 800595c:	f001 fd40 	bl	80073e0 <_Bfree>
 8005960:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005962:	931e      	str	r3, [sp, #120]	; 0x78
 8005964:	f1b8 0f00 	cmp.w	r8, #0
 8005968:	f300 8091 	bgt.w	8005a8e <_strtod_l+0x886>
 800596c:	9b08      	ldr	r3, [sp, #32]
 800596e:	2b00      	cmp	r3, #0
 8005970:	dd08      	ble.n	8005984 <_strtod_l+0x77c>
 8005972:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005974:	9907      	ldr	r1, [sp, #28]
 8005976:	4620      	mov	r0, r4
 8005978:	f001 fef4 	bl	8007764 <__pow5mult>
 800597c:	9007      	str	r0, [sp, #28]
 800597e:	2800      	cmp	r0, #0
 8005980:	f43f ae8e 	beq.w	80056a0 <_strtod_l+0x498>
 8005984:	2f00      	cmp	r7, #0
 8005986:	dd08      	ble.n	800599a <_strtod_l+0x792>
 8005988:	9907      	ldr	r1, [sp, #28]
 800598a:	463a      	mov	r2, r7
 800598c:	4620      	mov	r0, r4
 800598e:	f001 ff43 	bl	8007818 <__lshift>
 8005992:	9007      	str	r0, [sp, #28]
 8005994:	2800      	cmp	r0, #0
 8005996:	f43f ae83 	beq.w	80056a0 <_strtod_l+0x498>
 800599a:	f1b9 0f00 	cmp.w	r9, #0
 800599e:	dd08      	ble.n	80059b2 <_strtod_l+0x7aa>
 80059a0:	4631      	mov	r1, r6
 80059a2:	464a      	mov	r2, r9
 80059a4:	4620      	mov	r0, r4
 80059a6:	f001 ff37 	bl	8007818 <__lshift>
 80059aa:	4606      	mov	r6, r0
 80059ac:	2800      	cmp	r0, #0
 80059ae:	f43f ae77 	beq.w	80056a0 <_strtod_l+0x498>
 80059b2:	9a07      	ldr	r2, [sp, #28]
 80059b4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80059b6:	4620      	mov	r0, r4
 80059b8:	f001 ffb6 	bl	8007928 <__mdiff>
 80059bc:	4605      	mov	r5, r0
 80059be:	2800      	cmp	r0, #0
 80059c0:	f43f ae6e 	beq.w	80056a0 <_strtod_l+0x498>
 80059c4:	68c3      	ldr	r3, [r0, #12]
 80059c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80059c8:	2300      	movs	r3, #0
 80059ca:	60c3      	str	r3, [r0, #12]
 80059cc:	4631      	mov	r1, r6
 80059ce:	f001 ff8f 	bl	80078f0 <__mcmp>
 80059d2:	2800      	cmp	r0, #0
 80059d4:	da65      	bge.n	8005aa2 <_strtod_l+0x89a>
 80059d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059d8:	ea53 030a 	orrs.w	r3, r3, sl
 80059dc:	f040 8087 	bne.w	8005aee <_strtod_l+0x8e6>
 80059e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f040 8082 	bne.w	8005aee <_strtod_l+0x8e6>
 80059ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80059ee:	0d1b      	lsrs	r3, r3, #20
 80059f0:	051b      	lsls	r3, r3, #20
 80059f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80059f6:	d97a      	bls.n	8005aee <_strtod_l+0x8e6>
 80059f8:	696b      	ldr	r3, [r5, #20]
 80059fa:	b913      	cbnz	r3, 8005a02 <_strtod_l+0x7fa>
 80059fc:	692b      	ldr	r3, [r5, #16]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	dd75      	ble.n	8005aee <_strtod_l+0x8e6>
 8005a02:	4629      	mov	r1, r5
 8005a04:	2201      	movs	r2, #1
 8005a06:	4620      	mov	r0, r4
 8005a08:	f001 ff06 	bl	8007818 <__lshift>
 8005a0c:	4631      	mov	r1, r6
 8005a0e:	4605      	mov	r5, r0
 8005a10:	f001 ff6e 	bl	80078f0 <__mcmp>
 8005a14:	2800      	cmp	r0, #0
 8005a16:	dd6a      	ble.n	8005aee <_strtod_l+0x8e6>
 8005a18:	9904      	ldr	r1, [sp, #16]
 8005a1a:	4a55      	ldr	r2, [pc, #340]	; (8005b70 <_strtod_l+0x968>)
 8005a1c:	465b      	mov	r3, fp
 8005a1e:	2900      	cmp	r1, #0
 8005a20:	f000 8085 	beq.w	8005b2e <_strtod_l+0x926>
 8005a24:	ea02 010b 	and.w	r1, r2, fp
 8005a28:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005a2c:	dc7f      	bgt.n	8005b2e <_strtod_l+0x926>
 8005a2e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005a32:	f77f aeaa 	ble.w	800578a <_strtod_l+0x582>
 8005a36:	4a4f      	ldr	r2, [pc, #316]	; (8005b74 <_strtod_l+0x96c>)
 8005a38:	2300      	movs	r3, #0
 8005a3a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8005a3e:	4650      	mov	r0, sl
 8005a40:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8005a44:	4659      	mov	r1, fp
 8005a46:	f7fa fdef 	bl	8000628 <__aeabi_dmul>
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	4303      	orrs	r3, r0
 8005a4e:	bf08      	it	eq
 8005a50:	2322      	moveq	r3, #34	; 0x22
 8005a52:	4682      	mov	sl, r0
 8005a54:	468b      	mov	fp, r1
 8005a56:	bf08      	it	eq
 8005a58:	6023      	streq	r3, [r4, #0]
 8005a5a:	e62b      	b.n	80056b4 <_strtod_l+0x4ac>
 8005a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a60:	fa02 f303 	lsl.w	r3, r2, r3
 8005a64:	ea03 0a0a 	and.w	sl, r3, sl
 8005a68:	e6de      	b.n	8005828 <_strtod_l+0x620>
 8005a6a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005a6e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005a72:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005a76:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005a7a:	fa01 f308 	lsl.w	r3, r1, r8
 8005a7e:	930c      	str	r3, [sp, #48]	; 0x30
 8005a80:	9111      	str	r1, [sp, #68]	; 0x44
 8005a82:	e741      	b.n	8005908 <_strtod_l+0x700>
 8005a84:	2300      	movs	r3, #0
 8005a86:	930c      	str	r3, [sp, #48]	; 0x30
 8005a88:	2301      	movs	r3, #1
 8005a8a:	9311      	str	r3, [sp, #68]	; 0x44
 8005a8c:	e73c      	b.n	8005908 <_strtod_l+0x700>
 8005a8e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005a90:	4642      	mov	r2, r8
 8005a92:	4620      	mov	r0, r4
 8005a94:	f001 fec0 	bl	8007818 <__lshift>
 8005a98:	901e      	str	r0, [sp, #120]	; 0x78
 8005a9a:	2800      	cmp	r0, #0
 8005a9c:	f47f af66 	bne.w	800596c <_strtod_l+0x764>
 8005aa0:	e5fe      	b.n	80056a0 <_strtod_l+0x498>
 8005aa2:	465f      	mov	r7, fp
 8005aa4:	d16e      	bne.n	8005b84 <_strtod_l+0x97c>
 8005aa6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005aa8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005aac:	b342      	cbz	r2, 8005b00 <_strtod_l+0x8f8>
 8005aae:	4a32      	ldr	r2, [pc, #200]	; (8005b78 <_strtod_l+0x970>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d128      	bne.n	8005b06 <_strtod_l+0x8fe>
 8005ab4:	9b04      	ldr	r3, [sp, #16]
 8005ab6:	4650      	mov	r0, sl
 8005ab8:	b1eb      	cbz	r3, 8005af6 <_strtod_l+0x8ee>
 8005aba:	4a2d      	ldr	r2, [pc, #180]	; (8005b70 <_strtod_l+0x968>)
 8005abc:	403a      	ands	r2, r7
 8005abe:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005ac2:	f04f 31ff 	mov.w	r1, #4294967295
 8005ac6:	d819      	bhi.n	8005afc <_strtod_l+0x8f4>
 8005ac8:	0d12      	lsrs	r2, r2, #20
 8005aca:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005ace:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad2:	4298      	cmp	r0, r3
 8005ad4:	d117      	bne.n	8005b06 <_strtod_l+0x8fe>
 8005ad6:	4b29      	ldr	r3, [pc, #164]	; (8005b7c <_strtod_l+0x974>)
 8005ad8:	429f      	cmp	r7, r3
 8005ada:	d102      	bne.n	8005ae2 <_strtod_l+0x8da>
 8005adc:	3001      	adds	r0, #1
 8005ade:	f43f addf 	beq.w	80056a0 <_strtod_l+0x498>
 8005ae2:	4b23      	ldr	r3, [pc, #140]	; (8005b70 <_strtod_l+0x968>)
 8005ae4:	403b      	ands	r3, r7
 8005ae6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005aea:	f04f 0a00 	mov.w	sl, #0
 8005aee:	9b04      	ldr	r3, [sp, #16]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1a0      	bne.n	8005a36 <_strtod_l+0x82e>
 8005af4:	e5de      	b.n	80056b4 <_strtod_l+0x4ac>
 8005af6:	f04f 33ff 	mov.w	r3, #4294967295
 8005afa:	e7ea      	b.n	8005ad2 <_strtod_l+0x8ca>
 8005afc:	460b      	mov	r3, r1
 8005afe:	e7e8      	b.n	8005ad2 <_strtod_l+0x8ca>
 8005b00:	ea53 030a 	orrs.w	r3, r3, sl
 8005b04:	d088      	beq.n	8005a18 <_strtod_l+0x810>
 8005b06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b08:	b1db      	cbz	r3, 8005b42 <_strtod_l+0x93a>
 8005b0a:	423b      	tst	r3, r7
 8005b0c:	d0ef      	beq.n	8005aee <_strtod_l+0x8e6>
 8005b0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b10:	9a04      	ldr	r2, [sp, #16]
 8005b12:	4650      	mov	r0, sl
 8005b14:	4659      	mov	r1, fp
 8005b16:	b1c3      	cbz	r3, 8005b4a <_strtod_l+0x942>
 8005b18:	f7ff fb58 	bl	80051cc <sulp>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b24:	f7fa fbca 	bl	80002bc <__adddf3>
 8005b28:	4682      	mov	sl, r0
 8005b2a:	468b      	mov	fp, r1
 8005b2c:	e7df      	b.n	8005aee <_strtod_l+0x8e6>
 8005b2e:	4013      	ands	r3, r2
 8005b30:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005b34:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005b38:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005b3c:	f04f 3aff 	mov.w	sl, #4294967295
 8005b40:	e7d5      	b.n	8005aee <_strtod_l+0x8e6>
 8005b42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b44:	ea13 0f0a 	tst.w	r3, sl
 8005b48:	e7e0      	b.n	8005b0c <_strtod_l+0x904>
 8005b4a:	f7ff fb3f 	bl	80051cc <sulp>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	460b      	mov	r3, r1
 8005b52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b56:	f7fa fbaf 	bl	80002b8 <__aeabi_dsub>
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	4682      	mov	sl, r0
 8005b60:	468b      	mov	fp, r1
 8005b62:	f7fa ffc9 	bl	8000af8 <__aeabi_dcmpeq>
 8005b66:	2800      	cmp	r0, #0
 8005b68:	d0c1      	beq.n	8005aee <_strtod_l+0x8e6>
 8005b6a:	e60e      	b.n	800578a <_strtod_l+0x582>
 8005b6c:	fffffc02 	.word	0xfffffc02
 8005b70:	7ff00000 	.word	0x7ff00000
 8005b74:	39500000 	.word	0x39500000
 8005b78:	000fffff 	.word	0x000fffff
 8005b7c:	7fefffff 	.word	0x7fefffff
 8005b80:	08008e20 	.word	0x08008e20
 8005b84:	4631      	mov	r1, r6
 8005b86:	4628      	mov	r0, r5
 8005b88:	f002 f82e 	bl	8007be8 <__ratio>
 8005b8c:	ec59 8b10 	vmov	r8, r9, d0
 8005b90:	ee10 0a10 	vmov	r0, s0
 8005b94:	2200      	movs	r2, #0
 8005b96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b9a:	4649      	mov	r1, r9
 8005b9c:	f7fa ffc0 	bl	8000b20 <__aeabi_dcmple>
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	d07c      	beq.n	8005c9e <_strtod_l+0xa96>
 8005ba4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d04c      	beq.n	8005c44 <_strtod_l+0xa3c>
 8005baa:	4b95      	ldr	r3, [pc, #596]	; (8005e00 <_strtod_l+0xbf8>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005bb2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005e00 <_strtod_l+0xbf8>
 8005bb6:	f04f 0800 	mov.w	r8, #0
 8005bba:	4b92      	ldr	r3, [pc, #584]	; (8005e04 <_strtod_l+0xbfc>)
 8005bbc:	403b      	ands	r3, r7
 8005bbe:	9311      	str	r3, [sp, #68]	; 0x44
 8005bc0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005bc2:	4b91      	ldr	r3, [pc, #580]	; (8005e08 <_strtod_l+0xc00>)
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	f040 80b2 	bne.w	8005d2e <_strtod_l+0xb26>
 8005bca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005bce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005bd2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005bd6:	ec4b ab10 	vmov	d0, sl, fp
 8005bda:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8005bde:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005be2:	f001 ff29 	bl	8007a38 <__ulp>
 8005be6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005bea:	ec53 2b10 	vmov	r2, r3, d0
 8005bee:	f7fa fd1b 	bl	8000628 <__aeabi_dmul>
 8005bf2:	4652      	mov	r2, sl
 8005bf4:	465b      	mov	r3, fp
 8005bf6:	f7fa fb61 	bl	80002bc <__adddf3>
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	4981      	ldr	r1, [pc, #516]	; (8005e04 <_strtod_l+0xbfc>)
 8005bfe:	4a83      	ldr	r2, [pc, #524]	; (8005e0c <_strtod_l+0xc04>)
 8005c00:	4019      	ands	r1, r3
 8005c02:	4291      	cmp	r1, r2
 8005c04:	4682      	mov	sl, r0
 8005c06:	d95e      	bls.n	8005cc6 <_strtod_l+0xabe>
 8005c08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c0a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d103      	bne.n	8005c1a <_strtod_l+0xa12>
 8005c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c14:	3301      	adds	r3, #1
 8005c16:	f43f ad43 	beq.w	80056a0 <_strtod_l+0x498>
 8005c1a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8005e18 <_strtod_l+0xc10>
 8005c1e:	f04f 3aff 	mov.w	sl, #4294967295
 8005c22:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005c24:	4620      	mov	r0, r4
 8005c26:	f001 fbdb 	bl	80073e0 <_Bfree>
 8005c2a:	9907      	ldr	r1, [sp, #28]
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	f001 fbd7 	bl	80073e0 <_Bfree>
 8005c32:	4631      	mov	r1, r6
 8005c34:	4620      	mov	r0, r4
 8005c36:	f001 fbd3 	bl	80073e0 <_Bfree>
 8005c3a:	4629      	mov	r1, r5
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f001 fbcf 	bl	80073e0 <_Bfree>
 8005c42:	e613      	b.n	800586c <_strtod_l+0x664>
 8005c44:	f1ba 0f00 	cmp.w	sl, #0
 8005c48:	d11b      	bne.n	8005c82 <_strtod_l+0xa7a>
 8005c4a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005c4e:	b9f3      	cbnz	r3, 8005c8e <_strtod_l+0xa86>
 8005c50:	4b6b      	ldr	r3, [pc, #428]	; (8005e00 <_strtod_l+0xbf8>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	4640      	mov	r0, r8
 8005c56:	4649      	mov	r1, r9
 8005c58:	f7fa ff58 	bl	8000b0c <__aeabi_dcmplt>
 8005c5c:	b9d0      	cbnz	r0, 8005c94 <_strtod_l+0xa8c>
 8005c5e:	4640      	mov	r0, r8
 8005c60:	4649      	mov	r1, r9
 8005c62:	4b6b      	ldr	r3, [pc, #428]	; (8005e10 <_strtod_l+0xc08>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	f7fa fcdf 	bl	8000628 <__aeabi_dmul>
 8005c6a:	4680      	mov	r8, r0
 8005c6c:	4689      	mov	r9, r1
 8005c6e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005c72:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8005c76:	931b      	str	r3, [sp, #108]	; 0x6c
 8005c78:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8005c7c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005c80:	e79b      	b.n	8005bba <_strtod_l+0x9b2>
 8005c82:	f1ba 0f01 	cmp.w	sl, #1
 8005c86:	d102      	bne.n	8005c8e <_strtod_l+0xa86>
 8005c88:	2f00      	cmp	r7, #0
 8005c8a:	f43f ad7e 	beq.w	800578a <_strtod_l+0x582>
 8005c8e:	4b61      	ldr	r3, [pc, #388]	; (8005e14 <_strtod_l+0xc0c>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	e78c      	b.n	8005bae <_strtod_l+0x9a6>
 8005c94:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005e10 <_strtod_l+0xc08>
 8005c98:	f04f 0800 	mov.w	r8, #0
 8005c9c:	e7e7      	b.n	8005c6e <_strtod_l+0xa66>
 8005c9e:	4b5c      	ldr	r3, [pc, #368]	; (8005e10 <_strtod_l+0xc08>)
 8005ca0:	4640      	mov	r0, r8
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f7fa fcbf 	bl	8000628 <__aeabi_dmul>
 8005caa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005cac:	4680      	mov	r8, r0
 8005cae:	4689      	mov	r9, r1
 8005cb0:	b933      	cbnz	r3, 8005cc0 <_strtod_l+0xab8>
 8005cb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005cb6:	9012      	str	r0, [sp, #72]	; 0x48
 8005cb8:	9313      	str	r3, [sp, #76]	; 0x4c
 8005cba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005cbe:	e7dd      	b.n	8005c7c <_strtod_l+0xa74>
 8005cc0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8005cc4:	e7f9      	b.n	8005cba <_strtod_l+0xab2>
 8005cc6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005cca:	9b04      	ldr	r3, [sp, #16]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1a8      	bne.n	8005c22 <_strtod_l+0xa1a>
 8005cd0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005cd4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005cd6:	0d1b      	lsrs	r3, r3, #20
 8005cd8:	051b      	lsls	r3, r3, #20
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d1a1      	bne.n	8005c22 <_strtod_l+0xa1a>
 8005cde:	4640      	mov	r0, r8
 8005ce0:	4649      	mov	r1, r9
 8005ce2:	f7fa ffe9 	bl	8000cb8 <__aeabi_d2lz>
 8005ce6:	f7fa fc71 	bl	80005cc <__aeabi_l2d>
 8005cea:	4602      	mov	r2, r0
 8005cec:	460b      	mov	r3, r1
 8005cee:	4640      	mov	r0, r8
 8005cf0:	4649      	mov	r1, r9
 8005cf2:	f7fa fae1 	bl	80002b8 <__aeabi_dsub>
 8005cf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005cf8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005cfc:	ea43 030a 	orr.w	r3, r3, sl
 8005d00:	4313      	orrs	r3, r2
 8005d02:	4680      	mov	r8, r0
 8005d04:	4689      	mov	r9, r1
 8005d06:	d053      	beq.n	8005db0 <_strtod_l+0xba8>
 8005d08:	a335      	add	r3, pc, #212	; (adr r3, 8005de0 <_strtod_l+0xbd8>)
 8005d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0e:	f7fa fefd 	bl	8000b0c <__aeabi_dcmplt>
 8005d12:	2800      	cmp	r0, #0
 8005d14:	f47f acce 	bne.w	80056b4 <_strtod_l+0x4ac>
 8005d18:	a333      	add	r3, pc, #204	; (adr r3, 8005de8 <_strtod_l+0xbe0>)
 8005d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1e:	4640      	mov	r0, r8
 8005d20:	4649      	mov	r1, r9
 8005d22:	f7fa ff11 	bl	8000b48 <__aeabi_dcmpgt>
 8005d26:	2800      	cmp	r0, #0
 8005d28:	f43f af7b 	beq.w	8005c22 <_strtod_l+0xa1a>
 8005d2c:	e4c2      	b.n	80056b4 <_strtod_l+0x4ac>
 8005d2e:	9b04      	ldr	r3, [sp, #16]
 8005d30:	b333      	cbz	r3, 8005d80 <_strtod_l+0xb78>
 8005d32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d34:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005d38:	d822      	bhi.n	8005d80 <_strtod_l+0xb78>
 8005d3a:	a32d      	add	r3, pc, #180	; (adr r3, 8005df0 <_strtod_l+0xbe8>)
 8005d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d40:	4640      	mov	r0, r8
 8005d42:	4649      	mov	r1, r9
 8005d44:	f7fa feec 	bl	8000b20 <__aeabi_dcmple>
 8005d48:	b1a0      	cbz	r0, 8005d74 <_strtod_l+0xb6c>
 8005d4a:	4649      	mov	r1, r9
 8005d4c:	4640      	mov	r0, r8
 8005d4e:	f7fa ff43 	bl	8000bd8 <__aeabi_d2uiz>
 8005d52:	2801      	cmp	r0, #1
 8005d54:	bf38      	it	cc
 8005d56:	2001      	movcc	r0, #1
 8005d58:	f7fa fbec 	bl	8000534 <__aeabi_ui2d>
 8005d5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d5e:	4680      	mov	r8, r0
 8005d60:	4689      	mov	r9, r1
 8005d62:	bb13      	cbnz	r3, 8005daa <_strtod_l+0xba2>
 8005d64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d68:	9014      	str	r0, [sp, #80]	; 0x50
 8005d6a:	9315      	str	r3, [sp, #84]	; 0x54
 8005d6c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005d70:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005d74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d76:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005d78:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005d7c:	1a9b      	subs	r3, r3, r2
 8005d7e:	930d      	str	r3, [sp, #52]	; 0x34
 8005d80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d84:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005d88:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005d8c:	f001 fe54 	bl	8007a38 <__ulp>
 8005d90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d94:	ec53 2b10 	vmov	r2, r3, d0
 8005d98:	f7fa fc46 	bl	8000628 <__aeabi_dmul>
 8005d9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005da0:	f7fa fa8c 	bl	80002bc <__adddf3>
 8005da4:	4682      	mov	sl, r0
 8005da6:	468b      	mov	fp, r1
 8005da8:	e78f      	b.n	8005cca <_strtod_l+0xac2>
 8005daa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8005dae:	e7dd      	b.n	8005d6c <_strtod_l+0xb64>
 8005db0:	a311      	add	r3, pc, #68	; (adr r3, 8005df8 <_strtod_l+0xbf0>)
 8005db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db6:	f7fa fea9 	bl	8000b0c <__aeabi_dcmplt>
 8005dba:	e7b4      	b.n	8005d26 <_strtod_l+0xb1e>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	930e      	str	r3, [sp, #56]	; 0x38
 8005dc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005dc2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	f7ff ba65 	b.w	8005294 <_strtod_l+0x8c>
 8005dca:	2b65      	cmp	r3, #101	; 0x65
 8005dcc:	f43f ab5d 	beq.w	800548a <_strtod_l+0x282>
 8005dd0:	2b45      	cmp	r3, #69	; 0x45
 8005dd2:	f43f ab5a 	beq.w	800548a <_strtod_l+0x282>
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f7ff bb92 	b.w	8005500 <_strtod_l+0x2f8>
 8005ddc:	f3af 8000 	nop.w
 8005de0:	94a03595 	.word	0x94a03595
 8005de4:	3fdfffff 	.word	0x3fdfffff
 8005de8:	35afe535 	.word	0x35afe535
 8005dec:	3fe00000 	.word	0x3fe00000
 8005df0:	ffc00000 	.word	0xffc00000
 8005df4:	41dfffff 	.word	0x41dfffff
 8005df8:	94a03595 	.word	0x94a03595
 8005dfc:	3fcfffff 	.word	0x3fcfffff
 8005e00:	3ff00000 	.word	0x3ff00000
 8005e04:	7ff00000 	.word	0x7ff00000
 8005e08:	7fe00000 	.word	0x7fe00000
 8005e0c:	7c9fffff 	.word	0x7c9fffff
 8005e10:	3fe00000 	.word	0x3fe00000
 8005e14:	bff00000 	.word	0xbff00000
 8005e18:	7fefffff 	.word	0x7fefffff

08005e1c <_strtod_r>:
 8005e1c:	4b01      	ldr	r3, [pc, #4]	; (8005e24 <_strtod_r+0x8>)
 8005e1e:	f7ff b9f3 	b.w	8005208 <_strtod_l>
 8005e22:	bf00      	nop
 8005e24:	20000080 	.word	0x20000080

08005e28 <_strtol_l.isra.0>:
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e2e:	d001      	beq.n	8005e34 <_strtol_l.isra.0+0xc>
 8005e30:	2b24      	cmp	r3, #36	; 0x24
 8005e32:	d906      	bls.n	8005e42 <_strtol_l.isra.0+0x1a>
 8005e34:	f7fe faf8 	bl	8004428 <__errno>
 8005e38:	2316      	movs	r3, #22
 8005e3a:	6003      	str	r3, [r0, #0]
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e42:	4f3a      	ldr	r7, [pc, #232]	; (8005f2c <_strtol_l.isra.0+0x104>)
 8005e44:	468e      	mov	lr, r1
 8005e46:	4676      	mov	r6, lr
 8005e48:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005e4c:	5de5      	ldrb	r5, [r4, r7]
 8005e4e:	f015 0508 	ands.w	r5, r5, #8
 8005e52:	d1f8      	bne.n	8005e46 <_strtol_l.isra.0+0x1e>
 8005e54:	2c2d      	cmp	r4, #45	; 0x2d
 8005e56:	d134      	bne.n	8005ec2 <_strtol_l.isra.0+0x9a>
 8005e58:	f89e 4000 	ldrb.w	r4, [lr]
 8005e5c:	f04f 0801 	mov.w	r8, #1
 8005e60:	f106 0e02 	add.w	lr, r6, #2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d05c      	beq.n	8005f22 <_strtol_l.isra.0+0xfa>
 8005e68:	2b10      	cmp	r3, #16
 8005e6a:	d10c      	bne.n	8005e86 <_strtol_l.isra.0+0x5e>
 8005e6c:	2c30      	cmp	r4, #48	; 0x30
 8005e6e:	d10a      	bne.n	8005e86 <_strtol_l.isra.0+0x5e>
 8005e70:	f89e 4000 	ldrb.w	r4, [lr]
 8005e74:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005e78:	2c58      	cmp	r4, #88	; 0x58
 8005e7a:	d14d      	bne.n	8005f18 <_strtol_l.isra.0+0xf0>
 8005e7c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8005e80:	2310      	movs	r3, #16
 8005e82:	f10e 0e02 	add.w	lr, lr, #2
 8005e86:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8005e8a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005e8e:	2600      	movs	r6, #0
 8005e90:	fbbc f9f3 	udiv	r9, ip, r3
 8005e94:	4635      	mov	r5, r6
 8005e96:	fb03 ca19 	mls	sl, r3, r9, ip
 8005e9a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005e9e:	2f09      	cmp	r7, #9
 8005ea0:	d818      	bhi.n	8005ed4 <_strtol_l.isra.0+0xac>
 8005ea2:	463c      	mov	r4, r7
 8005ea4:	42a3      	cmp	r3, r4
 8005ea6:	dd24      	ble.n	8005ef2 <_strtol_l.isra.0+0xca>
 8005ea8:	2e00      	cmp	r6, #0
 8005eaa:	db1f      	blt.n	8005eec <_strtol_l.isra.0+0xc4>
 8005eac:	45a9      	cmp	r9, r5
 8005eae:	d31d      	bcc.n	8005eec <_strtol_l.isra.0+0xc4>
 8005eb0:	d101      	bne.n	8005eb6 <_strtol_l.isra.0+0x8e>
 8005eb2:	45a2      	cmp	sl, r4
 8005eb4:	db1a      	blt.n	8005eec <_strtol_l.isra.0+0xc4>
 8005eb6:	fb05 4503 	mla	r5, r5, r3, r4
 8005eba:	2601      	movs	r6, #1
 8005ebc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005ec0:	e7eb      	b.n	8005e9a <_strtol_l.isra.0+0x72>
 8005ec2:	2c2b      	cmp	r4, #43	; 0x2b
 8005ec4:	bf08      	it	eq
 8005ec6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8005eca:	46a8      	mov	r8, r5
 8005ecc:	bf08      	it	eq
 8005ece:	f106 0e02 	addeq.w	lr, r6, #2
 8005ed2:	e7c7      	b.n	8005e64 <_strtol_l.isra.0+0x3c>
 8005ed4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005ed8:	2f19      	cmp	r7, #25
 8005eda:	d801      	bhi.n	8005ee0 <_strtol_l.isra.0+0xb8>
 8005edc:	3c37      	subs	r4, #55	; 0x37
 8005ede:	e7e1      	b.n	8005ea4 <_strtol_l.isra.0+0x7c>
 8005ee0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005ee4:	2f19      	cmp	r7, #25
 8005ee6:	d804      	bhi.n	8005ef2 <_strtol_l.isra.0+0xca>
 8005ee8:	3c57      	subs	r4, #87	; 0x57
 8005eea:	e7db      	b.n	8005ea4 <_strtol_l.isra.0+0x7c>
 8005eec:	f04f 36ff 	mov.w	r6, #4294967295
 8005ef0:	e7e4      	b.n	8005ebc <_strtol_l.isra.0+0x94>
 8005ef2:	2e00      	cmp	r6, #0
 8005ef4:	da05      	bge.n	8005f02 <_strtol_l.isra.0+0xda>
 8005ef6:	2322      	movs	r3, #34	; 0x22
 8005ef8:	6003      	str	r3, [r0, #0]
 8005efa:	4665      	mov	r5, ip
 8005efc:	b942      	cbnz	r2, 8005f10 <_strtol_l.isra.0+0xe8>
 8005efe:	4628      	mov	r0, r5
 8005f00:	e79d      	b.n	8005e3e <_strtol_l.isra.0+0x16>
 8005f02:	f1b8 0f00 	cmp.w	r8, #0
 8005f06:	d000      	beq.n	8005f0a <_strtol_l.isra.0+0xe2>
 8005f08:	426d      	negs	r5, r5
 8005f0a:	2a00      	cmp	r2, #0
 8005f0c:	d0f7      	beq.n	8005efe <_strtol_l.isra.0+0xd6>
 8005f0e:	b10e      	cbz	r6, 8005f14 <_strtol_l.isra.0+0xec>
 8005f10:	f10e 31ff 	add.w	r1, lr, #4294967295
 8005f14:	6011      	str	r1, [r2, #0]
 8005f16:	e7f2      	b.n	8005efe <_strtol_l.isra.0+0xd6>
 8005f18:	2430      	movs	r4, #48	; 0x30
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1b3      	bne.n	8005e86 <_strtol_l.isra.0+0x5e>
 8005f1e:	2308      	movs	r3, #8
 8005f20:	e7b1      	b.n	8005e86 <_strtol_l.isra.0+0x5e>
 8005f22:	2c30      	cmp	r4, #48	; 0x30
 8005f24:	d0a4      	beq.n	8005e70 <_strtol_l.isra.0+0x48>
 8005f26:	230a      	movs	r3, #10
 8005f28:	e7ad      	b.n	8005e86 <_strtol_l.isra.0+0x5e>
 8005f2a:	bf00      	nop
 8005f2c:	08008e49 	.word	0x08008e49

08005f30 <_strtol_r>:
 8005f30:	f7ff bf7a 	b.w	8005e28 <_strtol_l.isra.0>

08005f34 <quorem>:
 8005f34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f38:	6903      	ldr	r3, [r0, #16]
 8005f3a:	690c      	ldr	r4, [r1, #16]
 8005f3c:	42a3      	cmp	r3, r4
 8005f3e:	4607      	mov	r7, r0
 8005f40:	f2c0 8081 	blt.w	8006046 <quorem+0x112>
 8005f44:	3c01      	subs	r4, #1
 8005f46:	f101 0814 	add.w	r8, r1, #20
 8005f4a:	f100 0514 	add.w	r5, r0, #20
 8005f4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f52:	9301      	str	r3, [sp, #4]
 8005f54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005f64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f68:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f6c:	d331      	bcc.n	8005fd2 <quorem+0x9e>
 8005f6e:	f04f 0e00 	mov.w	lr, #0
 8005f72:	4640      	mov	r0, r8
 8005f74:	46ac      	mov	ip, r5
 8005f76:	46f2      	mov	sl, lr
 8005f78:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f7c:	b293      	uxth	r3, r2
 8005f7e:	fb06 e303 	mla	r3, r6, r3, lr
 8005f82:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	ebaa 0303 	sub.w	r3, sl, r3
 8005f8c:	0c12      	lsrs	r2, r2, #16
 8005f8e:	f8dc a000 	ldr.w	sl, [ip]
 8005f92:	fb06 e202 	mla	r2, r6, r2, lr
 8005f96:	fa13 f38a 	uxtah	r3, r3, sl
 8005f9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f9e:	fa1f fa82 	uxth.w	sl, r2
 8005fa2:	f8dc 2000 	ldr.w	r2, [ip]
 8005fa6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005faa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fb4:	4581      	cmp	r9, r0
 8005fb6:	f84c 3b04 	str.w	r3, [ip], #4
 8005fba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005fbe:	d2db      	bcs.n	8005f78 <quorem+0x44>
 8005fc0:	f855 300b 	ldr.w	r3, [r5, fp]
 8005fc4:	b92b      	cbnz	r3, 8005fd2 <quorem+0x9e>
 8005fc6:	9b01      	ldr	r3, [sp, #4]
 8005fc8:	3b04      	subs	r3, #4
 8005fca:	429d      	cmp	r5, r3
 8005fcc:	461a      	mov	r2, r3
 8005fce:	d32e      	bcc.n	800602e <quorem+0xfa>
 8005fd0:	613c      	str	r4, [r7, #16]
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	f001 fc8c 	bl	80078f0 <__mcmp>
 8005fd8:	2800      	cmp	r0, #0
 8005fda:	db24      	blt.n	8006026 <quorem+0xf2>
 8005fdc:	3601      	adds	r6, #1
 8005fde:	4628      	mov	r0, r5
 8005fe0:	f04f 0c00 	mov.w	ip, #0
 8005fe4:	f858 2b04 	ldr.w	r2, [r8], #4
 8005fe8:	f8d0 e000 	ldr.w	lr, [r0]
 8005fec:	b293      	uxth	r3, r2
 8005fee:	ebac 0303 	sub.w	r3, ip, r3
 8005ff2:	0c12      	lsrs	r2, r2, #16
 8005ff4:	fa13 f38e 	uxtah	r3, r3, lr
 8005ff8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005ffc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006000:	b29b      	uxth	r3, r3
 8006002:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006006:	45c1      	cmp	r9, r8
 8006008:	f840 3b04 	str.w	r3, [r0], #4
 800600c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006010:	d2e8      	bcs.n	8005fe4 <quorem+0xb0>
 8006012:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006016:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800601a:	b922      	cbnz	r2, 8006026 <quorem+0xf2>
 800601c:	3b04      	subs	r3, #4
 800601e:	429d      	cmp	r5, r3
 8006020:	461a      	mov	r2, r3
 8006022:	d30a      	bcc.n	800603a <quorem+0x106>
 8006024:	613c      	str	r4, [r7, #16]
 8006026:	4630      	mov	r0, r6
 8006028:	b003      	add	sp, #12
 800602a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800602e:	6812      	ldr	r2, [r2, #0]
 8006030:	3b04      	subs	r3, #4
 8006032:	2a00      	cmp	r2, #0
 8006034:	d1cc      	bne.n	8005fd0 <quorem+0x9c>
 8006036:	3c01      	subs	r4, #1
 8006038:	e7c7      	b.n	8005fca <quorem+0x96>
 800603a:	6812      	ldr	r2, [r2, #0]
 800603c:	3b04      	subs	r3, #4
 800603e:	2a00      	cmp	r2, #0
 8006040:	d1f0      	bne.n	8006024 <quorem+0xf0>
 8006042:	3c01      	subs	r4, #1
 8006044:	e7eb      	b.n	800601e <quorem+0xea>
 8006046:	2000      	movs	r0, #0
 8006048:	e7ee      	b.n	8006028 <quorem+0xf4>
 800604a:	0000      	movs	r0, r0
 800604c:	0000      	movs	r0, r0
	...

08006050 <_dtoa_r>:
 8006050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006054:	ed2d 8b02 	vpush	{d8}
 8006058:	ec57 6b10 	vmov	r6, r7, d0
 800605c:	b095      	sub	sp, #84	; 0x54
 800605e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006060:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006064:	9105      	str	r1, [sp, #20]
 8006066:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800606a:	4604      	mov	r4, r0
 800606c:	9209      	str	r2, [sp, #36]	; 0x24
 800606e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006070:	b975      	cbnz	r5, 8006090 <_dtoa_r+0x40>
 8006072:	2010      	movs	r0, #16
 8006074:	f001 f94c 	bl	8007310 <malloc>
 8006078:	4602      	mov	r2, r0
 800607a:	6260      	str	r0, [r4, #36]	; 0x24
 800607c:	b920      	cbnz	r0, 8006088 <_dtoa_r+0x38>
 800607e:	4bb2      	ldr	r3, [pc, #712]	; (8006348 <_dtoa_r+0x2f8>)
 8006080:	21ea      	movs	r1, #234	; 0xea
 8006082:	48b2      	ldr	r0, [pc, #712]	; (800634c <_dtoa_r+0x2fc>)
 8006084:	f002 f874 	bl	8008170 <__assert_func>
 8006088:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800608c:	6005      	str	r5, [r0, #0]
 800608e:	60c5      	str	r5, [r0, #12]
 8006090:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006092:	6819      	ldr	r1, [r3, #0]
 8006094:	b151      	cbz	r1, 80060ac <_dtoa_r+0x5c>
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	604a      	str	r2, [r1, #4]
 800609a:	2301      	movs	r3, #1
 800609c:	4093      	lsls	r3, r2
 800609e:	608b      	str	r3, [r1, #8]
 80060a0:	4620      	mov	r0, r4
 80060a2:	f001 f99d 	bl	80073e0 <_Bfree>
 80060a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060a8:	2200      	movs	r2, #0
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	1e3b      	subs	r3, r7, #0
 80060ae:	bfb9      	ittee	lt
 80060b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80060b4:	9303      	strlt	r3, [sp, #12]
 80060b6:	2300      	movge	r3, #0
 80060b8:	f8c8 3000 	strge.w	r3, [r8]
 80060bc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80060c0:	4ba3      	ldr	r3, [pc, #652]	; (8006350 <_dtoa_r+0x300>)
 80060c2:	bfbc      	itt	lt
 80060c4:	2201      	movlt	r2, #1
 80060c6:	f8c8 2000 	strlt.w	r2, [r8]
 80060ca:	ea33 0309 	bics.w	r3, r3, r9
 80060ce:	d11b      	bne.n	8006108 <_dtoa_r+0xb8>
 80060d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80060d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80060d6:	6013      	str	r3, [r2, #0]
 80060d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80060dc:	4333      	orrs	r3, r6
 80060de:	f000 857a 	beq.w	8006bd6 <_dtoa_r+0xb86>
 80060e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060e4:	b963      	cbnz	r3, 8006100 <_dtoa_r+0xb0>
 80060e6:	4b9b      	ldr	r3, [pc, #620]	; (8006354 <_dtoa_r+0x304>)
 80060e8:	e024      	b.n	8006134 <_dtoa_r+0xe4>
 80060ea:	4b9b      	ldr	r3, [pc, #620]	; (8006358 <_dtoa_r+0x308>)
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	3308      	adds	r3, #8
 80060f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80060f2:	6013      	str	r3, [r2, #0]
 80060f4:	9800      	ldr	r0, [sp, #0]
 80060f6:	b015      	add	sp, #84	; 0x54
 80060f8:	ecbd 8b02 	vpop	{d8}
 80060fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006100:	4b94      	ldr	r3, [pc, #592]	; (8006354 <_dtoa_r+0x304>)
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	3303      	adds	r3, #3
 8006106:	e7f3      	b.n	80060f0 <_dtoa_r+0xa0>
 8006108:	ed9d 7b02 	vldr	d7, [sp, #8]
 800610c:	2200      	movs	r2, #0
 800610e:	ec51 0b17 	vmov	r0, r1, d7
 8006112:	2300      	movs	r3, #0
 8006114:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006118:	f7fa fcee 	bl	8000af8 <__aeabi_dcmpeq>
 800611c:	4680      	mov	r8, r0
 800611e:	b158      	cbz	r0, 8006138 <_dtoa_r+0xe8>
 8006120:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006122:	2301      	movs	r3, #1
 8006124:	6013      	str	r3, [r2, #0]
 8006126:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 8551 	beq.w	8006bd0 <_dtoa_r+0xb80>
 800612e:	488b      	ldr	r0, [pc, #556]	; (800635c <_dtoa_r+0x30c>)
 8006130:	6018      	str	r0, [r3, #0]
 8006132:	1e43      	subs	r3, r0, #1
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	e7dd      	b.n	80060f4 <_dtoa_r+0xa4>
 8006138:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800613c:	aa12      	add	r2, sp, #72	; 0x48
 800613e:	a913      	add	r1, sp, #76	; 0x4c
 8006140:	4620      	mov	r0, r4
 8006142:	f001 fcf5 	bl	8007b30 <__d2b>
 8006146:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800614a:	4683      	mov	fp, r0
 800614c:	2d00      	cmp	r5, #0
 800614e:	d07c      	beq.n	800624a <_dtoa_r+0x1fa>
 8006150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006152:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006156:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800615a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800615e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006162:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006166:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800616a:	4b7d      	ldr	r3, [pc, #500]	; (8006360 <_dtoa_r+0x310>)
 800616c:	2200      	movs	r2, #0
 800616e:	4630      	mov	r0, r6
 8006170:	4639      	mov	r1, r7
 8006172:	f7fa f8a1 	bl	80002b8 <__aeabi_dsub>
 8006176:	a36e      	add	r3, pc, #440	; (adr r3, 8006330 <_dtoa_r+0x2e0>)
 8006178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617c:	f7fa fa54 	bl	8000628 <__aeabi_dmul>
 8006180:	a36d      	add	r3, pc, #436	; (adr r3, 8006338 <_dtoa_r+0x2e8>)
 8006182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006186:	f7fa f899 	bl	80002bc <__adddf3>
 800618a:	4606      	mov	r6, r0
 800618c:	4628      	mov	r0, r5
 800618e:	460f      	mov	r7, r1
 8006190:	f7fa f9e0 	bl	8000554 <__aeabi_i2d>
 8006194:	a36a      	add	r3, pc, #424	; (adr r3, 8006340 <_dtoa_r+0x2f0>)
 8006196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619a:	f7fa fa45 	bl	8000628 <__aeabi_dmul>
 800619e:	4602      	mov	r2, r0
 80061a0:	460b      	mov	r3, r1
 80061a2:	4630      	mov	r0, r6
 80061a4:	4639      	mov	r1, r7
 80061a6:	f7fa f889 	bl	80002bc <__adddf3>
 80061aa:	4606      	mov	r6, r0
 80061ac:	460f      	mov	r7, r1
 80061ae:	f7fa fceb 	bl	8000b88 <__aeabi_d2iz>
 80061b2:	2200      	movs	r2, #0
 80061b4:	4682      	mov	sl, r0
 80061b6:	2300      	movs	r3, #0
 80061b8:	4630      	mov	r0, r6
 80061ba:	4639      	mov	r1, r7
 80061bc:	f7fa fca6 	bl	8000b0c <__aeabi_dcmplt>
 80061c0:	b148      	cbz	r0, 80061d6 <_dtoa_r+0x186>
 80061c2:	4650      	mov	r0, sl
 80061c4:	f7fa f9c6 	bl	8000554 <__aeabi_i2d>
 80061c8:	4632      	mov	r2, r6
 80061ca:	463b      	mov	r3, r7
 80061cc:	f7fa fc94 	bl	8000af8 <__aeabi_dcmpeq>
 80061d0:	b908      	cbnz	r0, 80061d6 <_dtoa_r+0x186>
 80061d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061d6:	f1ba 0f16 	cmp.w	sl, #22
 80061da:	d854      	bhi.n	8006286 <_dtoa_r+0x236>
 80061dc:	4b61      	ldr	r3, [pc, #388]	; (8006364 <_dtoa_r+0x314>)
 80061de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80061e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80061ea:	f7fa fc8f 	bl	8000b0c <__aeabi_dcmplt>
 80061ee:	2800      	cmp	r0, #0
 80061f0:	d04b      	beq.n	800628a <_dtoa_r+0x23a>
 80061f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061f6:	2300      	movs	r3, #0
 80061f8:	930e      	str	r3, [sp, #56]	; 0x38
 80061fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80061fc:	1b5d      	subs	r5, r3, r5
 80061fe:	1e6b      	subs	r3, r5, #1
 8006200:	9304      	str	r3, [sp, #16]
 8006202:	bf43      	ittte	mi
 8006204:	2300      	movmi	r3, #0
 8006206:	f1c5 0801 	rsbmi	r8, r5, #1
 800620a:	9304      	strmi	r3, [sp, #16]
 800620c:	f04f 0800 	movpl.w	r8, #0
 8006210:	f1ba 0f00 	cmp.w	sl, #0
 8006214:	db3b      	blt.n	800628e <_dtoa_r+0x23e>
 8006216:	9b04      	ldr	r3, [sp, #16]
 8006218:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800621c:	4453      	add	r3, sl
 800621e:	9304      	str	r3, [sp, #16]
 8006220:	2300      	movs	r3, #0
 8006222:	9306      	str	r3, [sp, #24]
 8006224:	9b05      	ldr	r3, [sp, #20]
 8006226:	2b09      	cmp	r3, #9
 8006228:	d869      	bhi.n	80062fe <_dtoa_r+0x2ae>
 800622a:	2b05      	cmp	r3, #5
 800622c:	bfc4      	itt	gt
 800622e:	3b04      	subgt	r3, #4
 8006230:	9305      	strgt	r3, [sp, #20]
 8006232:	9b05      	ldr	r3, [sp, #20]
 8006234:	f1a3 0302 	sub.w	r3, r3, #2
 8006238:	bfcc      	ite	gt
 800623a:	2500      	movgt	r5, #0
 800623c:	2501      	movle	r5, #1
 800623e:	2b03      	cmp	r3, #3
 8006240:	d869      	bhi.n	8006316 <_dtoa_r+0x2c6>
 8006242:	e8df f003 	tbb	[pc, r3]
 8006246:	4e2c      	.short	0x4e2c
 8006248:	5a4c      	.short	0x5a4c
 800624a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800624e:	441d      	add	r5, r3
 8006250:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006254:	2b20      	cmp	r3, #32
 8006256:	bfc1      	itttt	gt
 8006258:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800625c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006260:	fa09 f303 	lslgt.w	r3, r9, r3
 8006264:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006268:	bfda      	itte	le
 800626a:	f1c3 0320 	rsble	r3, r3, #32
 800626e:	fa06 f003 	lslle.w	r0, r6, r3
 8006272:	4318      	orrgt	r0, r3
 8006274:	f7fa f95e 	bl	8000534 <__aeabi_ui2d>
 8006278:	2301      	movs	r3, #1
 800627a:	4606      	mov	r6, r0
 800627c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006280:	3d01      	subs	r5, #1
 8006282:	9310      	str	r3, [sp, #64]	; 0x40
 8006284:	e771      	b.n	800616a <_dtoa_r+0x11a>
 8006286:	2301      	movs	r3, #1
 8006288:	e7b6      	b.n	80061f8 <_dtoa_r+0x1a8>
 800628a:	900e      	str	r0, [sp, #56]	; 0x38
 800628c:	e7b5      	b.n	80061fa <_dtoa_r+0x1aa>
 800628e:	f1ca 0300 	rsb	r3, sl, #0
 8006292:	9306      	str	r3, [sp, #24]
 8006294:	2300      	movs	r3, #0
 8006296:	eba8 080a 	sub.w	r8, r8, sl
 800629a:	930d      	str	r3, [sp, #52]	; 0x34
 800629c:	e7c2      	b.n	8006224 <_dtoa_r+0x1d4>
 800629e:	2300      	movs	r3, #0
 80062a0:	9308      	str	r3, [sp, #32]
 80062a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	dc39      	bgt.n	800631c <_dtoa_r+0x2cc>
 80062a8:	f04f 0901 	mov.w	r9, #1
 80062ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80062b0:	464b      	mov	r3, r9
 80062b2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80062b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80062b8:	2200      	movs	r2, #0
 80062ba:	6042      	str	r2, [r0, #4]
 80062bc:	2204      	movs	r2, #4
 80062be:	f102 0614 	add.w	r6, r2, #20
 80062c2:	429e      	cmp	r6, r3
 80062c4:	6841      	ldr	r1, [r0, #4]
 80062c6:	d92f      	bls.n	8006328 <_dtoa_r+0x2d8>
 80062c8:	4620      	mov	r0, r4
 80062ca:	f001 f849 	bl	8007360 <_Balloc>
 80062ce:	9000      	str	r0, [sp, #0]
 80062d0:	2800      	cmp	r0, #0
 80062d2:	d14b      	bne.n	800636c <_dtoa_r+0x31c>
 80062d4:	4b24      	ldr	r3, [pc, #144]	; (8006368 <_dtoa_r+0x318>)
 80062d6:	4602      	mov	r2, r0
 80062d8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80062dc:	e6d1      	b.n	8006082 <_dtoa_r+0x32>
 80062de:	2301      	movs	r3, #1
 80062e0:	e7de      	b.n	80062a0 <_dtoa_r+0x250>
 80062e2:	2300      	movs	r3, #0
 80062e4:	9308      	str	r3, [sp, #32]
 80062e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062e8:	eb0a 0903 	add.w	r9, sl, r3
 80062ec:	f109 0301 	add.w	r3, r9, #1
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	9301      	str	r3, [sp, #4]
 80062f4:	bfb8      	it	lt
 80062f6:	2301      	movlt	r3, #1
 80062f8:	e7dd      	b.n	80062b6 <_dtoa_r+0x266>
 80062fa:	2301      	movs	r3, #1
 80062fc:	e7f2      	b.n	80062e4 <_dtoa_r+0x294>
 80062fe:	2501      	movs	r5, #1
 8006300:	2300      	movs	r3, #0
 8006302:	9305      	str	r3, [sp, #20]
 8006304:	9508      	str	r5, [sp, #32]
 8006306:	f04f 39ff 	mov.w	r9, #4294967295
 800630a:	2200      	movs	r2, #0
 800630c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006310:	2312      	movs	r3, #18
 8006312:	9209      	str	r2, [sp, #36]	; 0x24
 8006314:	e7cf      	b.n	80062b6 <_dtoa_r+0x266>
 8006316:	2301      	movs	r3, #1
 8006318:	9308      	str	r3, [sp, #32]
 800631a:	e7f4      	b.n	8006306 <_dtoa_r+0x2b6>
 800631c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006320:	f8cd 9004 	str.w	r9, [sp, #4]
 8006324:	464b      	mov	r3, r9
 8006326:	e7c6      	b.n	80062b6 <_dtoa_r+0x266>
 8006328:	3101      	adds	r1, #1
 800632a:	6041      	str	r1, [r0, #4]
 800632c:	0052      	lsls	r2, r2, #1
 800632e:	e7c6      	b.n	80062be <_dtoa_r+0x26e>
 8006330:	636f4361 	.word	0x636f4361
 8006334:	3fd287a7 	.word	0x3fd287a7
 8006338:	8b60c8b3 	.word	0x8b60c8b3
 800633c:	3fc68a28 	.word	0x3fc68a28
 8006340:	509f79fb 	.word	0x509f79fb
 8006344:	3fd34413 	.word	0x3fd34413
 8006348:	08008f56 	.word	0x08008f56
 800634c:	08008f6d 	.word	0x08008f6d
 8006350:	7ff00000 	.word	0x7ff00000
 8006354:	08008f52 	.word	0x08008f52
 8006358:	08008f49 	.word	0x08008f49
 800635c:	08008dc9 	.word	0x08008dc9
 8006360:	3ff80000 	.word	0x3ff80000
 8006364:	080090e8 	.word	0x080090e8
 8006368:	08008fcc 	.word	0x08008fcc
 800636c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800636e:	9a00      	ldr	r2, [sp, #0]
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	9b01      	ldr	r3, [sp, #4]
 8006374:	2b0e      	cmp	r3, #14
 8006376:	f200 80ad 	bhi.w	80064d4 <_dtoa_r+0x484>
 800637a:	2d00      	cmp	r5, #0
 800637c:	f000 80aa 	beq.w	80064d4 <_dtoa_r+0x484>
 8006380:	f1ba 0f00 	cmp.w	sl, #0
 8006384:	dd36      	ble.n	80063f4 <_dtoa_r+0x3a4>
 8006386:	4ac3      	ldr	r2, [pc, #780]	; (8006694 <_dtoa_r+0x644>)
 8006388:	f00a 030f 	and.w	r3, sl, #15
 800638c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006390:	ed93 7b00 	vldr	d7, [r3]
 8006394:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006398:	ea4f 172a 	mov.w	r7, sl, asr #4
 800639c:	eeb0 8a47 	vmov.f32	s16, s14
 80063a0:	eef0 8a67 	vmov.f32	s17, s15
 80063a4:	d016      	beq.n	80063d4 <_dtoa_r+0x384>
 80063a6:	4bbc      	ldr	r3, [pc, #752]	; (8006698 <_dtoa_r+0x648>)
 80063a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80063ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80063b0:	f7fa fa64 	bl	800087c <__aeabi_ddiv>
 80063b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063b8:	f007 070f 	and.w	r7, r7, #15
 80063bc:	2503      	movs	r5, #3
 80063be:	4eb6      	ldr	r6, [pc, #728]	; (8006698 <_dtoa_r+0x648>)
 80063c0:	b957      	cbnz	r7, 80063d8 <_dtoa_r+0x388>
 80063c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063c6:	ec53 2b18 	vmov	r2, r3, d8
 80063ca:	f7fa fa57 	bl	800087c <__aeabi_ddiv>
 80063ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063d2:	e029      	b.n	8006428 <_dtoa_r+0x3d8>
 80063d4:	2502      	movs	r5, #2
 80063d6:	e7f2      	b.n	80063be <_dtoa_r+0x36e>
 80063d8:	07f9      	lsls	r1, r7, #31
 80063da:	d508      	bpl.n	80063ee <_dtoa_r+0x39e>
 80063dc:	ec51 0b18 	vmov	r0, r1, d8
 80063e0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80063e4:	f7fa f920 	bl	8000628 <__aeabi_dmul>
 80063e8:	ec41 0b18 	vmov	d8, r0, r1
 80063ec:	3501      	adds	r5, #1
 80063ee:	107f      	asrs	r7, r7, #1
 80063f0:	3608      	adds	r6, #8
 80063f2:	e7e5      	b.n	80063c0 <_dtoa_r+0x370>
 80063f4:	f000 80a6 	beq.w	8006544 <_dtoa_r+0x4f4>
 80063f8:	f1ca 0600 	rsb	r6, sl, #0
 80063fc:	4ba5      	ldr	r3, [pc, #660]	; (8006694 <_dtoa_r+0x644>)
 80063fe:	4fa6      	ldr	r7, [pc, #664]	; (8006698 <_dtoa_r+0x648>)
 8006400:	f006 020f 	and.w	r2, r6, #15
 8006404:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006410:	f7fa f90a 	bl	8000628 <__aeabi_dmul>
 8006414:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006418:	1136      	asrs	r6, r6, #4
 800641a:	2300      	movs	r3, #0
 800641c:	2502      	movs	r5, #2
 800641e:	2e00      	cmp	r6, #0
 8006420:	f040 8085 	bne.w	800652e <_dtoa_r+0x4de>
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1d2      	bne.n	80063ce <_dtoa_r+0x37e>
 8006428:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800642a:	2b00      	cmp	r3, #0
 800642c:	f000 808c 	beq.w	8006548 <_dtoa_r+0x4f8>
 8006430:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006434:	4b99      	ldr	r3, [pc, #612]	; (800669c <_dtoa_r+0x64c>)
 8006436:	2200      	movs	r2, #0
 8006438:	4630      	mov	r0, r6
 800643a:	4639      	mov	r1, r7
 800643c:	f7fa fb66 	bl	8000b0c <__aeabi_dcmplt>
 8006440:	2800      	cmp	r0, #0
 8006442:	f000 8081 	beq.w	8006548 <_dtoa_r+0x4f8>
 8006446:	9b01      	ldr	r3, [sp, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d07d      	beq.n	8006548 <_dtoa_r+0x4f8>
 800644c:	f1b9 0f00 	cmp.w	r9, #0
 8006450:	dd3c      	ble.n	80064cc <_dtoa_r+0x47c>
 8006452:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006456:	9307      	str	r3, [sp, #28]
 8006458:	2200      	movs	r2, #0
 800645a:	4b91      	ldr	r3, [pc, #580]	; (80066a0 <_dtoa_r+0x650>)
 800645c:	4630      	mov	r0, r6
 800645e:	4639      	mov	r1, r7
 8006460:	f7fa f8e2 	bl	8000628 <__aeabi_dmul>
 8006464:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006468:	3501      	adds	r5, #1
 800646a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800646e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006472:	4628      	mov	r0, r5
 8006474:	f7fa f86e 	bl	8000554 <__aeabi_i2d>
 8006478:	4632      	mov	r2, r6
 800647a:	463b      	mov	r3, r7
 800647c:	f7fa f8d4 	bl	8000628 <__aeabi_dmul>
 8006480:	4b88      	ldr	r3, [pc, #544]	; (80066a4 <_dtoa_r+0x654>)
 8006482:	2200      	movs	r2, #0
 8006484:	f7f9 ff1a 	bl	80002bc <__adddf3>
 8006488:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800648c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006490:	9303      	str	r3, [sp, #12]
 8006492:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006494:	2b00      	cmp	r3, #0
 8006496:	d15c      	bne.n	8006552 <_dtoa_r+0x502>
 8006498:	4b83      	ldr	r3, [pc, #524]	; (80066a8 <_dtoa_r+0x658>)
 800649a:	2200      	movs	r2, #0
 800649c:	4630      	mov	r0, r6
 800649e:	4639      	mov	r1, r7
 80064a0:	f7f9 ff0a 	bl	80002b8 <__aeabi_dsub>
 80064a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064a8:	4606      	mov	r6, r0
 80064aa:	460f      	mov	r7, r1
 80064ac:	f7fa fb4c 	bl	8000b48 <__aeabi_dcmpgt>
 80064b0:	2800      	cmp	r0, #0
 80064b2:	f040 8296 	bne.w	80069e2 <_dtoa_r+0x992>
 80064b6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80064ba:	4630      	mov	r0, r6
 80064bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80064c0:	4639      	mov	r1, r7
 80064c2:	f7fa fb23 	bl	8000b0c <__aeabi_dcmplt>
 80064c6:	2800      	cmp	r0, #0
 80064c8:	f040 8288 	bne.w	80069dc <_dtoa_r+0x98c>
 80064cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80064d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80064d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f2c0 8158 	blt.w	800678c <_dtoa_r+0x73c>
 80064dc:	f1ba 0f0e 	cmp.w	sl, #14
 80064e0:	f300 8154 	bgt.w	800678c <_dtoa_r+0x73c>
 80064e4:	4b6b      	ldr	r3, [pc, #428]	; (8006694 <_dtoa_r+0x644>)
 80064e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80064ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 80064ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f280 80e3 	bge.w	80066bc <_dtoa_r+0x66c>
 80064f6:	9b01      	ldr	r3, [sp, #4]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f300 80df 	bgt.w	80066bc <_dtoa_r+0x66c>
 80064fe:	f040 826d 	bne.w	80069dc <_dtoa_r+0x98c>
 8006502:	4b69      	ldr	r3, [pc, #420]	; (80066a8 <_dtoa_r+0x658>)
 8006504:	2200      	movs	r2, #0
 8006506:	4640      	mov	r0, r8
 8006508:	4649      	mov	r1, r9
 800650a:	f7fa f88d 	bl	8000628 <__aeabi_dmul>
 800650e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006512:	f7fa fb0f 	bl	8000b34 <__aeabi_dcmpge>
 8006516:	9e01      	ldr	r6, [sp, #4]
 8006518:	4637      	mov	r7, r6
 800651a:	2800      	cmp	r0, #0
 800651c:	f040 8243 	bne.w	80069a6 <_dtoa_r+0x956>
 8006520:	9d00      	ldr	r5, [sp, #0]
 8006522:	2331      	movs	r3, #49	; 0x31
 8006524:	f805 3b01 	strb.w	r3, [r5], #1
 8006528:	f10a 0a01 	add.w	sl, sl, #1
 800652c:	e23f      	b.n	80069ae <_dtoa_r+0x95e>
 800652e:	07f2      	lsls	r2, r6, #31
 8006530:	d505      	bpl.n	800653e <_dtoa_r+0x4ee>
 8006532:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006536:	f7fa f877 	bl	8000628 <__aeabi_dmul>
 800653a:	3501      	adds	r5, #1
 800653c:	2301      	movs	r3, #1
 800653e:	1076      	asrs	r6, r6, #1
 8006540:	3708      	adds	r7, #8
 8006542:	e76c      	b.n	800641e <_dtoa_r+0x3ce>
 8006544:	2502      	movs	r5, #2
 8006546:	e76f      	b.n	8006428 <_dtoa_r+0x3d8>
 8006548:	9b01      	ldr	r3, [sp, #4]
 800654a:	f8cd a01c 	str.w	sl, [sp, #28]
 800654e:	930c      	str	r3, [sp, #48]	; 0x30
 8006550:	e78d      	b.n	800646e <_dtoa_r+0x41e>
 8006552:	9900      	ldr	r1, [sp, #0]
 8006554:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006556:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006558:	4b4e      	ldr	r3, [pc, #312]	; (8006694 <_dtoa_r+0x644>)
 800655a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800655e:	4401      	add	r1, r0
 8006560:	9102      	str	r1, [sp, #8]
 8006562:	9908      	ldr	r1, [sp, #32]
 8006564:	eeb0 8a47 	vmov.f32	s16, s14
 8006568:	eef0 8a67 	vmov.f32	s17, s15
 800656c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006570:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006574:	2900      	cmp	r1, #0
 8006576:	d045      	beq.n	8006604 <_dtoa_r+0x5b4>
 8006578:	494c      	ldr	r1, [pc, #304]	; (80066ac <_dtoa_r+0x65c>)
 800657a:	2000      	movs	r0, #0
 800657c:	f7fa f97e 	bl	800087c <__aeabi_ddiv>
 8006580:	ec53 2b18 	vmov	r2, r3, d8
 8006584:	f7f9 fe98 	bl	80002b8 <__aeabi_dsub>
 8006588:	9d00      	ldr	r5, [sp, #0]
 800658a:	ec41 0b18 	vmov	d8, r0, r1
 800658e:	4639      	mov	r1, r7
 8006590:	4630      	mov	r0, r6
 8006592:	f7fa faf9 	bl	8000b88 <__aeabi_d2iz>
 8006596:	900c      	str	r0, [sp, #48]	; 0x30
 8006598:	f7f9 ffdc 	bl	8000554 <__aeabi_i2d>
 800659c:	4602      	mov	r2, r0
 800659e:	460b      	mov	r3, r1
 80065a0:	4630      	mov	r0, r6
 80065a2:	4639      	mov	r1, r7
 80065a4:	f7f9 fe88 	bl	80002b8 <__aeabi_dsub>
 80065a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065aa:	3330      	adds	r3, #48	; 0x30
 80065ac:	f805 3b01 	strb.w	r3, [r5], #1
 80065b0:	ec53 2b18 	vmov	r2, r3, d8
 80065b4:	4606      	mov	r6, r0
 80065b6:	460f      	mov	r7, r1
 80065b8:	f7fa faa8 	bl	8000b0c <__aeabi_dcmplt>
 80065bc:	2800      	cmp	r0, #0
 80065be:	d165      	bne.n	800668c <_dtoa_r+0x63c>
 80065c0:	4632      	mov	r2, r6
 80065c2:	463b      	mov	r3, r7
 80065c4:	4935      	ldr	r1, [pc, #212]	; (800669c <_dtoa_r+0x64c>)
 80065c6:	2000      	movs	r0, #0
 80065c8:	f7f9 fe76 	bl	80002b8 <__aeabi_dsub>
 80065cc:	ec53 2b18 	vmov	r2, r3, d8
 80065d0:	f7fa fa9c 	bl	8000b0c <__aeabi_dcmplt>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	f040 80b9 	bne.w	800674c <_dtoa_r+0x6fc>
 80065da:	9b02      	ldr	r3, [sp, #8]
 80065dc:	429d      	cmp	r5, r3
 80065de:	f43f af75 	beq.w	80064cc <_dtoa_r+0x47c>
 80065e2:	4b2f      	ldr	r3, [pc, #188]	; (80066a0 <_dtoa_r+0x650>)
 80065e4:	ec51 0b18 	vmov	r0, r1, d8
 80065e8:	2200      	movs	r2, #0
 80065ea:	f7fa f81d 	bl	8000628 <__aeabi_dmul>
 80065ee:	4b2c      	ldr	r3, [pc, #176]	; (80066a0 <_dtoa_r+0x650>)
 80065f0:	ec41 0b18 	vmov	d8, r0, r1
 80065f4:	2200      	movs	r2, #0
 80065f6:	4630      	mov	r0, r6
 80065f8:	4639      	mov	r1, r7
 80065fa:	f7fa f815 	bl	8000628 <__aeabi_dmul>
 80065fe:	4606      	mov	r6, r0
 8006600:	460f      	mov	r7, r1
 8006602:	e7c4      	b.n	800658e <_dtoa_r+0x53e>
 8006604:	ec51 0b17 	vmov	r0, r1, d7
 8006608:	f7fa f80e 	bl	8000628 <__aeabi_dmul>
 800660c:	9b02      	ldr	r3, [sp, #8]
 800660e:	9d00      	ldr	r5, [sp, #0]
 8006610:	930c      	str	r3, [sp, #48]	; 0x30
 8006612:	ec41 0b18 	vmov	d8, r0, r1
 8006616:	4639      	mov	r1, r7
 8006618:	4630      	mov	r0, r6
 800661a:	f7fa fab5 	bl	8000b88 <__aeabi_d2iz>
 800661e:	9011      	str	r0, [sp, #68]	; 0x44
 8006620:	f7f9 ff98 	bl	8000554 <__aeabi_i2d>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4630      	mov	r0, r6
 800662a:	4639      	mov	r1, r7
 800662c:	f7f9 fe44 	bl	80002b8 <__aeabi_dsub>
 8006630:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006632:	3330      	adds	r3, #48	; 0x30
 8006634:	f805 3b01 	strb.w	r3, [r5], #1
 8006638:	9b02      	ldr	r3, [sp, #8]
 800663a:	429d      	cmp	r5, r3
 800663c:	4606      	mov	r6, r0
 800663e:	460f      	mov	r7, r1
 8006640:	f04f 0200 	mov.w	r2, #0
 8006644:	d134      	bne.n	80066b0 <_dtoa_r+0x660>
 8006646:	4b19      	ldr	r3, [pc, #100]	; (80066ac <_dtoa_r+0x65c>)
 8006648:	ec51 0b18 	vmov	r0, r1, d8
 800664c:	f7f9 fe36 	bl	80002bc <__adddf3>
 8006650:	4602      	mov	r2, r0
 8006652:	460b      	mov	r3, r1
 8006654:	4630      	mov	r0, r6
 8006656:	4639      	mov	r1, r7
 8006658:	f7fa fa76 	bl	8000b48 <__aeabi_dcmpgt>
 800665c:	2800      	cmp	r0, #0
 800665e:	d175      	bne.n	800674c <_dtoa_r+0x6fc>
 8006660:	ec53 2b18 	vmov	r2, r3, d8
 8006664:	4911      	ldr	r1, [pc, #68]	; (80066ac <_dtoa_r+0x65c>)
 8006666:	2000      	movs	r0, #0
 8006668:	f7f9 fe26 	bl	80002b8 <__aeabi_dsub>
 800666c:	4602      	mov	r2, r0
 800666e:	460b      	mov	r3, r1
 8006670:	4630      	mov	r0, r6
 8006672:	4639      	mov	r1, r7
 8006674:	f7fa fa4a 	bl	8000b0c <__aeabi_dcmplt>
 8006678:	2800      	cmp	r0, #0
 800667a:	f43f af27 	beq.w	80064cc <_dtoa_r+0x47c>
 800667e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006680:	1e6b      	subs	r3, r5, #1
 8006682:	930c      	str	r3, [sp, #48]	; 0x30
 8006684:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006688:	2b30      	cmp	r3, #48	; 0x30
 800668a:	d0f8      	beq.n	800667e <_dtoa_r+0x62e>
 800668c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006690:	e04a      	b.n	8006728 <_dtoa_r+0x6d8>
 8006692:	bf00      	nop
 8006694:	080090e8 	.word	0x080090e8
 8006698:	080090c0 	.word	0x080090c0
 800669c:	3ff00000 	.word	0x3ff00000
 80066a0:	40240000 	.word	0x40240000
 80066a4:	401c0000 	.word	0x401c0000
 80066a8:	40140000 	.word	0x40140000
 80066ac:	3fe00000 	.word	0x3fe00000
 80066b0:	4baf      	ldr	r3, [pc, #700]	; (8006970 <_dtoa_r+0x920>)
 80066b2:	f7f9 ffb9 	bl	8000628 <__aeabi_dmul>
 80066b6:	4606      	mov	r6, r0
 80066b8:	460f      	mov	r7, r1
 80066ba:	e7ac      	b.n	8006616 <_dtoa_r+0x5c6>
 80066bc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80066c0:	9d00      	ldr	r5, [sp, #0]
 80066c2:	4642      	mov	r2, r8
 80066c4:	464b      	mov	r3, r9
 80066c6:	4630      	mov	r0, r6
 80066c8:	4639      	mov	r1, r7
 80066ca:	f7fa f8d7 	bl	800087c <__aeabi_ddiv>
 80066ce:	f7fa fa5b 	bl	8000b88 <__aeabi_d2iz>
 80066d2:	9002      	str	r0, [sp, #8]
 80066d4:	f7f9 ff3e 	bl	8000554 <__aeabi_i2d>
 80066d8:	4642      	mov	r2, r8
 80066da:	464b      	mov	r3, r9
 80066dc:	f7f9 ffa4 	bl	8000628 <__aeabi_dmul>
 80066e0:	4602      	mov	r2, r0
 80066e2:	460b      	mov	r3, r1
 80066e4:	4630      	mov	r0, r6
 80066e6:	4639      	mov	r1, r7
 80066e8:	f7f9 fde6 	bl	80002b8 <__aeabi_dsub>
 80066ec:	9e02      	ldr	r6, [sp, #8]
 80066ee:	9f01      	ldr	r7, [sp, #4]
 80066f0:	3630      	adds	r6, #48	; 0x30
 80066f2:	f805 6b01 	strb.w	r6, [r5], #1
 80066f6:	9e00      	ldr	r6, [sp, #0]
 80066f8:	1bae      	subs	r6, r5, r6
 80066fa:	42b7      	cmp	r7, r6
 80066fc:	4602      	mov	r2, r0
 80066fe:	460b      	mov	r3, r1
 8006700:	d137      	bne.n	8006772 <_dtoa_r+0x722>
 8006702:	f7f9 fddb 	bl	80002bc <__adddf3>
 8006706:	4642      	mov	r2, r8
 8006708:	464b      	mov	r3, r9
 800670a:	4606      	mov	r6, r0
 800670c:	460f      	mov	r7, r1
 800670e:	f7fa fa1b 	bl	8000b48 <__aeabi_dcmpgt>
 8006712:	b9c8      	cbnz	r0, 8006748 <_dtoa_r+0x6f8>
 8006714:	4642      	mov	r2, r8
 8006716:	464b      	mov	r3, r9
 8006718:	4630      	mov	r0, r6
 800671a:	4639      	mov	r1, r7
 800671c:	f7fa f9ec 	bl	8000af8 <__aeabi_dcmpeq>
 8006720:	b110      	cbz	r0, 8006728 <_dtoa_r+0x6d8>
 8006722:	9b02      	ldr	r3, [sp, #8]
 8006724:	07d9      	lsls	r1, r3, #31
 8006726:	d40f      	bmi.n	8006748 <_dtoa_r+0x6f8>
 8006728:	4620      	mov	r0, r4
 800672a:	4659      	mov	r1, fp
 800672c:	f000 fe58 	bl	80073e0 <_Bfree>
 8006730:	2300      	movs	r3, #0
 8006732:	702b      	strb	r3, [r5, #0]
 8006734:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006736:	f10a 0001 	add.w	r0, sl, #1
 800673a:	6018      	str	r0, [r3, #0]
 800673c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800673e:	2b00      	cmp	r3, #0
 8006740:	f43f acd8 	beq.w	80060f4 <_dtoa_r+0xa4>
 8006744:	601d      	str	r5, [r3, #0]
 8006746:	e4d5      	b.n	80060f4 <_dtoa_r+0xa4>
 8006748:	f8cd a01c 	str.w	sl, [sp, #28]
 800674c:	462b      	mov	r3, r5
 800674e:	461d      	mov	r5, r3
 8006750:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006754:	2a39      	cmp	r2, #57	; 0x39
 8006756:	d108      	bne.n	800676a <_dtoa_r+0x71a>
 8006758:	9a00      	ldr	r2, [sp, #0]
 800675a:	429a      	cmp	r2, r3
 800675c:	d1f7      	bne.n	800674e <_dtoa_r+0x6fe>
 800675e:	9a07      	ldr	r2, [sp, #28]
 8006760:	9900      	ldr	r1, [sp, #0]
 8006762:	3201      	adds	r2, #1
 8006764:	9207      	str	r2, [sp, #28]
 8006766:	2230      	movs	r2, #48	; 0x30
 8006768:	700a      	strb	r2, [r1, #0]
 800676a:	781a      	ldrb	r2, [r3, #0]
 800676c:	3201      	adds	r2, #1
 800676e:	701a      	strb	r2, [r3, #0]
 8006770:	e78c      	b.n	800668c <_dtoa_r+0x63c>
 8006772:	4b7f      	ldr	r3, [pc, #508]	; (8006970 <_dtoa_r+0x920>)
 8006774:	2200      	movs	r2, #0
 8006776:	f7f9 ff57 	bl	8000628 <__aeabi_dmul>
 800677a:	2200      	movs	r2, #0
 800677c:	2300      	movs	r3, #0
 800677e:	4606      	mov	r6, r0
 8006780:	460f      	mov	r7, r1
 8006782:	f7fa f9b9 	bl	8000af8 <__aeabi_dcmpeq>
 8006786:	2800      	cmp	r0, #0
 8006788:	d09b      	beq.n	80066c2 <_dtoa_r+0x672>
 800678a:	e7cd      	b.n	8006728 <_dtoa_r+0x6d8>
 800678c:	9a08      	ldr	r2, [sp, #32]
 800678e:	2a00      	cmp	r2, #0
 8006790:	f000 80c4 	beq.w	800691c <_dtoa_r+0x8cc>
 8006794:	9a05      	ldr	r2, [sp, #20]
 8006796:	2a01      	cmp	r2, #1
 8006798:	f300 80a8 	bgt.w	80068ec <_dtoa_r+0x89c>
 800679c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800679e:	2a00      	cmp	r2, #0
 80067a0:	f000 80a0 	beq.w	80068e4 <_dtoa_r+0x894>
 80067a4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80067a8:	9e06      	ldr	r6, [sp, #24]
 80067aa:	4645      	mov	r5, r8
 80067ac:	9a04      	ldr	r2, [sp, #16]
 80067ae:	2101      	movs	r1, #1
 80067b0:	441a      	add	r2, r3
 80067b2:	4620      	mov	r0, r4
 80067b4:	4498      	add	r8, r3
 80067b6:	9204      	str	r2, [sp, #16]
 80067b8:	f000 ff18 	bl	80075ec <__i2b>
 80067bc:	4607      	mov	r7, r0
 80067be:	2d00      	cmp	r5, #0
 80067c0:	dd0b      	ble.n	80067da <_dtoa_r+0x78a>
 80067c2:	9b04      	ldr	r3, [sp, #16]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	dd08      	ble.n	80067da <_dtoa_r+0x78a>
 80067c8:	42ab      	cmp	r3, r5
 80067ca:	9a04      	ldr	r2, [sp, #16]
 80067cc:	bfa8      	it	ge
 80067ce:	462b      	movge	r3, r5
 80067d0:	eba8 0803 	sub.w	r8, r8, r3
 80067d4:	1aed      	subs	r5, r5, r3
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	9304      	str	r3, [sp, #16]
 80067da:	9b06      	ldr	r3, [sp, #24]
 80067dc:	b1fb      	cbz	r3, 800681e <_dtoa_r+0x7ce>
 80067de:	9b08      	ldr	r3, [sp, #32]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f000 809f 	beq.w	8006924 <_dtoa_r+0x8d4>
 80067e6:	2e00      	cmp	r6, #0
 80067e8:	dd11      	ble.n	800680e <_dtoa_r+0x7be>
 80067ea:	4639      	mov	r1, r7
 80067ec:	4632      	mov	r2, r6
 80067ee:	4620      	mov	r0, r4
 80067f0:	f000 ffb8 	bl	8007764 <__pow5mult>
 80067f4:	465a      	mov	r2, fp
 80067f6:	4601      	mov	r1, r0
 80067f8:	4607      	mov	r7, r0
 80067fa:	4620      	mov	r0, r4
 80067fc:	f000 ff0c 	bl	8007618 <__multiply>
 8006800:	4659      	mov	r1, fp
 8006802:	9007      	str	r0, [sp, #28]
 8006804:	4620      	mov	r0, r4
 8006806:	f000 fdeb 	bl	80073e0 <_Bfree>
 800680a:	9b07      	ldr	r3, [sp, #28]
 800680c:	469b      	mov	fp, r3
 800680e:	9b06      	ldr	r3, [sp, #24]
 8006810:	1b9a      	subs	r2, r3, r6
 8006812:	d004      	beq.n	800681e <_dtoa_r+0x7ce>
 8006814:	4659      	mov	r1, fp
 8006816:	4620      	mov	r0, r4
 8006818:	f000 ffa4 	bl	8007764 <__pow5mult>
 800681c:	4683      	mov	fp, r0
 800681e:	2101      	movs	r1, #1
 8006820:	4620      	mov	r0, r4
 8006822:	f000 fee3 	bl	80075ec <__i2b>
 8006826:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006828:	2b00      	cmp	r3, #0
 800682a:	4606      	mov	r6, r0
 800682c:	dd7c      	ble.n	8006928 <_dtoa_r+0x8d8>
 800682e:	461a      	mov	r2, r3
 8006830:	4601      	mov	r1, r0
 8006832:	4620      	mov	r0, r4
 8006834:	f000 ff96 	bl	8007764 <__pow5mult>
 8006838:	9b05      	ldr	r3, [sp, #20]
 800683a:	2b01      	cmp	r3, #1
 800683c:	4606      	mov	r6, r0
 800683e:	dd76      	ble.n	800692e <_dtoa_r+0x8de>
 8006840:	2300      	movs	r3, #0
 8006842:	9306      	str	r3, [sp, #24]
 8006844:	6933      	ldr	r3, [r6, #16]
 8006846:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800684a:	6918      	ldr	r0, [r3, #16]
 800684c:	f000 fe7e 	bl	800754c <__hi0bits>
 8006850:	f1c0 0020 	rsb	r0, r0, #32
 8006854:	9b04      	ldr	r3, [sp, #16]
 8006856:	4418      	add	r0, r3
 8006858:	f010 001f 	ands.w	r0, r0, #31
 800685c:	f000 8086 	beq.w	800696c <_dtoa_r+0x91c>
 8006860:	f1c0 0320 	rsb	r3, r0, #32
 8006864:	2b04      	cmp	r3, #4
 8006866:	dd7f      	ble.n	8006968 <_dtoa_r+0x918>
 8006868:	f1c0 001c 	rsb	r0, r0, #28
 800686c:	9b04      	ldr	r3, [sp, #16]
 800686e:	4403      	add	r3, r0
 8006870:	4480      	add	r8, r0
 8006872:	4405      	add	r5, r0
 8006874:	9304      	str	r3, [sp, #16]
 8006876:	f1b8 0f00 	cmp.w	r8, #0
 800687a:	dd05      	ble.n	8006888 <_dtoa_r+0x838>
 800687c:	4659      	mov	r1, fp
 800687e:	4642      	mov	r2, r8
 8006880:	4620      	mov	r0, r4
 8006882:	f000 ffc9 	bl	8007818 <__lshift>
 8006886:	4683      	mov	fp, r0
 8006888:	9b04      	ldr	r3, [sp, #16]
 800688a:	2b00      	cmp	r3, #0
 800688c:	dd05      	ble.n	800689a <_dtoa_r+0x84a>
 800688e:	4631      	mov	r1, r6
 8006890:	461a      	mov	r2, r3
 8006892:	4620      	mov	r0, r4
 8006894:	f000 ffc0 	bl	8007818 <__lshift>
 8006898:	4606      	mov	r6, r0
 800689a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800689c:	2b00      	cmp	r3, #0
 800689e:	d069      	beq.n	8006974 <_dtoa_r+0x924>
 80068a0:	4631      	mov	r1, r6
 80068a2:	4658      	mov	r0, fp
 80068a4:	f001 f824 	bl	80078f0 <__mcmp>
 80068a8:	2800      	cmp	r0, #0
 80068aa:	da63      	bge.n	8006974 <_dtoa_r+0x924>
 80068ac:	2300      	movs	r3, #0
 80068ae:	4659      	mov	r1, fp
 80068b0:	220a      	movs	r2, #10
 80068b2:	4620      	mov	r0, r4
 80068b4:	f000 fdb6 	bl	8007424 <__multadd>
 80068b8:	9b08      	ldr	r3, [sp, #32]
 80068ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068be:	4683      	mov	fp, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 818f 	beq.w	8006be4 <_dtoa_r+0xb94>
 80068c6:	4639      	mov	r1, r7
 80068c8:	2300      	movs	r3, #0
 80068ca:	220a      	movs	r2, #10
 80068cc:	4620      	mov	r0, r4
 80068ce:	f000 fda9 	bl	8007424 <__multadd>
 80068d2:	f1b9 0f00 	cmp.w	r9, #0
 80068d6:	4607      	mov	r7, r0
 80068d8:	f300 808e 	bgt.w	80069f8 <_dtoa_r+0x9a8>
 80068dc:	9b05      	ldr	r3, [sp, #20]
 80068de:	2b02      	cmp	r3, #2
 80068e0:	dc50      	bgt.n	8006984 <_dtoa_r+0x934>
 80068e2:	e089      	b.n	80069f8 <_dtoa_r+0x9a8>
 80068e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80068ea:	e75d      	b.n	80067a8 <_dtoa_r+0x758>
 80068ec:	9b01      	ldr	r3, [sp, #4]
 80068ee:	1e5e      	subs	r6, r3, #1
 80068f0:	9b06      	ldr	r3, [sp, #24]
 80068f2:	42b3      	cmp	r3, r6
 80068f4:	bfbf      	itttt	lt
 80068f6:	9b06      	ldrlt	r3, [sp, #24]
 80068f8:	9606      	strlt	r6, [sp, #24]
 80068fa:	1af2      	sublt	r2, r6, r3
 80068fc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80068fe:	bfb6      	itet	lt
 8006900:	189b      	addlt	r3, r3, r2
 8006902:	1b9e      	subge	r6, r3, r6
 8006904:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006906:	9b01      	ldr	r3, [sp, #4]
 8006908:	bfb8      	it	lt
 800690a:	2600      	movlt	r6, #0
 800690c:	2b00      	cmp	r3, #0
 800690e:	bfb5      	itete	lt
 8006910:	eba8 0503 	sublt.w	r5, r8, r3
 8006914:	9b01      	ldrge	r3, [sp, #4]
 8006916:	2300      	movlt	r3, #0
 8006918:	4645      	movge	r5, r8
 800691a:	e747      	b.n	80067ac <_dtoa_r+0x75c>
 800691c:	9e06      	ldr	r6, [sp, #24]
 800691e:	9f08      	ldr	r7, [sp, #32]
 8006920:	4645      	mov	r5, r8
 8006922:	e74c      	b.n	80067be <_dtoa_r+0x76e>
 8006924:	9a06      	ldr	r2, [sp, #24]
 8006926:	e775      	b.n	8006814 <_dtoa_r+0x7c4>
 8006928:	9b05      	ldr	r3, [sp, #20]
 800692a:	2b01      	cmp	r3, #1
 800692c:	dc18      	bgt.n	8006960 <_dtoa_r+0x910>
 800692e:	9b02      	ldr	r3, [sp, #8]
 8006930:	b9b3      	cbnz	r3, 8006960 <_dtoa_r+0x910>
 8006932:	9b03      	ldr	r3, [sp, #12]
 8006934:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006938:	b9a3      	cbnz	r3, 8006964 <_dtoa_r+0x914>
 800693a:	9b03      	ldr	r3, [sp, #12]
 800693c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006940:	0d1b      	lsrs	r3, r3, #20
 8006942:	051b      	lsls	r3, r3, #20
 8006944:	b12b      	cbz	r3, 8006952 <_dtoa_r+0x902>
 8006946:	9b04      	ldr	r3, [sp, #16]
 8006948:	3301      	adds	r3, #1
 800694a:	9304      	str	r3, [sp, #16]
 800694c:	f108 0801 	add.w	r8, r8, #1
 8006950:	2301      	movs	r3, #1
 8006952:	9306      	str	r3, [sp, #24]
 8006954:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006956:	2b00      	cmp	r3, #0
 8006958:	f47f af74 	bne.w	8006844 <_dtoa_r+0x7f4>
 800695c:	2001      	movs	r0, #1
 800695e:	e779      	b.n	8006854 <_dtoa_r+0x804>
 8006960:	2300      	movs	r3, #0
 8006962:	e7f6      	b.n	8006952 <_dtoa_r+0x902>
 8006964:	9b02      	ldr	r3, [sp, #8]
 8006966:	e7f4      	b.n	8006952 <_dtoa_r+0x902>
 8006968:	d085      	beq.n	8006876 <_dtoa_r+0x826>
 800696a:	4618      	mov	r0, r3
 800696c:	301c      	adds	r0, #28
 800696e:	e77d      	b.n	800686c <_dtoa_r+0x81c>
 8006970:	40240000 	.word	0x40240000
 8006974:	9b01      	ldr	r3, [sp, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	dc38      	bgt.n	80069ec <_dtoa_r+0x99c>
 800697a:	9b05      	ldr	r3, [sp, #20]
 800697c:	2b02      	cmp	r3, #2
 800697e:	dd35      	ble.n	80069ec <_dtoa_r+0x99c>
 8006980:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006984:	f1b9 0f00 	cmp.w	r9, #0
 8006988:	d10d      	bne.n	80069a6 <_dtoa_r+0x956>
 800698a:	4631      	mov	r1, r6
 800698c:	464b      	mov	r3, r9
 800698e:	2205      	movs	r2, #5
 8006990:	4620      	mov	r0, r4
 8006992:	f000 fd47 	bl	8007424 <__multadd>
 8006996:	4601      	mov	r1, r0
 8006998:	4606      	mov	r6, r0
 800699a:	4658      	mov	r0, fp
 800699c:	f000 ffa8 	bl	80078f0 <__mcmp>
 80069a0:	2800      	cmp	r0, #0
 80069a2:	f73f adbd 	bgt.w	8006520 <_dtoa_r+0x4d0>
 80069a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069a8:	9d00      	ldr	r5, [sp, #0]
 80069aa:	ea6f 0a03 	mvn.w	sl, r3
 80069ae:	f04f 0800 	mov.w	r8, #0
 80069b2:	4631      	mov	r1, r6
 80069b4:	4620      	mov	r0, r4
 80069b6:	f000 fd13 	bl	80073e0 <_Bfree>
 80069ba:	2f00      	cmp	r7, #0
 80069bc:	f43f aeb4 	beq.w	8006728 <_dtoa_r+0x6d8>
 80069c0:	f1b8 0f00 	cmp.w	r8, #0
 80069c4:	d005      	beq.n	80069d2 <_dtoa_r+0x982>
 80069c6:	45b8      	cmp	r8, r7
 80069c8:	d003      	beq.n	80069d2 <_dtoa_r+0x982>
 80069ca:	4641      	mov	r1, r8
 80069cc:	4620      	mov	r0, r4
 80069ce:	f000 fd07 	bl	80073e0 <_Bfree>
 80069d2:	4639      	mov	r1, r7
 80069d4:	4620      	mov	r0, r4
 80069d6:	f000 fd03 	bl	80073e0 <_Bfree>
 80069da:	e6a5      	b.n	8006728 <_dtoa_r+0x6d8>
 80069dc:	2600      	movs	r6, #0
 80069de:	4637      	mov	r7, r6
 80069e0:	e7e1      	b.n	80069a6 <_dtoa_r+0x956>
 80069e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80069e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80069e8:	4637      	mov	r7, r6
 80069ea:	e599      	b.n	8006520 <_dtoa_r+0x4d0>
 80069ec:	9b08      	ldr	r3, [sp, #32]
 80069ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f000 80fd 	beq.w	8006bf2 <_dtoa_r+0xba2>
 80069f8:	2d00      	cmp	r5, #0
 80069fa:	dd05      	ble.n	8006a08 <_dtoa_r+0x9b8>
 80069fc:	4639      	mov	r1, r7
 80069fe:	462a      	mov	r2, r5
 8006a00:	4620      	mov	r0, r4
 8006a02:	f000 ff09 	bl	8007818 <__lshift>
 8006a06:	4607      	mov	r7, r0
 8006a08:	9b06      	ldr	r3, [sp, #24]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d05c      	beq.n	8006ac8 <_dtoa_r+0xa78>
 8006a0e:	6879      	ldr	r1, [r7, #4]
 8006a10:	4620      	mov	r0, r4
 8006a12:	f000 fca5 	bl	8007360 <_Balloc>
 8006a16:	4605      	mov	r5, r0
 8006a18:	b928      	cbnz	r0, 8006a26 <_dtoa_r+0x9d6>
 8006a1a:	4b80      	ldr	r3, [pc, #512]	; (8006c1c <_dtoa_r+0xbcc>)
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006a22:	f7ff bb2e 	b.w	8006082 <_dtoa_r+0x32>
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	3202      	adds	r2, #2
 8006a2a:	0092      	lsls	r2, r2, #2
 8006a2c:	f107 010c 	add.w	r1, r7, #12
 8006a30:	300c      	adds	r0, #12
 8006a32:	f000 fc87 	bl	8007344 <memcpy>
 8006a36:	2201      	movs	r2, #1
 8006a38:	4629      	mov	r1, r5
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	f000 feec 	bl	8007818 <__lshift>
 8006a40:	9b00      	ldr	r3, [sp, #0]
 8006a42:	3301      	adds	r3, #1
 8006a44:	9301      	str	r3, [sp, #4]
 8006a46:	9b00      	ldr	r3, [sp, #0]
 8006a48:	444b      	add	r3, r9
 8006a4a:	9307      	str	r3, [sp, #28]
 8006a4c:	9b02      	ldr	r3, [sp, #8]
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	46b8      	mov	r8, r7
 8006a54:	9306      	str	r3, [sp, #24]
 8006a56:	4607      	mov	r7, r0
 8006a58:	9b01      	ldr	r3, [sp, #4]
 8006a5a:	4631      	mov	r1, r6
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	4658      	mov	r0, fp
 8006a60:	9302      	str	r3, [sp, #8]
 8006a62:	f7ff fa67 	bl	8005f34 <quorem>
 8006a66:	4603      	mov	r3, r0
 8006a68:	3330      	adds	r3, #48	; 0x30
 8006a6a:	9004      	str	r0, [sp, #16]
 8006a6c:	4641      	mov	r1, r8
 8006a6e:	4658      	mov	r0, fp
 8006a70:	9308      	str	r3, [sp, #32]
 8006a72:	f000 ff3d 	bl	80078f0 <__mcmp>
 8006a76:	463a      	mov	r2, r7
 8006a78:	4681      	mov	r9, r0
 8006a7a:	4631      	mov	r1, r6
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f000 ff53 	bl	8007928 <__mdiff>
 8006a82:	68c2      	ldr	r2, [r0, #12]
 8006a84:	9b08      	ldr	r3, [sp, #32]
 8006a86:	4605      	mov	r5, r0
 8006a88:	bb02      	cbnz	r2, 8006acc <_dtoa_r+0xa7c>
 8006a8a:	4601      	mov	r1, r0
 8006a8c:	4658      	mov	r0, fp
 8006a8e:	f000 ff2f 	bl	80078f0 <__mcmp>
 8006a92:	9b08      	ldr	r3, [sp, #32]
 8006a94:	4602      	mov	r2, r0
 8006a96:	4629      	mov	r1, r5
 8006a98:	4620      	mov	r0, r4
 8006a9a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006a9e:	f000 fc9f 	bl	80073e0 <_Bfree>
 8006aa2:	9b05      	ldr	r3, [sp, #20]
 8006aa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006aa6:	9d01      	ldr	r5, [sp, #4]
 8006aa8:	ea43 0102 	orr.w	r1, r3, r2
 8006aac:	9b06      	ldr	r3, [sp, #24]
 8006aae:	430b      	orrs	r3, r1
 8006ab0:	9b08      	ldr	r3, [sp, #32]
 8006ab2:	d10d      	bne.n	8006ad0 <_dtoa_r+0xa80>
 8006ab4:	2b39      	cmp	r3, #57	; 0x39
 8006ab6:	d029      	beq.n	8006b0c <_dtoa_r+0xabc>
 8006ab8:	f1b9 0f00 	cmp.w	r9, #0
 8006abc:	dd01      	ble.n	8006ac2 <_dtoa_r+0xa72>
 8006abe:	9b04      	ldr	r3, [sp, #16]
 8006ac0:	3331      	adds	r3, #49	; 0x31
 8006ac2:	9a02      	ldr	r2, [sp, #8]
 8006ac4:	7013      	strb	r3, [r2, #0]
 8006ac6:	e774      	b.n	80069b2 <_dtoa_r+0x962>
 8006ac8:	4638      	mov	r0, r7
 8006aca:	e7b9      	b.n	8006a40 <_dtoa_r+0x9f0>
 8006acc:	2201      	movs	r2, #1
 8006ace:	e7e2      	b.n	8006a96 <_dtoa_r+0xa46>
 8006ad0:	f1b9 0f00 	cmp.w	r9, #0
 8006ad4:	db06      	blt.n	8006ae4 <_dtoa_r+0xa94>
 8006ad6:	9905      	ldr	r1, [sp, #20]
 8006ad8:	ea41 0909 	orr.w	r9, r1, r9
 8006adc:	9906      	ldr	r1, [sp, #24]
 8006ade:	ea59 0101 	orrs.w	r1, r9, r1
 8006ae2:	d120      	bne.n	8006b26 <_dtoa_r+0xad6>
 8006ae4:	2a00      	cmp	r2, #0
 8006ae6:	ddec      	ble.n	8006ac2 <_dtoa_r+0xa72>
 8006ae8:	4659      	mov	r1, fp
 8006aea:	2201      	movs	r2, #1
 8006aec:	4620      	mov	r0, r4
 8006aee:	9301      	str	r3, [sp, #4]
 8006af0:	f000 fe92 	bl	8007818 <__lshift>
 8006af4:	4631      	mov	r1, r6
 8006af6:	4683      	mov	fp, r0
 8006af8:	f000 fefa 	bl	80078f0 <__mcmp>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	9b01      	ldr	r3, [sp, #4]
 8006b00:	dc02      	bgt.n	8006b08 <_dtoa_r+0xab8>
 8006b02:	d1de      	bne.n	8006ac2 <_dtoa_r+0xa72>
 8006b04:	07da      	lsls	r2, r3, #31
 8006b06:	d5dc      	bpl.n	8006ac2 <_dtoa_r+0xa72>
 8006b08:	2b39      	cmp	r3, #57	; 0x39
 8006b0a:	d1d8      	bne.n	8006abe <_dtoa_r+0xa6e>
 8006b0c:	9a02      	ldr	r2, [sp, #8]
 8006b0e:	2339      	movs	r3, #57	; 0x39
 8006b10:	7013      	strb	r3, [r2, #0]
 8006b12:	462b      	mov	r3, r5
 8006b14:	461d      	mov	r5, r3
 8006b16:	3b01      	subs	r3, #1
 8006b18:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006b1c:	2a39      	cmp	r2, #57	; 0x39
 8006b1e:	d050      	beq.n	8006bc2 <_dtoa_r+0xb72>
 8006b20:	3201      	adds	r2, #1
 8006b22:	701a      	strb	r2, [r3, #0]
 8006b24:	e745      	b.n	80069b2 <_dtoa_r+0x962>
 8006b26:	2a00      	cmp	r2, #0
 8006b28:	dd03      	ble.n	8006b32 <_dtoa_r+0xae2>
 8006b2a:	2b39      	cmp	r3, #57	; 0x39
 8006b2c:	d0ee      	beq.n	8006b0c <_dtoa_r+0xabc>
 8006b2e:	3301      	adds	r3, #1
 8006b30:	e7c7      	b.n	8006ac2 <_dtoa_r+0xa72>
 8006b32:	9a01      	ldr	r2, [sp, #4]
 8006b34:	9907      	ldr	r1, [sp, #28]
 8006b36:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006b3a:	428a      	cmp	r2, r1
 8006b3c:	d02a      	beq.n	8006b94 <_dtoa_r+0xb44>
 8006b3e:	4659      	mov	r1, fp
 8006b40:	2300      	movs	r3, #0
 8006b42:	220a      	movs	r2, #10
 8006b44:	4620      	mov	r0, r4
 8006b46:	f000 fc6d 	bl	8007424 <__multadd>
 8006b4a:	45b8      	cmp	r8, r7
 8006b4c:	4683      	mov	fp, r0
 8006b4e:	f04f 0300 	mov.w	r3, #0
 8006b52:	f04f 020a 	mov.w	r2, #10
 8006b56:	4641      	mov	r1, r8
 8006b58:	4620      	mov	r0, r4
 8006b5a:	d107      	bne.n	8006b6c <_dtoa_r+0xb1c>
 8006b5c:	f000 fc62 	bl	8007424 <__multadd>
 8006b60:	4680      	mov	r8, r0
 8006b62:	4607      	mov	r7, r0
 8006b64:	9b01      	ldr	r3, [sp, #4]
 8006b66:	3301      	adds	r3, #1
 8006b68:	9301      	str	r3, [sp, #4]
 8006b6a:	e775      	b.n	8006a58 <_dtoa_r+0xa08>
 8006b6c:	f000 fc5a 	bl	8007424 <__multadd>
 8006b70:	4639      	mov	r1, r7
 8006b72:	4680      	mov	r8, r0
 8006b74:	2300      	movs	r3, #0
 8006b76:	220a      	movs	r2, #10
 8006b78:	4620      	mov	r0, r4
 8006b7a:	f000 fc53 	bl	8007424 <__multadd>
 8006b7e:	4607      	mov	r7, r0
 8006b80:	e7f0      	b.n	8006b64 <_dtoa_r+0xb14>
 8006b82:	f1b9 0f00 	cmp.w	r9, #0
 8006b86:	9a00      	ldr	r2, [sp, #0]
 8006b88:	bfcc      	ite	gt
 8006b8a:	464d      	movgt	r5, r9
 8006b8c:	2501      	movle	r5, #1
 8006b8e:	4415      	add	r5, r2
 8006b90:	f04f 0800 	mov.w	r8, #0
 8006b94:	4659      	mov	r1, fp
 8006b96:	2201      	movs	r2, #1
 8006b98:	4620      	mov	r0, r4
 8006b9a:	9301      	str	r3, [sp, #4]
 8006b9c:	f000 fe3c 	bl	8007818 <__lshift>
 8006ba0:	4631      	mov	r1, r6
 8006ba2:	4683      	mov	fp, r0
 8006ba4:	f000 fea4 	bl	80078f0 <__mcmp>
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	dcb2      	bgt.n	8006b12 <_dtoa_r+0xac2>
 8006bac:	d102      	bne.n	8006bb4 <_dtoa_r+0xb64>
 8006bae:	9b01      	ldr	r3, [sp, #4]
 8006bb0:	07db      	lsls	r3, r3, #31
 8006bb2:	d4ae      	bmi.n	8006b12 <_dtoa_r+0xac2>
 8006bb4:	462b      	mov	r3, r5
 8006bb6:	461d      	mov	r5, r3
 8006bb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bbc:	2a30      	cmp	r2, #48	; 0x30
 8006bbe:	d0fa      	beq.n	8006bb6 <_dtoa_r+0xb66>
 8006bc0:	e6f7      	b.n	80069b2 <_dtoa_r+0x962>
 8006bc2:	9a00      	ldr	r2, [sp, #0]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d1a5      	bne.n	8006b14 <_dtoa_r+0xac4>
 8006bc8:	f10a 0a01 	add.w	sl, sl, #1
 8006bcc:	2331      	movs	r3, #49	; 0x31
 8006bce:	e779      	b.n	8006ac4 <_dtoa_r+0xa74>
 8006bd0:	4b13      	ldr	r3, [pc, #76]	; (8006c20 <_dtoa_r+0xbd0>)
 8006bd2:	f7ff baaf 	b.w	8006134 <_dtoa_r+0xe4>
 8006bd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f47f aa86 	bne.w	80060ea <_dtoa_r+0x9a>
 8006bde:	4b11      	ldr	r3, [pc, #68]	; (8006c24 <_dtoa_r+0xbd4>)
 8006be0:	f7ff baa8 	b.w	8006134 <_dtoa_r+0xe4>
 8006be4:	f1b9 0f00 	cmp.w	r9, #0
 8006be8:	dc03      	bgt.n	8006bf2 <_dtoa_r+0xba2>
 8006bea:	9b05      	ldr	r3, [sp, #20]
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	f73f aec9 	bgt.w	8006984 <_dtoa_r+0x934>
 8006bf2:	9d00      	ldr	r5, [sp, #0]
 8006bf4:	4631      	mov	r1, r6
 8006bf6:	4658      	mov	r0, fp
 8006bf8:	f7ff f99c 	bl	8005f34 <quorem>
 8006bfc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006c00:	f805 3b01 	strb.w	r3, [r5], #1
 8006c04:	9a00      	ldr	r2, [sp, #0]
 8006c06:	1aaa      	subs	r2, r5, r2
 8006c08:	4591      	cmp	r9, r2
 8006c0a:	ddba      	ble.n	8006b82 <_dtoa_r+0xb32>
 8006c0c:	4659      	mov	r1, fp
 8006c0e:	2300      	movs	r3, #0
 8006c10:	220a      	movs	r2, #10
 8006c12:	4620      	mov	r0, r4
 8006c14:	f000 fc06 	bl	8007424 <__multadd>
 8006c18:	4683      	mov	fp, r0
 8006c1a:	e7eb      	b.n	8006bf4 <_dtoa_r+0xba4>
 8006c1c:	08008fcc 	.word	0x08008fcc
 8006c20:	08008dc8 	.word	0x08008dc8
 8006c24:	08008f49 	.word	0x08008f49

08006c28 <rshift>:
 8006c28:	6903      	ldr	r3, [r0, #16]
 8006c2a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006c2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c32:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006c36:	f100 0414 	add.w	r4, r0, #20
 8006c3a:	dd45      	ble.n	8006cc8 <rshift+0xa0>
 8006c3c:	f011 011f 	ands.w	r1, r1, #31
 8006c40:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006c44:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006c48:	d10c      	bne.n	8006c64 <rshift+0x3c>
 8006c4a:	f100 0710 	add.w	r7, r0, #16
 8006c4e:	4629      	mov	r1, r5
 8006c50:	42b1      	cmp	r1, r6
 8006c52:	d334      	bcc.n	8006cbe <rshift+0x96>
 8006c54:	1a9b      	subs	r3, r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	1eea      	subs	r2, r5, #3
 8006c5a:	4296      	cmp	r6, r2
 8006c5c:	bf38      	it	cc
 8006c5e:	2300      	movcc	r3, #0
 8006c60:	4423      	add	r3, r4
 8006c62:	e015      	b.n	8006c90 <rshift+0x68>
 8006c64:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006c68:	f1c1 0820 	rsb	r8, r1, #32
 8006c6c:	40cf      	lsrs	r7, r1
 8006c6e:	f105 0e04 	add.w	lr, r5, #4
 8006c72:	46a1      	mov	r9, r4
 8006c74:	4576      	cmp	r6, lr
 8006c76:	46f4      	mov	ip, lr
 8006c78:	d815      	bhi.n	8006ca6 <rshift+0x7e>
 8006c7a:	1a9b      	subs	r3, r3, r2
 8006c7c:	009a      	lsls	r2, r3, #2
 8006c7e:	3a04      	subs	r2, #4
 8006c80:	3501      	adds	r5, #1
 8006c82:	42ae      	cmp	r6, r5
 8006c84:	bf38      	it	cc
 8006c86:	2200      	movcc	r2, #0
 8006c88:	18a3      	adds	r3, r4, r2
 8006c8a:	50a7      	str	r7, [r4, r2]
 8006c8c:	b107      	cbz	r7, 8006c90 <rshift+0x68>
 8006c8e:	3304      	adds	r3, #4
 8006c90:	1b1a      	subs	r2, r3, r4
 8006c92:	42a3      	cmp	r3, r4
 8006c94:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006c98:	bf08      	it	eq
 8006c9a:	2300      	moveq	r3, #0
 8006c9c:	6102      	str	r2, [r0, #16]
 8006c9e:	bf08      	it	eq
 8006ca0:	6143      	streq	r3, [r0, #20]
 8006ca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ca6:	f8dc c000 	ldr.w	ip, [ip]
 8006caa:	fa0c fc08 	lsl.w	ip, ip, r8
 8006cae:	ea4c 0707 	orr.w	r7, ip, r7
 8006cb2:	f849 7b04 	str.w	r7, [r9], #4
 8006cb6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006cba:	40cf      	lsrs	r7, r1
 8006cbc:	e7da      	b.n	8006c74 <rshift+0x4c>
 8006cbe:	f851 cb04 	ldr.w	ip, [r1], #4
 8006cc2:	f847 cf04 	str.w	ip, [r7, #4]!
 8006cc6:	e7c3      	b.n	8006c50 <rshift+0x28>
 8006cc8:	4623      	mov	r3, r4
 8006cca:	e7e1      	b.n	8006c90 <rshift+0x68>

08006ccc <__hexdig_fun>:
 8006ccc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006cd0:	2b09      	cmp	r3, #9
 8006cd2:	d802      	bhi.n	8006cda <__hexdig_fun+0xe>
 8006cd4:	3820      	subs	r0, #32
 8006cd6:	b2c0      	uxtb	r0, r0
 8006cd8:	4770      	bx	lr
 8006cda:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006cde:	2b05      	cmp	r3, #5
 8006ce0:	d801      	bhi.n	8006ce6 <__hexdig_fun+0x1a>
 8006ce2:	3847      	subs	r0, #71	; 0x47
 8006ce4:	e7f7      	b.n	8006cd6 <__hexdig_fun+0xa>
 8006ce6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006cea:	2b05      	cmp	r3, #5
 8006cec:	d801      	bhi.n	8006cf2 <__hexdig_fun+0x26>
 8006cee:	3827      	subs	r0, #39	; 0x27
 8006cf0:	e7f1      	b.n	8006cd6 <__hexdig_fun+0xa>
 8006cf2:	2000      	movs	r0, #0
 8006cf4:	4770      	bx	lr
	...

08006cf8 <__gethex>:
 8006cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfc:	ed2d 8b02 	vpush	{d8}
 8006d00:	b089      	sub	sp, #36	; 0x24
 8006d02:	ee08 0a10 	vmov	s16, r0
 8006d06:	9304      	str	r3, [sp, #16]
 8006d08:	4bbc      	ldr	r3, [pc, #752]	; (8006ffc <__gethex+0x304>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	9301      	str	r3, [sp, #4]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	468b      	mov	fp, r1
 8006d12:	4690      	mov	r8, r2
 8006d14:	f7f9 fa6e 	bl	80001f4 <strlen>
 8006d18:	9b01      	ldr	r3, [sp, #4]
 8006d1a:	f8db 2000 	ldr.w	r2, [fp]
 8006d1e:	4403      	add	r3, r0
 8006d20:	4682      	mov	sl, r0
 8006d22:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006d26:	9305      	str	r3, [sp, #20]
 8006d28:	1c93      	adds	r3, r2, #2
 8006d2a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006d2e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006d32:	32fe      	adds	r2, #254	; 0xfe
 8006d34:	18d1      	adds	r1, r2, r3
 8006d36:	461f      	mov	r7, r3
 8006d38:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006d3c:	9100      	str	r1, [sp, #0]
 8006d3e:	2830      	cmp	r0, #48	; 0x30
 8006d40:	d0f8      	beq.n	8006d34 <__gethex+0x3c>
 8006d42:	f7ff ffc3 	bl	8006ccc <__hexdig_fun>
 8006d46:	4604      	mov	r4, r0
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	d13a      	bne.n	8006dc2 <__gethex+0xca>
 8006d4c:	9901      	ldr	r1, [sp, #4]
 8006d4e:	4652      	mov	r2, sl
 8006d50:	4638      	mov	r0, r7
 8006d52:	f001 f9ed 	bl	8008130 <strncmp>
 8006d56:	4605      	mov	r5, r0
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	d168      	bne.n	8006e2e <__gethex+0x136>
 8006d5c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006d60:	eb07 060a 	add.w	r6, r7, sl
 8006d64:	f7ff ffb2 	bl	8006ccc <__hexdig_fun>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	d062      	beq.n	8006e32 <__gethex+0x13a>
 8006d6c:	4633      	mov	r3, r6
 8006d6e:	7818      	ldrb	r0, [r3, #0]
 8006d70:	2830      	cmp	r0, #48	; 0x30
 8006d72:	461f      	mov	r7, r3
 8006d74:	f103 0301 	add.w	r3, r3, #1
 8006d78:	d0f9      	beq.n	8006d6e <__gethex+0x76>
 8006d7a:	f7ff ffa7 	bl	8006ccc <__hexdig_fun>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	fab0 f480 	clz	r4, r0
 8006d84:	0964      	lsrs	r4, r4, #5
 8006d86:	4635      	mov	r5, r6
 8006d88:	9300      	str	r3, [sp, #0]
 8006d8a:	463a      	mov	r2, r7
 8006d8c:	4616      	mov	r6, r2
 8006d8e:	3201      	adds	r2, #1
 8006d90:	7830      	ldrb	r0, [r6, #0]
 8006d92:	f7ff ff9b 	bl	8006ccc <__hexdig_fun>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	d1f8      	bne.n	8006d8c <__gethex+0x94>
 8006d9a:	9901      	ldr	r1, [sp, #4]
 8006d9c:	4652      	mov	r2, sl
 8006d9e:	4630      	mov	r0, r6
 8006da0:	f001 f9c6 	bl	8008130 <strncmp>
 8006da4:	b980      	cbnz	r0, 8006dc8 <__gethex+0xd0>
 8006da6:	b94d      	cbnz	r5, 8006dbc <__gethex+0xc4>
 8006da8:	eb06 050a 	add.w	r5, r6, sl
 8006dac:	462a      	mov	r2, r5
 8006dae:	4616      	mov	r6, r2
 8006db0:	3201      	adds	r2, #1
 8006db2:	7830      	ldrb	r0, [r6, #0]
 8006db4:	f7ff ff8a 	bl	8006ccc <__hexdig_fun>
 8006db8:	2800      	cmp	r0, #0
 8006dba:	d1f8      	bne.n	8006dae <__gethex+0xb6>
 8006dbc:	1bad      	subs	r5, r5, r6
 8006dbe:	00ad      	lsls	r5, r5, #2
 8006dc0:	e004      	b.n	8006dcc <__gethex+0xd4>
 8006dc2:	2400      	movs	r4, #0
 8006dc4:	4625      	mov	r5, r4
 8006dc6:	e7e0      	b.n	8006d8a <__gethex+0x92>
 8006dc8:	2d00      	cmp	r5, #0
 8006dca:	d1f7      	bne.n	8006dbc <__gethex+0xc4>
 8006dcc:	7833      	ldrb	r3, [r6, #0]
 8006dce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006dd2:	2b50      	cmp	r3, #80	; 0x50
 8006dd4:	d13b      	bne.n	8006e4e <__gethex+0x156>
 8006dd6:	7873      	ldrb	r3, [r6, #1]
 8006dd8:	2b2b      	cmp	r3, #43	; 0x2b
 8006dda:	d02c      	beq.n	8006e36 <__gethex+0x13e>
 8006ddc:	2b2d      	cmp	r3, #45	; 0x2d
 8006dde:	d02e      	beq.n	8006e3e <__gethex+0x146>
 8006de0:	1c71      	adds	r1, r6, #1
 8006de2:	f04f 0900 	mov.w	r9, #0
 8006de6:	7808      	ldrb	r0, [r1, #0]
 8006de8:	f7ff ff70 	bl	8006ccc <__hexdig_fun>
 8006dec:	1e43      	subs	r3, r0, #1
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	2b18      	cmp	r3, #24
 8006df2:	d82c      	bhi.n	8006e4e <__gethex+0x156>
 8006df4:	f1a0 0210 	sub.w	r2, r0, #16
 8006df8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006dfc:	f7ff ff66 	bl	8006ccc <__hexdig_fun>
 8006e00:	1e43      	subs	r3, r0, #1
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	2b18      	cmp	r3, #24
 8006e06:	d91d      	bls.n	8006e44 <__gethex+0x14c>
 8006e08:	f1b9 0f00 	cmp.w	r9, #0
 8006e0c:	d000      	beq.n	8006e10 <__gethex+0x118>
 8006e0e:	4252      	negs	r2, r2
 8006e10:	4415      	add	r5, r2
 8006e12:	f8cb 1000 	str.w	r1, [fp]
 8006e16:	b1e4      	cbz	r4, 8006e52 <__gethex+0x15a>
 8006e18:	9b00      	ldr	r3, [sp, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	bf14      	ite	ne
 8006e1e:	2700      	movne	r7, #0
 8006e20:	2706      	moveq	r7, #6
 8006e22:	4638      	mov	r0, r7
 8006e24:	b009      	add	sp, #36	; 0x24
 8006e26:	ecbd 8b02 	vpop	{d8}
 8006e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e2e:	463e      	mov	r6, r7
 8006e30:	4625      	mov	r5, r4
 8006e32:	2401      	movs	r4, #1
 8006e34:	e7ca      	b.n	8006dcc <__gethex+0xd4>
 8006e36:	f04f 0900 	mov.w	r9, #0
 8006e3a:	1cb1      	adds	r1, r6, #2
 8006e3c:	e7d3      	b.n	8006de6 <__gethex+0xee>
 8006e3e:	f04f 0901 	mov.w	r9, #1
 8006e42:	e7fa      	b.n	8006e3a <__gethex+0x142>
 8006e44:	230a      	movs	r3, #10
 8006e46:	fb03 0202 	mla	r2, r3, r2, r0
 8006e4a:	3a10      	subs	r2, #16
 8006e4c:	e7d4      	b.n	8006df8 <__gethex+0x100>
 8006e4e:	4631      	mov	r1, r6
 8006e50:	e7df      	b.n	8006e12 <__gethex+0x11a>
 8006e52:	1bf3      	subs	r3, r6, r7
 8006e54:	3b01      	subs	r3, #1
 8006e56:	4621      	mov	r1, r4
 8006e58:	2b07      	cmp	r3, #7
 8006e5a:	dc0b      	bgt.n	8006e74 <__gethex+0x17c>
 8006e5c:	ee18 0a10 	vmov	r0, s16
 8006e60:	f000 fa7e 	bl	8007360 <_Balloc>
 8006e64:	4604      	mov	r4, r0
 8006e66:	b940      	cbnz	r0, 8006e7a <__gethex+0x182>
 8006e68:	4b65      	ldr	r3, [pc, #404]	; (8007000 <__gethex+0x308>)
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	21de      	movs	r1, #222	; 0xde
 8006e6e:	4865      	ldr	r0, [pc, #404]	; (8007004 <__gethex+0x30c>)
 8006e70:	f001 f97e 	bl	8008170 <__assert_func>
 8006e74:	3101      	adds	r1, #1
 8006e76:	105b      	asrs	r3, r3, #1
 8006e78:	e7ee      	b.n	8006e58 <__gethex+0x160>
 8006e7a:	f100 0914 	add.w	r9, r0, #20
 8006e7e:	f04f 0b00 	mov.w	fp, #0
 8006e82:	f1ca 0301 	rsb	r3, sl, #1
 8006e86:	f8cd 9008 	str.w	r9, [sp, #8]
 8006e8a:	f8cd b000 	str.w	fp, [sp]
 8006e8e:	9306      	str	r3, [sp, #24]
 8006e90:	42b7      	cmp	r7, r6
 8006e92:	d340      	bcc.n	8006f16 <__gethex+0x21e>
 8006e94:	9802      	ldr	r0, [sp, #8]
 8006e96:	9b00      	ldr	r3, [sp, #0]
 8006e98:	f840 3b04 	str.w	r3, [r0], #4
 8006e9c:	eba0 0009 	sub.w	r0, r0, r9
 8006ea0:	1080      	asrs	r0, r0, #2
 8006ea2:	0146      	lsls	r6, r0, #5
 8006ea4:	6120      	str	r0, [r4, #16]
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f000 fb50 	bl	800754c <__hi0bits>
 8006eac:	1a30      	subs	r0, r6, r0
 8006eae:	f8d8 6000 	ldr.w	r6, [r8]
 8006eb2:	42b0      	cmp	r0, r6
 8006eb4:	dd63      	ble.n	8006f7e <__gethex+0x286>
 8006eb6:	1b87      	subs	r7, r0, r6
 8006eb8:	4639      	mov	r1, r7
 8006eba:	4620      	mov	r0, r4
 8006ebc:	f000 feea 	bl	8007c94 <__any_on>
 8006ec0:	4682      	mov	sl, r0
 8006ec2:	b1a8      	cbz	r0, 8006ef0 <__gethex+0x1f8>
 8006ec4:	1e7b      	subs	r3, r7, #1
 8006ec6:	1159      	asrs	r1, r3, #5
 8006ec8:	f003 021f 	and.w	r2, r3, #31
 8006ecc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006ed0:	f04f 0a01 	mov.w	sl, #1
 8006ed4:	fa0a f202 	lsl.w	r2, sl, r2
 8006ed8:	420a      	tst	r2, r1
 8006eda:	d009      	beq.n	8006ef0 <__gethex+0x1f8>
 8006edc:	4553      	cmp	r3, sl
 8006ede:	dd05      	ble.n	8006eec <__gethex+0x1f4>
 8006ee0:	1eb9      	subs	r1, r7, #2
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	f000 fed6 	bl	8007c94 <__any_on>
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	d145      	bne.n	8006f78 <__gethex+0x280>
 8006eec:	f04f 0a02 	mov.w	sl, #2
 8006ef0:	4639      	mov	r1, r7
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	f7ff fe98 	bl	8006c28 <rshift>
 8006ef8:	443d      	add	r5, r7
 8006efa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006efe:	42ab      	cmp	r3, r5
 8006f00:	da4c      	bge.n	8006f9c <__gethex+0x2a4>
 8006f02:	ee18 0a10 	vmov	r0, s16
 8006f06:	4621      	mov	r1, r4
 8006f08:	f000 fa6a 	bl	80073e0 <_Bfree>
 8006f0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006f0e:	2300      	movs	r3, #0
 8006f10:	6013      	str	r3, [r2, #0]
 8006f12:	27a3      	movs	r7, #163	; 0xa3
 8006f14:	e785      	b.n	8006e22 <__gethex+0x12a>
 8006f16:	1e73      	subs	r3, r6, #1
 8006f18:	9a05      	ldr	r2, [sp, #20]
 8006f1a:	9303      	str	r3, [sp, #12]
 8006f1c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d019      	beq.n	8006f58 <__gethex+0x260>
 8006f24:	f1bb 0f20 	cmp.w	fp, #32
 8006f28:	d107      	bne.n	8006f3a <__gethex+0x242>
 8006f2a:	9b02      	ldr	r3, [sp, #8]
 8006f2c:	9a00      	ldr	r2, [sp, #0]
 8006f2e:	f843 2b04 	str.w	r2, [r3], #4
 8006f32:	9302      	str	r3, [sp, #8]
 8006f34:	2300      	movs	r3, #0
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	469b      	mov	fp, r3
 8006f3a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006f3e:	f7ff fec5 	bl	8006ccc <__hexdig_fun>
 8006f42:	9b00      	ldr	r3, [sp, #0]
 8006f44:	f000 000f 	and.w	r0, r0, #15
 8006f48:	fa00 f00b 	lsl.w	r0, r0, fp
 8006f4c:	4303      	orrs	r3, r0
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	f10b 0b04 	add.w	fp, fp, #4
 8006f54:	9b03      	ldr	r3, [sp, #12]
 8006f56:	e00d      	b.n	8006f74 <__gethex+0x27c>
 8006f58:	9b03      	ldr	r3, [sp, #12]
 8006f5a:	9a06      	ldr	r2, [sp, #24]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	42bb      	cmp	r3, r7
 8006f60:	d3e0      	bcc.n	8006f24 <__gethex+0x22c>
 8006f62:	4618      	mov	r0, r3
 8006f64:	9901      	ldr	r1, [sp, #4]
 8006f66:	9307      	str	r3, [sp, #28]
 8006f68:	4652      	mov	r2, sl
 8006f6a:	f001 f8e1 	bl	8008130 <strncmp>
 8006f6e:	9b07      	ldr	r3, [sp, #28]
 8006f70:	2800      	cmp	r0, #0
 8006f72:	d1d7      	bne.n	8006f24 <__gethex+0x22c>
 8006f74:	461e      	mov	r6, r3
 8006f76:	e78b      	b.n	8006e90 <__gethex+0x198>
 8006f78:	f04f 0a03 	mov.w	sl, #3
 8006f7c:	e7b8      	b.n	8006ef0 <__gethex+0x1f8>
 8006f7e:	da0a      	bge.n	8006f96 <__gethex+0x29e>
 8006f80:	1a37      	subs	r7, r6, r0
 8006f82:	4621      	mov	r1, r4
 8006f84:	ee18 0a10 	vmov	r0, s16
 8006f88:	463a      	mov	r2, r7
 8006f8a:	f000 fc45 	bl	8007818 <__lshift>
 8006f8e:	1bed      	subs	r5, r5, r7
 8006f90:	4604      	mov	r4, r0
 8006f92:	f100 0914 	add.w	r9, r0, #20
 8006f96:	f04f 0a00 	mov.w	sl, #0
 8006f9a:	e7ae      	b.n	8006efa <__gethex+0x202>
 8006f9c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006fa0:	42a8      	cmp	r0, r5
 8006fa2:	dd72      	ble.n	800708a <__gethex+0x392>
 8006fa4:	1b45      	subs	r5, r0, r5
 8006fa6:	42ae      	cmp	r6, r5
 8006fa8:	dc36      	bgt.n	8007018 <__gethex+0x320>
 8006faa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d02a      	beq.n	8007008 <__gethex+0x310>
 8006fb2:	2b03      	cmp	r3, #3
 8006fb4:	d02c      	beq.n	8007010 <__gethex+0x318>
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d115      	bne.n	8006fe6 <__gethex+0x2ee>
 8006fba:	42ae      	cmp	r6, r5
 8006fbc:	d113      	bne.n	8006fe6 <__gethex+0x2ee>
 8006fbe:	2e01      	cmp	r6, #1
 8006fc0:	d10b      	bne.n	8006fda <__gethex+0x2e2>
 8006fc2:	9a04      	ldr	r2, [sp, #16]
 8006fc4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006fc8:	6013      	str	r3, [r2, #0]
 8006fca:	2301      	movs	r3, #1
 8006fcc:	6123      	str	r3, [r4, #16]
 8006fce:	f8c9 3000 	str.w	r3, [r9]
 8006fd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006fd4:	2762      	movs	r7, #98	; 0x62
 8006fd6:	601c      	str	r4, [r3, #0]
 8006fd8:	e723      	b.n	8006e22 <__gethex+0x12a>
 8006fda:	1e71      	subs	r1, r6, #1
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f000 fe59 	bl	8007c94 <__any_on>
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	d1ed      	bne.n	8006fc2 <__gethex+0x2ca>
 8006fe6:	ee18 0a10 	vmov	r0, s16
 8006fea:	4621      	mov	r1, r4
 8006fec:	f000 f9f8 	bl	80073e0 <_Bfree>
 8006ff0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	6013      	str	r3, [r2, #0]
 8006ff6:	2750      	movs	r7, #80	; 0x50
 8006ff8:	e713      	b.n	8006e22 <__gethex+0x12a>
 8006ffa:	bf00      	nop
 8006ffc:	08009048 	.word	0x08009048
 8007000:	08008fcc 	.word	0x08008fcc
 8007004:	08008fdd 	.word	0x08008fdd
 8007008:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1eb      	bne.n	8006fe6 <__gethex+0x2ee>
 800700e:	e7d8      	b.n	8006fc2 <__gethex+0x2ca>
 8007010:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1d5      	bne.n	8006fc2 <__gethex+0x2ca>
 8007016:	e7e6      	b.n	8006fe6 <__gethex+0x2ee>
 8007018:	1e6f      	subs	r7, r5, #1
 800701a:	f1ba 0f00 	cmp.w	sl, #0
 800701e:	d131      	bne.n	8007084 <__gethex+0x38c>
 8007020:	b127      	cbz	r7, 800702c <__gethex+0x334>
 8007022:	4639      	mov	r1, r7
 8007024:	4620      	mov	r0, r4
 8007026:	f000 fe35 	bl	8007c94 <__any_on>
 800702a:	4682      	mov	sl, r0
 800702c:	117b      	asrs	r3, r7, #5
 800702e:	2101      	movs	r1, #1
 8007030:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007034:	f007 071f 	and.w	r7, r7, #31
 8007038:	fa01 f707 	lsl.w	r7, r1, r7
 800703c:	421f      	tst	r7, r3
 800703e:	4629      	mov	r1, r5
 8007040:	4620      	mov	r0, r4
 8007042:	bf18      	it	ne
 8007044:	f04a 0a02 	orrne.w	sl, sl, #2
 8007048:	1b76      	subs	r6, r6, r5
 800704a:	f7ff fded 	bl	8006c28 <rshift>
 800704e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007052:	2702      	movs	r7, #2
 8007054:	f1ba 0f00 	cmp.w	sl, #0
 8007058:	d048      	beq.n	80070ec <__gethex+0x3f4>
 800705a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800705e:	2b02      	cmp	r3, #2
 8007060:	d015      	beq.n	800708e <__gethex+0x396>
 8007062:	2b03      	cmp	r3, #3
 8007064:	d017      	beq.n	8007096 <__gethex+0x39e>
 8007066:	2b01      	cmp	r3, #1
 8007068:	d109      	bne.n	800707e <__gethex+0x386>
 800706a:	f01a 0f02 	tst.w	sl, #2
 800706e:	d006      	beq.n	800707e <__gethex+0x386>
 8007070:	f8d9 0000 	ldr.w	r0, [r9]
 8007074:	ea4a 0a00 	orr.w	sl, sl, r0
 8007078:	f01a 0f01 	tst.w	sl, #1
 800707c:	d10e      	bne.n	800709c <__gethex+0x3a4>
 800707e:	f047 0710 	orr.w	r7, r7, #16
 8007082:	e033      	b.n	80070ec <__gethex+0x3f4>
 8007084:	f04f 0a01 	mov.w	sl, #1
 8007088:	e7d0      	b.n	800702c <__gethex+0x334>
 800708a:	2701      	movs	r7, #1
 800708c:	e7e2      	b.n	8007054 <__gethex+0x35c>
 800708e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007090:	f1c3 0301 	rsb	r3, r3, #1
 8007094:	9315      	str	r3, [sp, #84]	; 0x54
 8007096:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007098:	2b00      	cmp	r3, #0
 800709a:	d0f0      	beq.n	800707e <__gethex+0x386>
 800709c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80070a0:	f104 0314 	add.w	r3, r4, #20
 80070a4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80070a8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80070ac:	f04f 0c00 	mov.w	ip, #0
 80070b0:	4618      	mov	r0, r3
 80070b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80070b6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80070ba:	d01c      	beq.n	80070f6 <__gethex+0x3fe>
 80070bc:	3201      	adds	r2, #1
 80070be:	6002      	str	r2, [r0, #0]
 80070c0:	2f02      	cmp	r7, #2
 80070c2:	f104 0314 	add.w	r3, r4, #20
 80070c6:	d13f      	bne.n	8007148 <__gethex+0x450>
 80070c8:	f8d8 2000 	ldr.w	r2, [r8]
 80070cc:	3a01      	subs	r2, #1
 80070ce:	42b2      	cmp	r2, r6
 80070d0:	d10a      	bne.n	80070e8 <__gethex+0x3f0>
 80070d2:	1171      	asrs	r1, r6, #5
 80070d4:	2201      	movs	r2, #1
 80070d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80070da:	f006 061f 	and.w	r6, r6, #31
 80070de:	fa02 f606 	lsl.w	r6, r2, r6
 80070e2:	421e      	tst	r6, r3
 80070e4:	bf18      	it	ne
 80070e6:	4617      	movne	r7, r2
 80070e8:	f047 0720 	orr.w	r7, r7, #32
 80070ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80070ee:	601c      	str	r4, [r3, #0]
 80070f0:	9b04      	ldr	r3, [sp, #16]
 80070f2:	601d      	str	r5, [r3, #0]
 80070f4:	e695      	b.n	8006e22 <__gethex+0x12a>
 80070f6:	4299      	cmp	r1, r3
 80070f8:	f843 cc04 	str.w	ip, [r3, #-4]
 80070fc:	d8d8      	bhi.n	80070b0 <__gethex+0x3b8>
 80070fe:	68a3      	ldr	r3, [r4, #8]
 8007100:	459b      	cmp	fp, r3
 8007102:	db19      	blt.n	8007138 <__gethex+0x440>
 8007104:	6861      	ldr	r1, [r4, #4]
 8007106:	ee18 0a10 	vmov	r0, s16
 800710a:	3101      	adds	r1, #1
 800710c:	f000 f928 	bl	8007360 <_Balloc>
 8007110:	4681      	mov	r9, r0
 8007112:	b918      	cbnz	r0, 800711c <__gethex+0x424>
 8007114:	4b1a      	ldr	r3, [pc, #104]	; (8007180 <__gethex+0x488>)
 8007116:	4602      	mov	r2, r0
 8007118:	2184      	movs	r1, #132	; 0x84
 800711a:	e6a8      	b.n	8006e6e <__gethex+0x176>
 800711c:	6922      	ldr	r2, [r4, #16]
 800711e:	3202      	adds	r2, #2
 8007120:	f104 010c 	add.w	r1, r4, #12
 8007124:	0092      	lsls	r2, r2, #2
 8007126:	300c      	adds	r0, #12
 8007128:	f000 f90c 	bl	8007344 <memcpy>
 800712c:	4621      	mov	r1, r4
 800712e:	ee18 0a10 	vmov	r0, s16
 8007132:	f000 f955 	bl	80073e0 <_Bfree>
 8007136:	464c      	mov	r4, r9
 8007138:	6923      	ldr	r3, [r4, #16]
 800713a:	1c5a      	adds	r2, r3, #1
 800713c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007140:	6122      	str	r2, [r4, #16]
 8007142:	2201      	movs	r2, #1
 8007144:	615a      	str	r2, [r3, #20]
 8007146:	e7bb      	b.n	80070c0 <__gethex+0x3c8>
 8007148:	6922      	ldr	r2, [r4, #16]
 800714a:	455a      	cmp	r2, fp
 800714c:	dd0b      	ble.n	8007166 <__gethex+0x46e>
 800714e:	2101      	movs	r1, #1
 8007150:	4620      	mov	r0, r4
 8007152:	f7ff fd69 	bl	8006c28 <rshift>
 8007156:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800715a:	3501      	adds	r5, #1
 800715c:	42ab      	cmp	r3, r5
 800715e:	f6ff aed0 	blt.w	8006f02 <__gethex+0x20a>
 8007162:	2701      	movs	r7, #1
 8007164:	e7c0      	b.n	80070e8 <__gethex+0x3f0>
 8007166:	f016 061f 	ands.w	r6, r6, #31
 800716a:	d0fa      	beq.n	8007162 <__gethex+0x46a>
 800716c:	449a      	add	sl, r3
 800716e:	f1c6 0620 	rsb	r6, r6, #32
 8007172:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007176:	f000 f9e9 	bl	800754c <__hi0bits>
 800717a:	42b0      	cmp	r0, r6
 800717c:	dbe7      	blt.n	800714e <__gethex+0x456>
 800717e:	e7f0      	b.n	8007162 <__gethex+0x46a>
 8007180:	08008fcc 	.word	0x08008fcc

08007184 <L_shift>:
 8007184:	f1c2 0208 	rsb	r2, r2, #8
 8007188:	0092      	lsls	r2, r2, #2
 800718a:	b570      	push	{r4, r5, r6, lr}
 800718c:	f1c2 0620 	rsb	r6, r2, #32
 8007190:	6843      	ldr	r3, [r0, #4]
 8007192:	6804      	ldr	r4, [r0, #0]
 8007194:	fa03 f506 	lsl.w	r5, r3, r6
 8007198:	432c      	orrs	r4, r5
 800719a:	40d3      	lsrs	r3, r2
 800719c:	6004      	str	r4, [r0, #0]
 800719e:	f840 3f04 	str.w	r3, [r0, #4]!
 80071a2:	4288      	cmp	r0, r1
 80071a4:	d3f4      	bcc.n	8007190 <L_shift+0xc>
 80071a6:	bd70      	pop	{r4, r5, r6, pc}

080071a8 <__match>:
 80071a8:	b530      	push	{r4, r5, lr}
 80071aa:	6803      	ldr	r3, [r0, #0]
 80071ac:	3301      	adds	r3, #1
 80071ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071b2:	b914      	cbnz	r4, 80071ba <__match+0x12>
 80071b4:	6003      	str	r3, [r0, #0]
 80071b6:	2001      	movs	r0, #1
 80071b8:	bd30      	pop	{r4, r5, pc}
 80071ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80071c2:	2d19      	cmp	r5, #25
 80071c4:	bf98      	it	ls
 80071c6:	3220      	addls	r2, #32
 80071c8:	42a2      	cmp	r2, r4
 80071ca:	d0f0      	beq.n	80071ae <__match+0x6>
 80071cc:	2000      	movs	r0, #0
 80071ce:	e7f3      	b.n	80071b8 <__match+0x10>

080071d0 <__hexnan>:
 80071d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071d4:	680b      	ldr	r3, [r1, #0]
 80071d6:	6801      	ldr	r1, [r0, #0]
 80071d8:	115e      	asrs	r6, r3, #5
 80071da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80071de:	f013 031f 	ands.w	r3, r3, #31
 80071e2:	b087      	sub	sp, #28
 80071e4:	bf18      	it	ne
 80071e6:	3604      	addne	r6, #4
 80071e8:	2500      	movs	r5, #0
 80071ea:	1f37      	subs	r7, r6, #4
 80071ec:	4682      	mov	sl, r0
 80071ee:	4690      	mov	r8, r2
 80071f0:	9301      	str	r3, [sp, #4]
 80071f2:	f846 5c04 	str.w	r5, [r6, #-4]
 80071f6:	46b9      	mov	r9, r7
 80071f8:	463c      	mov	r4, r7
 80071fa:	9502      	str	r5, [sp, #8]
 80071fc:	46ab      	mov	fp, r5
 80071fe:	784a      	ldrb	r2, [r1, #1]
 8007200:	1c4b      	adds	r3, r1, #1
 8007202:	9303      	str	r3, [sp, #12]
 8007204:	b342      	cbz	r2, 8007258 <__hexnan+0x88>
 8007206:	4610      	mov	r0, r2
 8007208:	9105      	str	r1, [sp, #20]
 800720a:	9204      	str	r2, [sp, #16]
 800720c:	f7ff fd5e 	bl	8006ccc <__hexdig_fun>
 8007210:	2800      	cmp	r0, #0
 8007212:	d14f      	bne.n	80072b4 <__hexnan+0xe4>
 8007214:	9a04      	ldr	r2, [sp, #16]
 8007216:	9905      	ldr	r1, [sp, #20]
 8007218:	2a20      	cmp	r2, #32
 800721a:	d818      	bhi.n	800724e <__hexnan+0x7e>
 800721c:	9b02      	ldr	r3, [sp, #8]
 800721e:	459b      	cmp	fp, r3
 8007220:	dd13      	ble.n	800724a <__hexnan+0x7a>
 8007222:	454c      	cmp	r4, r9
 8007224:	d206      	bcs.n	8007234 <__hexnan+0x64>
 8007226:	2d07      	cmp	r5, #7
 8007228:	dc04      	bgt.n	8007234 <__hexnan+0x64>
 800722a:	462a      	mov	r2, r5
 800722c:	4649      	mov	r1, r9
 800722e:	4620      	mov	r0, r4
 8007230:	f7ff ffa8 	bl	8007184 <L_shift>
 8007234:	4544      	cmp	r4, r8
 8007236:	d950      	bls.n	80072da <__hexnan+0x10a>
 8007238:	2300      	movs	r3, #0
 800723a:	f1a4 0904 	sub.w	r9, r4, #4
 800723e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007242:	f8cd b008 	str.w	fp, [sp, #8]
 8007246:	464c      	mov	r4, r9
 8007248:	461d      	mov	r5, r3
 800724a:	9903      	ldr	r1, [sp, #12]
 800724c:	e7d7      	b.n	80071fe <__hexnan+0x2e>
 800724e:	2a29      	cmp	r2, #41	; 0x29
 8007250:	d156      	bne.n	8007300 <__hexnan+0x130>
 8007252:	3102      	adds	r1, #2
 8007254:	f8ca 1000 	str.w	r1, [sl]
 8007258:	f1bb 0f00 	cmp.w	fp, #0
 800725c:	d050      	beq.n	8007300 <__hexnan+0x130>
 800725e:	454c      	cmp	r4, r9
 8007260:	d206      	bcs.n	8007270 <__hexnan+0xa0>
 8007262:	2d07      	cmp	r5, #7
 8007264:	dc04      	bgt.n	8007270 <__hexnan+0xa0>
 8007266:	462a      	mov	r2, r5
 8007268:	4649      	mov	r1, r9
 800726a:	4620      	mov	r0, r4
 800726c:	f7ff ff8a 	bl	8007184 <L_shift>
 8007270:	4544      	cmp	r4, r8
 8007272:	d934      	bls.n	80072de <__hexnan+0x10e>
 8007274:	f1a8 0204 	sub.w	r2, r8, #4
 8007278:	4623      	mov	r3, r4
 800727a:	f853 1b04 	ldr.w	r1, [r3], #4
 800727e:	f842 1f04 	str.w	r1, [r2, #4]!
 8007282:	429f      	cmp	r7, r3
 8007284:	d2f9      	bcs.n	800727a <__hexnan+0xaa>
 8007286:	1b3b      	subs	r3, r7, r4
 8007288:	f023 0303 	bic.w	r3, r3, #3
 800728c:	3304      	adds	r3, #4
 800728e:	3401      	adds	r4, #1
 8007290:	3e03      	subs	r6, #3
 8007292:	42b4      	cmp	r4, r6
 8007294:	bf88      	it	hi
 8007296:	2304      	movhi	r3, #4
 8007298:	4443      	add	r3, r8
 800729a:	2200      	movs	r2, #0
 800729c:	f843 2b04 	str.w	r2, [r3], #4
 80072a0:	429f      	cmp	r7, r3
 80072a2:	d2fb      	bcs.n	800729c <__hexnan+0xcc>
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	b91b      	cbnz	r3, 80072b0 <__hexnan+0xe0>
 80072a8:	4547      	cmp	r7, r8
 80072aa:	d127      	bne.n	80072fc <__hexnan+0x12c>
 80072ac:	2301      	movs	r3, #1
 80072ae:	603b      	str	r3, [r7, #0]
 80072b0:	2005      	movs	r0, #5
 80072b2:	e026      	b.n	8007302 <__hexnan+0x132>
 80072b4:	3501      	adds	r5, #1
 80072b6:	2d08      	cmp	r5, #8
 80072b8:	f10b 0b01 	add.w	fp, fp, #1
 80072bc:	dd06      	ble.n	80072cc <__hexnan+0xfc>
 80072be:	4544      	cmp	r4, r8
 80072c0:	d9c3      	bls.n	800724a <__hexnan+0x7a>
 80072c2:	2300      	movs	r3, #0
 80072c4:	f844 3c04 	str.w	r3, [r4, #-4]
 80072c8:	2501      	movs	r5, #1
 80072ca:	3c04      	subs	r4, #4
 80072cc:	6822      	ldr	r2, [r4, #0]
 80072ce:	f000 000f 	and.w	r0, r0, #15
 80072d2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80072d6:	6022      	str	r2, [r4, #0]
 80072d8:	e7b7      	b.n	800724a <__hexnan+0x7a>
 80072da:	2508      	movs	r5, #8
 80072dc:	e7b5      	b.n	800724a <__hexnan+0x7a>
 80072de:	9b01      	ldr	r3, [sp, #4]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d0df      	beq.n	80072a4 <__hexnan+0xd4>
 80072e4:	f04f 32ff 	mov.w	r2, #4294967295
 80072e8:	f1c3 0320 	rsb	r3, r3, #32
 80072ec:	fa22 f303 	lsr.w	r3, r2, r3
 80072f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80072f4:	401a      	ands	r2, r3
 80072f6:	f846 2c04 	str.w	r2, [r6, #-4]
 80072fa:	e7d3      	b.n	80072a4 <__hexnan+0xd4>
 80072fc:	3f04      	subs	r7, #4
 80072fe:	e7d1      	b.n	80072a4 <__hexnan+0xd4>
 8007300:	2004      	movs	r0, #4
 8007302:	b007      	add	sp, #28
 8007304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007308 <_localeconv_r>:
 8007308:	4800      	ldr	r0, [pc, #0]	; (800730c <_localeconv_r+0x4>)
 800730a:	4770      	bx	lr
 800730c:	20000170 	.word	0x20000170

08007310 <malloc>:
 8007310:	4b02      	ldr	r3, [pc, #8]	; (800731c <malloc+0xc>)
 8007312:	4601      	mov	r1, r0
 8007314:	6818      	ldr	r0, [r3, #0]
 8007316:	f000 bd3d 	b.w	8007d94 <_malloc_r>
 800731a:	bf00      	nop
 800731c:	20000018 	.word	0x20000018

08007320 <__ascii_mbtowc>:
 8007320:	b082      	sub	sp, #8
 8007322:	b901      	cbnz	r1, 8007326 <__ascii_mbtowc+0x6>
 8007324:	a901      	add	r1, sp, #4
 8007326:	b142      	cbz	r2, 800733a <__ascii_mbtowc+0x1a>
 8007328:	b14b      	cbz	r3, 800733e <__ascii_mbtowc+0x1e>
 800732a:	7813      	ldrb	r3, [r2, #0]
 800732c:	600b      	str	r3, [r1, #0]
 800732e:	7812      	ldrb	r2, [r2, #0]
 8007330:	1e10      	subs	r0, r2, #0
 8007332:	bf18      	it	ne
 8007334:	2001      	movne	r0, #1
 8007336:	b002      	add	sp, #8
 8007338:	4770      	bx	lr
 800733a:	4610      	mov	r0, r2
 800733c:	e7fb      	b.n	8007336 <__ascii_mbtowc+0x16>
 800733e:	f06f 0001 	mvn.w	r0, #1
 8007342:	e7f8      	b.n	8007336 <__ascii_mbtowc+0x16>

08007344 <memcpy>:
 8007344:	440a      	add	r2, r1
 8007346:	4291      	cmp	r1, r2
 8007348:	f100 33ff 	add.w	r3, r0, #4294967295
 800734c:	d100      	bne.n	8007350 <memcpy+0xc>
 800734e:	4770      	bx	lr
 8007350:	b510      	push	{r4, lr}
 8007352:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007356:	f803 4f01 	strb.w	r4, [r3, #1]!
 800735a:	4291      	cmp	r1, r2
 800735c:	d1f9      	bne.n	8007352 <memcpy+0xe>
 800735e:	bd10      	pop	{r4, pc}

08007360 <_Balloc>:
 8007360:	b570      	push	{r4, r5, r6, lr}
 8007362:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007364:	4604      	mov	r4, r0
 8007366:	460d      	mov	r5, r1
 8007368:	b976      	cbnz	r6, 8007388 <_Balloc+0x28>
 800736a:	2010      	movs	r0, #16
 800736c:	f7ff ffd0 	bl	8007310 <malloc>
 8007370:	4602      	mov	r2, r0
 8007372:	6260      	str	r0, [r4, #36]	; 0x24
 8007374:	b920      	cbnz	r0, 8007380 <_Balloc+0x20>
 8007376:	4b18      	ldr	r3, [pc, #96]	; (80073d8 <_Balloc+0x78>)
 8007378:	4818      	ldr	r0, [pc, #96]	; (80073dc <_Balloc+0x7c>)
 800737a:	2166      	movs	r1, #102	; 0x66
 800737c:	f000 fef8 	bl	8008170 <__assert_func>
 8007380:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007384:	6006      	str	r6, [r0, #0]
 8007386:	60c6      	str	r6, [r0, #12]
 8007388:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800738a:	68f3      	ldr	r3, [r6, #12]
 800738c:	b183      	cbz	r3, 80073b0 <_Balloc+0x50>
 800738e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007396:	b9b8      	cbnz	r0, 80073c8 <_Balloc+0x68>
 8007398:	2101      	movs	r1, #1
 800739a:	fa01 f605 	lsl.w	r6, r1, r5
 800739e:	1d72      	adds	r2, r6, #5
 80073a0:	0092      	lsls	r2, r2, #2
 80073a2:	4620      	mov	r0, r4
 80073a4:	f000 fc97 	bl	8007cd6 <_calloc_r>
 80073a8:	b160      	cbz	r0, 80073c4 <_Balloc+0x64>
 80073aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80073ae:	e00e      	b.n	80073ce <_Balloc+0x6e>
 80073b0:	2221      	movs	r2, #33	; 0x21
 80073b2:	2104      	movs	r1, #4
 80073b4:	4620      	mov	r0, r4
 80073b6:	f000 fc8e 	bl	8007cd6 <_calloc_r>
 80073ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073bc:	60f0      	str	r0, [r6, #12]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1e4      	bne.n	800738e <_Balloc+0x2e>
 80073c4:	2000      	movs	r0, #0
 80073c6:	bd70      	pop	{r4, r5, r6, pc}
 80073c8:	6802      	ldr	r2, [r0, #0]
 80073ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80073ce:	2300      	movs	r3, #0
 80073d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80073d4:	e7f7      	b.n	80073c6 <_Balloc+0x66>
 80073d6:	bf00      	nop
 80073d8:	08008f56 	.word	0x08008f56
 80073dc:	0800905c 	.word	0x0800905c

080073e0 <_Bfree>:
 80073e0:	b570      	push	{r4, r5, r6, lr}
 80073e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80073e4:	4605      	mov	r5, r0
 80073e6:	460c      	mov	r4, r1
 80073e8:	b976      	cbnz	r6, 8007408 <_Bfree+0x28>
 80073ea:	2010      	movs	r0, #16
 80073ec:	f7ff ff90 	bl	8007310 <malloc>
 80073f0:	4602      	mov	r2, r0
 80073f2:	6268      	str	r0, [r5, #36]	; 0x24
 80073f4:	b920      	cbnz	r0, 8007400 <_Bfree+0x20>
 80073f6:	4b09      	ldr	r3, [pc, #36]	; (800741c <_Bfree+0x3c>)
 80073f8:	4809      	ldr	r0, [pc, #36]	; (8007420 <_Bfree+0x40>)
 80073fa:	218a      	movs	r1, #138	; 0x8a
 80073fc:	f000 feb8 	bl	8008170 <__assert_func>
 8007400:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007404:	6006      	str	r6, [r0, #0]
 8007406:	60c6      	str	r6, [r0, #12]
 8007408:	b13c      	cbz	r4, 800741a <_Bfree+0x3a>
 800740a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800740c:	6862      	ldr	r2, [r4, #4]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007414:	6021      	str	r1, [r4, #0]
 8007416:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800741a:	bd70      	pop	{r4, r5, r6, pc}
 800741c:	08008f56 	.word	0x08008f56
 8007420:	0800905c 	.word	0x0800905c

08007424 <__multadd>:
 8007424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007428:	690e      	ldr	r6, [r1, #16]
 800742a:	4607      	mov	r7, r0
 800742c:	4698      	mov	r8, r3
 800742e:	460c      	mov	r4, r1
 8007430:	f101 0014 	add.w	r0, r1, #20
 8007434:	2300      	movs	r3, #0
 8007436:	6805      	ldr	r5, [r0, #0]
 8007438:	b2a9      	uxth	r1, r5
 800743a:	fb02 8101 	mla	r1, r2, r1, r8
 800743e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007442:	0c2d      	lsrs	r5, r5, #16
 8007444:	fb02 c505 	mla	r5, r2, r5, ip
 8007448:	b289      	uxth	r1, r1
 800744a:	3301      	adds	r3, #1
 800744c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007450:	429e      	cmp	r6, r3
 8007452:	f840 1b04 	str.w	r1, [r0], #4
 8007456:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800745a:	dcec      	bgt.n	8007436 <__multadd+0x12>
 800745c:	f1b8 0f00 	cmp.w	r8, #0
 8007460:	d022      	beq.n	80074a8 <__multadd+0x84>
 8007462:	68a3      	ldr	r3, [r4, #8]
 8007464:	42b3      	cmp	r3, r6
 8007466:	dc19      	bgt.n	800749c <__multadd+0x78>
 8007468:	6861      	ldr	r1, [r4, #4]
 800746a:	4638      	mov	r0, r7
 800746c:	3101      	adds	r1, #1
 800746e:	f7ff ff77 	bl	8007360 <_Balloc>
 8007472:	4605      	mov	r5, r0
 8007474:	b928      	cbnz	r0, 8007482 <__multadd+0x5e>
 8007476:	4602      	mov	r2, r0
 8007478:	4b0d      	ldr	r3, [pc, #52]	; (80074b0 <__multadd+0x8c>)
 800747a:	480e      	ldr	r0, [pc, #56]	; (80074b4 <__multadd+0x90>)
 800747c:	21b5      	movs	r1, #181	; 0xb5
 800747e:	f000 fe77 	bl	8008170 <__assert_func>
 8007482:	6922      	ldr	r2, [r4, #16]
 8007484:	3202      	adds	r2, #2
 8007486:	f104 010c 	add.w	r1, r4, #12
 800748a:	0092      	lsls	r2, r2, #2
 800748c:	300c      	adds	r0, #12
 800748e:	f7ff ff59 	bl	8007344 <memcpy>
 8007492:	4621      	mov	r1, r4
 8007494:	4638      	mov	r0, r7
 8007496:	f7ff ffa3 	bl	80073e0 <_Bfree>
 800749a:	462c      	mov	r4, r5
 800749c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80074a0:	3601      	adds	r6, #1
 80074a2:	f8c3 8014 	str.w	r8, [r3, #20]
 80074a6:	6126      	str	r6, [r4, #16]
 80074a8:	4620      	mov	r0, r4
 80074aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074ae:	bf00      	nop
 80074b0:	08008fcc 	.word	0x08008fcc
 80074b4:	0800905c 	.word	0x0800905c

080074b8 <__s2b>:
 80074b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074bc:	460c      	mov	r4, r1
 80074be:	4615      	mov	r5, r2
 80074c0:	461f      	mov	r7, r3
 80074c2:	2209      	movs	r2, #9
 80074c4:	3308      	adds	r3, #8
 80074c6:	4606      	mov	r6, r0
 80074c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80074cc:	2100      	movs	r1, #0
 80074ce:	2201      	movs	r2, #1
 80074d0:	429a      	cmp	r2, r3
 80074d2:	db09      	blt.n	80074e8 <__s2b+0x30>
 80074d4:	4630      	mov	r0, r6
 80074d6:	f7ff ff43 	bl	8007360 <_Balloc>
 80074da:	b940      	cbnz	r0, 80074ee <__s2b+0x36>
 80074dc:	4602      	mov	r2, r0
 80074de:	4b19      	ldr	r3, [pc, #100]	; (8007544 <__s2b+0x8c>)
 80074e0:	4819      	ldr	r0, [pc, #100]	; (8007548 <__s2b+0x90>)
 80074e2:	21ce      	movs	r1, #206	; 0xce
 80074e4:	f000 fe44 	bl	8008170 <__assert_func>
 80074e8:	0052      	lsls	r2, r2, #1
 80074ea:	3101      	adds	r1, #1
 80074ec:	e7f0      	b.n	80074d0 <__s2b+0x18>
 80074ee:	9b08      	ldr	r3, [sp, #32]
 80074f0:	6143      	str	r3, [r0, #20]
 80074f2:	2d09      	cmp	r5, #9
 80074f4:	f04f 0301 	mov.w	r3, #1
 80074f8:	6103      	str	r3, [r0, #16]
 80074fa:	dd16      	ble.n	800752a <__s2b+0x72>
 80074fc:	f104 0909 	add.w	r9, r4, #9
 8007500:	46c8      	mov	r8, r9
 8007502:	442c      	add	r4, r5
 8007504:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007508:	4601      	mov	r1, r0
 800750a:	3b30      	subs	r3, #48	; 0x30
 800750c:	220a      	movs	r2, #10
 800750e:	4630      	mov	r0, r6
 8007510:	f7ff ff88 	bl	8007424 <__multadd>
 8007514:	45a0      	cmp	r8, r4
 8007516:	d1f5      	bne.n	8007504 <__s2b+0x4c>
 8007518:	f1a5 0408 	sub.w	r4, r5, #8
 800751c:	444c      	add	r4, r9
 800751e:	1b2d      	subs	r5, r5, r4
 8007520:	1963      	adds	r3, r4, r5
 8007522:	42bb      	cmp	r3, r7
 8007524:	db04      	blt.n	8007530 <__s2b+0x78>
 8007526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800752a:	340a      	adds	r4, #10
 800752c:	2509      	movs	r5, #9
 800752e:	e7f6      	b.n	800751e <__s2b+0x66>
 8007530:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007534:	4601      	mov	r1, r0
 8007536:	3b30      	subs	r3, #48	; 0x30
 8007538:	220a      	movs	r2, #10
 800753a:	4630      	mov	r0, r6
 800753c:	f7ff ff72 	bl	8007424 <__multadd>
 8007540:	e7ee      	b.n	8007520 <__s2b+0x68>
 8007542:	bf00      	nop
 8007544:	08008fcc 	.word	0x08008fcc
 8007548:	0800905c 	.word	0x0800905c

0800754c <__hi0bits>:
 800754c:	0c03      	lsrs	r3, r0, #16
 800754e:	041b      	lsls	r3, r3, #16
 8007550:	b9d3      	cbnz	r3, 8007588 <__hi0bits+0x3c>
 8007552:	0400      	lsls	r0, r0, #16
 8007554:	2310      	movs	r3, #16
 8007556:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800755a:	bf04      	itt	eq
 800755c:	0200      	lsleq	r0, r0, #8
 800755e:	3308      	addeq	r3, #8
 8007560:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007564:	bf04      	itt	eq
 8007566:	0100      	lsleq	r0, r0, #4
 8007568:	3304      	addeq	r3, #4
 800756a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800756e:	bf04      	itt	eq
 8007570:	0080      	lsleq	r0, r0, #2
 8007572:	3302      	addeq	r3, #2
 8007574:	2800      	cmp	r0, #0
 8007576:	db05      	blt.n	8007584 <__hi0bits+0x38>
 8007578:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800757c:	f103 0301 	add.w	r3, r3, #1
 8007580:	bf08      	it	eq
 8007582:	2320      	moveq	r3, #32
 8007584:	4618      	mov	r0, r3
 8007586:	4770      	bx	lr
 8007588:	2300      	movs	r3, #0
 800758a:	e7e4      	b.n	8007556 <__hi0bits+0xa>

0800758c <__lo0bits>:
 800758c:	6803      	ldr	r3, [r0, #0]
 800758e:	f013 0207 	ands.w	r2, r3, #7
 8007592:	4601      	mov	r1, r0
 8007594:	d00b      	beq.n	80075ae <__lo0bits+0x22>
 8007596:	07da      	lsls	r2, r3, #31
 8007598:	d424      	bmi.n	80075e4 <__lo0bits+0x58>
 800759a:	0798      	lsls	r0, r3, #30
 800759c:	bf49      	itett	mi
 800759e:	085b      	lsrmi	r3, r3, #1
 80075a0:	089b      	lsrpl	r3, r3, #2
 80075a2:	2001      	movmi	r0, #1
 80075a4:	600b      	strmi	r3, [r1, #0]
 80075a6:	bf5c      	itt	pl
 80075a8:	600b      	strpl	r3, [r1, #0]
 80075aa:	2002      	movpl	r0, #2
 80075ac:	4770      	bx	lr
 80075ae:	b298      	uxth	r0, r3
 80075b0:	b9b0      	cbnz	r0, 80075e0 <__lo0bits+0x54>
 80075b2:	0c1b      	lsrs	r3, r3, #16
 80075b4:	2010      	movs	r0, #16
 80075b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80075ba:	bf04      	itt	eq
 80075bc:	0a1b      	lsreq	r3, r3, #8
 80075be:	3008      	addeq	r0, #8
 80075c0:	071a      	lsls	r2, r3, #28
 80075c2:	bf04      	itt	eq
 80075c4:	091b      	lsreq	r3, r3, #4
 80075c6:	3004      	addeq	r0, #4
 80075c8:	079a      	lsls	r2, r3, #30
 80075ca:	bf04      	itt	eq
 80075cc:	089b      	lsreq	r3, r3, #2
 80075ce:	3002      	addeq	r0, #2
 80075d0:	07da      	lsls	r2, r3, #31
 80075d2:	d403      	bmi.n	80075dc <__lo0bits+0x50>
 80075d4:	085b      	lsrs	r3, r3, #1
 80075d6:	f100 0001 	add.w	r0, r0, #1
 80075da:	d005      	beq.n	80075e8 <__lo0bits+0x5c>
 80075dc:	600b      	str	r3, [r1, #0]
 80075de:	4770      	bx	lr
 80075e0:	4610      	mov	r0, r2
 80075e2:	e7e8      	b.n	80075b6 <__lo0bits+0x2a>
 80075e4:	2000      	movs	r0, #0
 80075e6:	4770      	bx	lr
 80075e8:	2020      	movs	r0, #32
 80075ea:	4770      	bx	lr

080075ec <__i2b>:
 80075ec:	b510      	push	{r4, lr}
 80075ee:	460c      	mov	r4, r1
 80075f0:	2101      	movs	r1, #1
 80075f2:	f7ff feb5 	bl	8007360 <_Balloc>
 80075f6:	4602      	mov	r2, r0
 80075f8:	b928      	cbnz	r0, 8007606 <__i2b+0x1a>
 80075fa:	4b05      	ldr	r3, [pc, #20]	; (8007610 <__i2b+0x24>)
 80075fc:	4805      	ldr	r0, [pc, #20]	; (8007614 <__i2b+0x28>)
 80075fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007602:	f000 fdb5 	bl	8008170 <__assert_func>
 8007606:	2301      	movs	r3, #1
 8007608:	6144      	str	r4, [r0, #20]
 800760a:	6103      	str	r3, [r0, #16]
 800760c:	bd10      	pop	{r4, pc}
 800760e:	bf00      	nop
 8007610:	08008fcc 	.word	0x08008fcc
 8007614:	0800905c 	.word	0x0800905c

08007618 <__multiply>:
 8007618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800761c:	4614      	mov	r4, r2
 800761e:	690a      	ldr	r2, [r1, #16]
 8007620:	6923      	ldr	r3, [r4, #16]
 8007622:	429a      	cmp	r2, r3
 8007624:	bfb8      	it	lt
 8007626:	460b      	movlt	r3, r1
 8007628:	460d      	mov	r5, r1
 800762a:	bfbc      	itt	lt
 800762c:	4625      	movlt	r5, r4
 800762e:	461c      	movlt	r4, r3
 8007630:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007634:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007638:	68ab      	ldr	r3, [r5, #8]
 800763a:	6869      	ldr	r1, [r5, #4]
 800763c:	eb0a 0709 	add.w	r7, sl, r9
 8007640:	42bb      	cmp	r3, r7
 8007642:	b085      	sub	sp, #20
 8007644:	bfb8      	it	lt
 8007646:	3101      	addlt	r1, #1
 8007648:	f7ff fe8a 	bl	8007360 <_Balloc>
 800764c:	b930      	cbnz	r0, 800765c <__multiply+0x44>
 800764e:	4602      	mov	r2, r0
 8007650:	4b42      	ldr	r3, [pc, #264]	; (800775c <__multiply+0x144>)
 8007652:	4843      	ldr	r0, [pc, #268]	; (8007760 <__multiply+0x148>)
 8007654:	f240 115d 	movw	r1, #349	; 0x15d
 8007658:	f000 fd8a 	bl	8008170 <__assert_func>
 800765c:	f100 0614 	add.w	r6, r0, #20
 8007660:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007664:	4633      	mov	r3, r6
 8007666:	2200      	movs	r2, #0
 8007668:	4543      	cmp	r3, r8
 800766a:	d31e      	bcc.n	80076aa <__multiply+0x92>
 800766c:	f105 0c14 	add.w	ip, r5, #20
 8007670:	f104 0314 	add.w	r3, r4, #20
 8007674:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007678:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800767c:	9202      	str	r2, [sp, #8]
 800767e:	ebac 0205 	sub.w	r2, ip, r5
 8007682:	3a15      	subs	r2, #21
 8007684:	f022 0203 	bic.w	r2, r2, #3
 8007688:	3204      	adds	r2, #4
 800768a:	f105 0115 	add.w	r1, r5, #21
 800768e:	458c      	cmp	ip, r1
 8007690:	bf38      	it	cc
 8007692:	2204      	movcc	r2, #4
 8007694:	9201      	str	r2, [sp, #4]
 8007696:	9a02      	ldr	r2, [sp, #8]
 8007698:	9303      	str	r3, [sp, #12]
 800769a:	429a      	cmp	r2, r3
 800769c:	d808      	bhi.n	80076b0 <__multiply+0x98>
 800769e:	2f00      	cmp	r7, #0
 80076a0:	dc55      	bgt.n	800774e <__multiply+0x136>
 80076a2:	6107      	str	r7, [r0, #16]
 80076a4:	b005      	add	sp, #20
 80076a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076aa:	f843 2b04 	str.w	r2, [r3], #4
 80076ae:	e7db      	b.n	8007668 <__multiply+0x50>
 80076b0:	f8b3 a000 	ldrh.w	sl, [r3]
 80076b4:	f1ba 0f00 	cmp.w	sl, #0
 80076b8:	d020      	beq.n	80076fc <__multiply+0xe4>
 80076ba:	f105 0e14 	add.w	lr, r5, #20
 80076be:	46b1      	mov	r9, r6
 80076c0:	2200      	movs	r2, #0
 80076c2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80076c6:	f8d9 b000 	ldr.w	fp, [r9]
 80076ca:	b2a1      	uxth	r1, r4
 80076cc:	fa1f fb8b 	uxth.w	fp, fp
 80076d0:	fb0a b101 	mla	r1, sl, r1, fp
 80076d4:	4411      	add	r1, r2
 80076d6:	f8d9 2000 	ldr.w	r2, [r9]
 80076da:	0c24      	lsrs	r4, r4, #16
 80076dc:	0c12      	lsrs	r2, r2, #16
 80076de:	fb0a 2404 	mla	r4, sl, r4, r2
 80076e2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80076e6:	b289      	uxth	r1, r1
 80076e8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80076ec:	45f4      	cmp	ip, lr
 80076ee:	f849 1b04 	str.w	r1, [r9], #4
 80076f2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80076f6:	d8e4      	bhi.n	80076c2 <__multiply+0xaa>
 80076f8:	9901      	ldr	r1, [sp, #4]
 80076fa:	5072      	str	r2, [r6, r1]
 80076fc:	9a03      	ldr	r2, [sp, #12]
 80076fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007702:	3304      	adds	r3, #4
 8007704:	f1b9 0f00 	cmp.w	r9, #0
 8007708:	d01f      	beq.n	800774a <__multiply+0x132>
 800770a:	6834      	ldr	r4, [r6, #0]
 800770c:	f105 0114 	add.w	r1, r5, #20
 8007710:	46b6      	mov	lr, r6
 8007712:	f04f 0a00 	mov.w	sl, #0
 8007716:	880a      	ldrh	r2, [r1, #0]
 8007718:	f8be b002 	ldrh.w	fp, [lr, #2]
 800771c:	fb09 b202 	mla	r2, r9, r2, fp
 8007720:	4492      	add	sl, r2
 8007722:	b2a4      	uxth	r4, r4
 8007724:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007728:	f84e 4b04 	str.w	r4, [lr], #4
 800772c:	f851 4b04 	ldr.w	r4, [r1], #4
 8007730:	f8be 2000 	ldrh.w	r2, [lr]
 8007734:	0c24      	lsrs	r4, r4, #16
 8007736:	fb09 2404 	mla	r4, r9, r4, r2
 800773a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800773e:	458c      	cmp	ip, r1
 8007740:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007744:	d8e7      	bhi.n	8007716 <__multiply+0xfe>
 8007746:	9a01      	ldr	r2, [sp, #4]
 8007748:	50b4      	str	r4, [r6, r2]
 800774a:	3604      	adds	r6, #4
 800774c:	e7a3      	b.n	8007696 <__multiply+0x7e>
 800774e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1a5      	bne.n	80076a2 <__multiply+0x8a>
 8007756:	3f01      	subs	r7, #1
 8007758:	e7a1      	b.n	800769e <__multiply+0x86>
 800775a:	bf00      	nop
 800775c:	08008fcc 	.word	0x08008fcc
 8007760:	0800905c 	.word	0x0800905c

08007764 <__pow5mult>:
 8007764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007768:	4615      	mov	r5, r2
 800776a:	f012 0203 	ands.w	r2, r2, #3
 800776e:	4606      	mov	r6, r0
 8007770:	460f      	mov	r7, r1
 8007772:	d007      	beq.n	8007784 <__pow5mult+0x20>
 8007774:	4c25      	ldr	r4, [pc, #148]	; (800780c <__pow5mult+0xa8>)
 8007776:	3a01      	subs	r2, #1
 8007778:	2300      	movs	r3, #0
 800777a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800777e:	f7ff fe51 	bl	8007424 <__multadd>
 8007782:	4607      	mov	r7, r0
 8007784:	10ad      	asrs	r5, r5, #2
 8007786:	d03d      	beq.n	8007804 <__pow5mult+0xa0>
 8007788:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800778a:	b97c      	cbnz	r4, 80077ac <__pow5mult+0x48>
 800778c:	2010      	movs	r0, #16
 800778e:	f7ff fdbf 	bl	8007310 <malloc>
 8007792:	4602      	mov	r2, r0
 8007794:	6270      	str	r0, [r6, #36]	; 0x24
 8007796:	b928      	cbnz	r0, 80077a4 <__pow5mult+0x40>
 8007798:	4b1d      	ldr	r3, [pc, #116]	; (8007810 <__pow5mult+0xac>)
 800779a:	481e      	ldr	r0, [pc, #120]	; (8007814 <__pow5mult+0xb0>)
 800779c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80077a0:	f000 fce6 	bl	8008170 <__assert_func>
 80077a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077a8:	6004      	str	r4, [r0, #0]
 80077aa:	60c4      	str	r4, [r0, #12]
 80077ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80077b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80077b4:	b94c      	cbnz	r4, 80077ca <__pow5mult+0x66>
 80077b6:	f240 2171 	movw	r1, #625	; 0x271
 80077ba:	4630      	mov	r0, r6
 80077bc:	f7ff ff16 	bl	80075ec <__i2b>
 80077c0:	2300      	movs	r3, #0
 80077c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80077c6:	4604      	mov	r4, r0
 80077c8:	6003      	str	r3, [r0, #0]
 80077ca:	f04f 0900 	mov.w	r9, #0
 80077ce:	07eb      	lsls	r3, r5, #31
 80077d0:	d50a      	bpl.n	80077e8 <__pow5mult+0x84>
 80077d2:	4639      	mov	r1, r7
 80077d4:	4622      	mov	r2, r4
 80077d6:	4630      	mov	r0, r6
 80077d8:	f7ff ff1e 	bl	8007618 <__multiply>
 80077dc:	4639      	mov	r1, r7
 80077de:	4680      	mov	r8, r0
 80077e0:	4630      	mov	r0, r6
 80077e2:	f7ff fdfd 	bl	80073e0 <_Bfree>
 80077e6:	4647      	mov	r7, r8
 80077e8:	106d      	asrs	r5, r5, #1
 80077ea:	d00b      	beq.n	8007804 <__pow5mult+0xa0>
 80077ec:	6820      	ldr	r0, [r4, #0]
 80077ee:	b938      	cbnz	r0, 8007800 <__pow5mult+0x9c>
 80077f0:	4622      	mov	r2, r4
 80077f2:	4621      	mov	r1, r4
 80077f4:	4630      	mov	r0, r6
 80077f6:	f7ff ff0f 	bl	8007618 <__multiply>
 80077fa:	6020      	str	r0, [r4, #0]
 80077fc:	f8c0 9000 	str.w	r9, [r0]
 8007800:	4604      	mov	r4, r0
 8007802:	e7e4      	b.n	80077ce <__pow5mult+0x6a>
 8007804:	4638      	mov	r0, r7
 8007806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800780a:	bf00      	nop
 800780c:	080091b0 	.word	0x080091b0
 8007810:	08008f56 	.word	0x08008f56
 8007814:	0800905c 	.word	0x0800905c

08007818 <__lshift>:
 8007818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800781c:	460c      	mov	r4, r1
 800781e:	6849      	ldr	r1, [r1, #4]
 8007820:	6923      	ldr	r3, [r4, #16]
 8007822:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007826:	68a3      	ldr	r3, [r4, #8]
 8007828:	4607      	mov	r7, r0
 800782a:	4691      	mov	r9, r2
 800782c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007830:	f108 0601 	add.w	r6, r8, #1
 8007834:	42b3      	cmp	r3, r6
 8007836:	db0b      	blt.n	8007850 <__lshift+0x38>
 8007838:	4638      	mov	r0, r7
 800783a:	f7ff fd91 	bl	8007360 <_Balloc>
 800783e:	4605      	mov	r5, r0
 8007840:	b948      	cbnz	r0, 8007856 <__lshift+0x3e>
 8007842:	4602      	mov	r2, r0
 8007844:	4b28      	ldr	r3, [pc, #160]	; (80078e8 <__lshift+0xd0>)
 8007846:	4829      	ldr	r0, [pc, #164]	; (80078ec <__lshift+0xd4>)
 8007848:	f240 11d9 	movw	r1, #473	; 0x1d9
 800784c:	f000 fc90 	bl	8008170 <__assert_func>
 8007850:	3101      	adds	r1, #1
 8007852:	005b      	lsls	r3, r3, #1
 8007854:	e7ee      	b.n	8007834 <__lshift+0x1c>
 8007856:	2300      	movs	r3, #0
 8007858:	f100 0114 	add.w	r1, r0, #20
 800785c:	f100 0210 	add.w	r2, r0, #16
 8007860:	4618      	mov	r0, r3
 8007862:	4553      	cmp	r3, sl
 8007864:	db33      	blt.n	80078ce <__lshift+0xb6>
 8007866:	6920      	ldr	r0, [r4, #16]
 8007868:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800786c:	f104 0314 	add.w	r3, r4, #20
 8007870:	f019 091f 	ands.w	r9, r9, #31
 8007874:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007878:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800787c:	d02b      	beq.n	80078d6 <__lshift+0xbe>
 800787e:	f1c9 0e20 	rsb	lr, r9, #32
 8007882:	468a      	mov	sl, r1
 8007884:	2200      	movs	r2, #0
 8007886:	6818      	ldr	r0, [r3, #0]
 8007888:	fa00 f009 	lsl.w	r0, r0, r9
 800788c:	4302      	orrs	r2, r0
 800788e:	f84a 2b04 	str.w	r2, [sl], #4
 8007892:	f853 2b04 	ldr.w	r2, [r3], #4
 8007896:	459c      	cmp	ip, r3
 8007898:	fa22 f20e 	lsr.w	r2, r2, lr
 800789c:	d8f3      	bhi.n	8007886 <__lshift+0x6e>
 800789e:	ebac 0304 	sub.w	r3, ip, r4
 80078a2:	3b15      	subs	r3, #21
 80078a4:	f023 0303 	bic.w	r3, r3, #3
 80078a8:	3304      	adds	r3, #4
 80078aa:	f104 0015 	add.w	r0, r4, #21
 80078ae:	4584      	cmp	ip, r0
 80078b0:	bf38      	it	cc
 80078b2:	2304      	movcc	r3, #4
 80078b4:	50ca      	str	r2, [r1, r3]
 80078b6:	b10a      	cbz	r2, 80078bc <__lshift+0xa4>
 80078b8:	f108 0602 	add.w	r6, r8, #2
 80078bc:	3e01      	subs	r6, #1
 80078be:	4638      	mov	r0, r7
 80078c0:	612e      	str	r6, [r5, #16]
 80078c2:	4621      	mov	r1, r4
 80078c4:	f7ff fd8c 	bl	80073e0 <_Bfree>
 80078c8:	4628      	mov	r0, r5
 80078ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80078d2:	3301      	adds	r3, #1
 80078d4:	e7c5      	b.n	8007862 <__lshift+0x4a>
 80078d6:	3904      	subs	r1, #4
 80078d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80078dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80078e0:	459c      	cmp	ip, r3
 80078e2:	d8f9      	bhi.n	80078d8 <__lshift+0xc0>
 80078e4:	e7ea      	b.n	80078bc <__lshift+0xa4>
 80078e6:	bf00      	nop
 80078e8:	08008fcc 	.word	0x08008fcc
 80078ec:	0800905c 	.word	0x0800905c

080078f0 <__mcmp>:
 80078f0:	b530      	push	{r4, r5, lr}
 80078f2:	6902      	ldr	r2, [r0, #16]
 80078f4:	690c      	ldr	r4, [r1, #16]
 80078f6:	1b12      	subs	r2, r2, r4
 80078f8:	d10e      	bne.n	8007918 <__mcmp+0x28>
 80078fa:	f100 0314 	add.w	r3, r0, #20
 80078fe:	3114      	adds	r1, #20
 8007900:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007904:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007908:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800790c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007910:	42a5      	cmp	r5, r4
 8007912:	d003      	beq.n	800791c <__mcmp+0x2c>
 8007914:	d305      	bcc.n	8007922 <__mcmp+0x32>
 8007916:	2201      	movs	r2, #1
 8007918:	4610      	mov	r0, r2
 800791a:	bd30      	pop	{r4, r5, pc}
 800791c:	4283      	cmp	r3, r0
 800791e:	d3f3      	bcc.n	8007908 <__mcmp+0x18>
 8007920:	e7fa      	b.n	8007918 <__mcmp+0x28>
 8007922:	f04f 32ff 	mov.w	r2, #4294967295
 8007926:	e7f7      	b.n	8007918 <__mcmp+0x28>

08007928 <__mdiff>:
 8007928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800792c:	460c      	mov	r4, r1
 800792e:	4606      	mov	r6, r0
 8007930:	4611      	mov	r1, r2
 8007932:	4620      	mov	r0, r4
 8007934:	4617      	mov	r7, r2
 8007936:	f7ff ffdb 	bl	80078f0 <__mcmp>
 800793a:	1e05      	subs	r5, r0, #0
 800793c:	d110      	bne.n	8007960 <__mdiff+0x38>
 800793e:	4629      	mov	r1, r5
 8007940:	4630      	mov	r0, r6
 8007942:	f7ff fd0d 	bl	8007360 <_Balloc>
 8007946:	b930      	cbnz	r0, 8007956 <__mdiff+0x2e>
 8007948:	4b39      	ldr	r3, [pc, #228]	; (8007a30 <__mdiff+0x108>)
 800794a:	4602      	mov	r2, r0
 800794c:	f240 2132 	movw	r1, #562	; 0x232
 8007950:	4838      	ldr	r0, [pc, #224]	; (8007a34 <__mdiff+0x10c>)
 8007952:	f000 fc0d 	bl	8008170 <__assert_func>
 8007956:	2301      	movs	r3, #1
 8007958:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800795c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007960:	bfa4      	itt	ge
 8007962:	463b      	movge	r3, r7
 8007964:	4627      	movge	r7, r4
 8007966:	4630      	mov	r0, r6
 8007968:	6879      	ldr	r1, [r7, #4]
 800796a:	bfa6      	itte	ge
 800796c:	461c      	movge	r4, r3
 800796e:	2500      	movge	r5, #0
 8007970:	2501      	movlt	r5, #1
 8007972:	f7ff fcf5 	bl	8007360 <_Balloc>
 8007976:	b920      	cbnz	r0, 8007982 <__mdiff+0x5a>
 8007978:	4b2d      	ldr	r3, [pc, #180]	; (8007a30 <__mdiff+0x108>)
 800797a:	4602      	mov	r2, r0
 800797c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007980:	e7e6      	b.n	8007950 <__mdiff+0x28>
 8007982:	693e      	ldr	r6, [r7, #16]
 8007984:	60c5      	str	r5, [r0, #12]
 8007986:	6925      	ldr	r5, [r4, #16]
 8007988:	f107 0114 	add.w	r1, r7, #20
 800798c:	f104 0914 	add.w	r9, r4, #20
 8007990:	f100 0e14 	add.w	lr, r0, #20
 8007994:	f107 0210 	add.w	r2, r7, #16
 8007998:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800799c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80079a0:	46f2      	mov	sl, lr
 80079a2:	2700      	movs	r7, #0
 80079a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80079a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80079ac:	fa1f f883 	uxth.w	r8, r3
 80079b0:	fa17 f78b 	uxtah	r7, r7, fp
 80079b4:	0c1b      	lsrs	r3, r3, #16
 80079b6:	eba7 0808 	sub.w	r8, r7, r8
 80079ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80079be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80079c2:	fa1f f888 	uxth.w	r8, r8
 80079c6:	141f      	asrs	r7, r3, #16
 80079c8:	454d      	cmp	r5, r9
 80079ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80079ce:	f84a 3b04 	str.w	r3, [sl], #4
 80079d2:	d8e7      	bhi.n	80079a4 <__mdiff+0x7c>
 80079d4:	1b2b      	subs	r3, r5, r4
 80079d6:	3b15      	subs	r3, #21
 80079d8:	f023 0303 	bic.w	r3, r3, #3
 80079dc:	3304      	adds	r3, #4
 80079de:	3415      	adds	r4, #21
 80079e0:	42a5      	cmp	r5, r4
 80079e2:	bf38      	it	cc
 80079e4:	2304      	movcc	r3, #4
 80079e6:	4419      	add	r1, r3
 80079e8:	4473      	add	r3, lr
 80079ea:	469e      	mov	lr, r3
 80079ec:	460d      	mov	r5, r1
 80079ee:	4565      	cmp	r5, ip
 80079f0:	d30e      	bcc.n	8007a10 <__mdiff+0xe8>
 80079f2:	f10c 0203 	add.w	r2, ip, #3
 80079f6:	1a52      	subs	r2, r2, r1
 80079f8:	f022 0203 	bic.w	r2, r2, #3
 80079fc:	3903      	subs	r1, #3
 80079fe:	458c      	cmp	ip, r1
 8007a00:	bf38      	it	cc
 8007a02:	2200      	movcc	r2, #0
 8007a04:	441a      	add	r2, r3
 8007a06:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007a0a:	b17b      	cbz	r3, 8007a2c <__mdiff+0x104>
 8007a0c:	6106      	str	r6, [r0, #16]
 8007a0e:	e7a5      	b.n	800795c <__mdiff+0x34>
 8007a10:	f855 8b04 	ldr.w	r8, [r5], #4
 8007a14:	fa17 f488 	uxtah	r4, r7, r8
 8007a18:	1422      	asrs	r2, r4, #16
 8007a1a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007a1e:	b2a4      	uxth	r4, r4
 8007a20:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007a24:	f84e 4b04 	str.w	r4, [lr], #4
 8007a28:	1417      	asrs	r7, r2, #16
 8007a2a:	e7e0      	b.n	80079ee <__mdiff+0xc6>
 8007a2c:	3e01      	subs	r6, #1
 8007a2e:	e7ea      	b.n	8007a06 <__mdiff+0xde>
 8007a30:	08008fcc 	.word	0x08008fcc
 8007a34:	0800905c 	.word	0x0800905c

08007a38 <__ulp>:
 8007a38:	b082      	sub	sp, #8
 8007a3a:	ed8d 0b00 	vstr	d0, [sp]
 8007a3e:	9b01      	ldr	r3, [sp, #4]
 8007a40:	4912      	ldr	r1, [pc, #72]	; (8007a8c <__ulp+0x54>)
 8007a42:	4019      	ands	r1, r3
 8007a44:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007a48:	2900      	cmp	r1, #0
 8007a4a:	dd05      	ble.n	8007a58 <__ulp+0x20>
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	ec43 2b10 	vmov	d0, r2, r3
 8007a54:	b002      	add	sp, #8
 8007a56:	4770      	bx	lr
 8007a58:	4249      	negs	r1, r1
 8007a5a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007a5e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007a62:	f04f 0200 	mov.w	r2, #0
 8007a66:	f04f 0300 	mov.w	r3, #0
 8007a6a:	da04      	bge.n	8007a76 <__ulp+0x3e>
 8007a6c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007a70:	fa41 f300 	asr.w	r3, r1, r0
 8007a74:	e7ec      	b.n	8007a50 <__ulp+0x18>
 8007a76:	f1a0 0114 	sub.w	r1, r0, #20
 8007a7a:	291e      	cmp	r1, #30
 8007a7c:	bfda      	itte	le
 8007a7e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007a82:	fa20 f101 	lsrle.w	r1, r0, r1
 8007a86:	2101      	movgt	r1, #1
 8007a88:	460a      	mov	r2, r1
 8007a8a:	e7e1      	b.n	8007a50 <__ulp+0x18>
 8007a8c:	7ff00000 	.word	0x7ff00000

08007a90 <__b2d>:
 8007a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a92:	6905      	ldr	r5, [r0, #16]
 8007a94:	f100 0714 	add.w	r7, r0, #20
 8007a98:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007a9c:	1f2e      	subs	r6, r5, #4
 8007a9e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	f7ff fd52 	bl	800754c <__hi0bits>
 8007aa8:	f1c0 0320 	rsb	r3, r0, #32
 8007aac:	280a      	cmp	r0, #10
 8007aae:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007b2c <__b2d+0x9c>
 8007ab2:	600b      	str	r3, [r1, #0]
 8007ab4:	dc14      	bgt.n	8007ae0 <__b2d+0x50>
 8007ab6:	f1c0 0e0b 	rsb	lr, r0, #11
 8007aba:	fa24 f10e 	lsr.w	r1, r4, lr
 8007abe:	42b7      	cmp	r7, r6
 8007ac0:	ea41 030c 	orr.w	r3, r1, ip
 8007ac4:	bf34      	ite	cc
 8007ac6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007aca:	2100      	movcs	r1, #0
 8007acc:	3015      	adds	r0, #21
 8007ace:	fa04 f000 	lsl.w	r0, r4, r0
 8007ad2:	fa21 f10e 	lsr.w	r1, r1, lr
 8007ad6:	ea40 0201 	orr.w	r2, r0, r1
 8007ada:	ec43 2b10 	vmov	d0, r2, r3
 8007ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ae0:	42b7      	cmp	r7, r6
 8007ae2:	bf3a      	itte	cc
 8007ae4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007ae8:	f1a5 0608 	subcc.w	r6, r5, #8
 8007aec:	2100      	movcs	r1, #0
 8007aee:	380b      	subs	r0, #11
 8007af0:	d017      	beq.n	8007b22 <__b2d+0x92>
 8007af2:	f1c0 0c20 	rsb	ip, r0, #32
 8007af6:	fa04 f500 	lsl.w	r5, r4, r0
 8007afa:	42be      	cmp	r6, r7
 8007afc:	fa21 f40c 	lsr.w	r4, r1, ip
 8007b00:	ea45 0504 	orr.w	r5, r5, r4
 8007b04:	bf8c      	ite	hi
 8007b06:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007b0a:	2400      	movls	r4, #0
 8007b0c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007b10:	fa01 f000 	lsl.w	r0, r1, r0
 8007b14:	fa24 f40c 	lsr.w	r4, r4, ip
 8007b18:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007b1c:	ea40 0204 	orr.w	r2, r0, r4
 8007b20:	e7db      	b.n	8007ada <__b2d+0x4a>
 8007b22:	ea44 030c 	orr.w	r3, r4, ip
 8007b26:	460a      	mov	r2, r1
 8007b28:	e7d7      	b.n	8007ada <__b2d+0x4a>
 8007b2a:	bf00      	nop
 8007b2c:	3ff00000 	.word	0x3ff00000

08007b30 <__d2b>:
 8007b30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b34:	4689      	mov	r9, r1
 8007b36:	2101      	movs	r1, #1
 8007b38:	ec57 6b10 	vmov	r6, r7, d0
 8007b3c:	4690      	mov	r8, r2
 8007b3e:	f7ff fc0f 	bl	8007360 <_Balloc>
 8007b42:	4604      	mov	r4, r0
 8007b44:	b930      	cbnz	r0, 8007b54 <__d2b+0x24>
 8007b46:	4602      	mov	r2, r0
 8007b48:	4b25      	ldr	r3, [pc, #148]	; (8007be0 <__d2b+0xb0>)
 8007b4a:	4826      	ldr	r0, [pc, #152]	; (8007be4 <__d2b+0xb4>)
 8007b4c:	f240 310a 	movw	r1, #778	; 0x30a
 8007b50:	f000 fb0e 	bl	8008170 <__assert_func>
 8007b54:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007b58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b5c:	bb35      	cbnz	r5, 8007bac <__d2b+0x7c>
 8007b5e:	2e00      	cmp	r6, #0
 8007b60:	9301      	str	r3, [sp, #4]
 8007b62:	d028      	beq.n	8007bb6 <__d2b+0x86>
 8007b64:	4668      	mov	r0, sp
 8007b66:	9600      	str	r6, [sp, #0]
 8007b68:	f7ff fd10 	bl	800758c <__lo0bits>
 8007b6c:	9900      	ldr	r1, [sp, #0]
 8007b6e:	b300      	cbz	r0, 8007bb2 <__d2b+0x82>
 8007b70:	9a01      	ldr	r2, [sp, #4]
 8007b72:	f1c0 0320 	rsb	r3, r0, #32
 8007b76:	fa02 f303 	lsl.w	r3, r2, r3
 8007b7a:	430b      	orrs	r3, r1
 8007b7c:	40c2      	lsrs	r2, r0
 8007b7e:	6163      	str	r3, [r4, #20]
 8007b80:	9201      	str	r2, [sp, #4]
 8007b82:	9b01      	ldr	r3, [sp, #4]
 8007b84:	61a3      	str	r3, [r4, #24]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	bf14      	ite	ne
 8007b8a:	2202      	movne	r2, #2
 8007b8c:	2201      	moveq	r2, #1
 8007b8e:	6122      	str	r2, [r4, #16]
 8007b90:	b1d5      	cbz	r5, 8007bc8 <__d2b+0x98>
 8007b92:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007b96:	4405      	add	r5, r0
 8007b98:	f8c9 5000 	str.w	r5, [r9]
 8007b9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007ba0:	f8c8 0000 	str.w	r0, [r8]
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	b003      	add	sp, #12
 8007ba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007bb0:	e7d5      	b.n	8007b5e <__d2b+0x2e>
 8007bb2:	6161      	str	r1, [r4, #20]
 8007bb4:	e7e5      	b.n	8007b82 <__d2b+0x52>
 8007bb6:	a801      	add	r0, sp, #4
 8007bb8:	f7ff fce8 	bl	800758c <__lo0bits>
 8007bbc:	9b01      	ldr	r3, [sp, #4]
 8007bbe:	6163      	str	r3, [r4, #20]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	6122      	str	r2, [r4, #16]
 8007bc4:	3020      	adds	r0, #32
 8007bc6:	e7e3      	b.n	8007b90 <__d2b+0x60>
 8007bc8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007bcc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007bd0:	f8c9 0000 	str.w	r0, [r9]
 8007bd4:	6918      	ldr	r0, [r3, #16]
 8007bd6:	f7ff fcb9 	bl	800754c <__hi0bits>
 8007bda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007bde:	e7df      	b.n	8007ba0 <__d2b+0x70>
 8007be0:	08008fcc 	.word	0x08008fcc
 8007be4:	0800905c 	.word	0x0800905c

08007be8 <__ratio>:
 8007be8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bec:	4688      	mov	r8, r1
 8007bee:	4669      	mov	r1, sp
 8007bf0:	4681      	mov	r9, r0
 8007bf2:	f7ff ff4d 	bl	8007a90 <__b2d>
 8007bf6:	a901      	add	r1, sp, #4
 8007bf8:	4640      	mov	r0, r8
 8007bfa:	ec55 4b10 	vmov	r4, r5, d0
 8007bfe:	f7ff ff47 	bl	8007a90 <__b2d>
 8007c02:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c06:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007c0a:	eba3 0c02 	sub.w	ip, r3, r2
 8007c0e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007c12:	1a9b      	subs	r3, r3, r2
 8007c14:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007c18:	ec51 0b10 	vmov	r0, r1, d0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	bfd6      	itet	le
 8007c20:	460a      	movle	r2, r1
 8007c22:	462a      	movgt	r2, r5
 8007c24:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007c28:	468b      	mov	fp, r1
 8007c2a:	462f      	mov	r7, r5
 8007c2c:	bfd4      	ite	le
 8007c2e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007c32:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007c36:	4620      	mov	r0, r4
 8007c38:	ee10 2a10 	vmov	r2, s0
 8007c3c:	465b      	mov	r3, fp
 8007c3e:	4639      	mov	r1, r7
 8007c40:	f7f8 fe1c 	bl	800087c <__aeabi_ddiv>
 8007c44:	ec41 0b10 	vmov	d0, r0, r1
 8007c48:	b003      	add	sp, #12
 8007c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007c4e <__copybits>:
 8007c4e:	3901      	subs	r1, #1
 8007c50:	b570      	push	{r4, r5, r6, lr}
 8007c52:	1149      	asrs	r1, r1, #5
 8007c54:	6914      	ldr	r4, [r2, #16]
 8007c56:	3101      	adds	r1, #1
 8007c58:	f102 0314 	add.w	r3, r2, #20
 8007c5c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007c60:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007c64:	1f05      	subs	r5, r0, #4
 8007c66:	42a3      	cmp	r3, r4
 8007c68:	d30c      	bcc.n	8007c84 <__copybits+0x36>
 8007c6a:	1aa3      	subs	r3, r4, r2
 8007c6c:	3b11      	subs	r3, #17
 8007c6e:	f023 0303 	bic.w	r3, r3, #3
 8007c72:	3211      	adds	r2, #17
 8007c74:	42a2      	cmp	r2, r4
 8007c76:	bf88      	it	hi
 8007c78:	2300      	movhi	r3, #0
 8007c7a:	4418      	add	r0, r3
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	4288      	cmp	r0, r1
 8007c80:	d305      	bcc.n	8007c8e <__copybits+0x40>
 8007c82:	bd70      	pop	{r4, r5, r6, pc}
 8007c84:	f853 6b04 	ldr.w	r6, [r3], #4
 8007c88:	f845 6f04 	str.w	r6, [r5, #4]!
 8007c8c:	e7eb      	b.n	8007c66 <__copybits+0x18>
 8007c8e:	f840 3b04 	str.w	r3, [r0], #4
 8007c92:	e7f4      	b.n	8007c7e <__copybits+0x30>

08007c94 <__any_on>:
 8007c94:	f100 0214 	add.w	r2, r0, #20
 8007c98:	6900      	ldr	r0, [r0, #16]
 8007c9a:	114b      	asrs	r3, r1, #5
 8007c9c:	4298      	cmp	r0, r3
 8007c9e:	b510      	push	{r4, lr}
 8007ca0:	db11      	blt.n	8007cc6 <__any_on+0x32>
 8007ca2:	dd0a      	ble.n	8007cba <__any_on+0x26>
 8007ca4:	f011 011f 	ands.w	r1, r1, #31
 8007ca8:	d007      	beq.n	8007cba <__any_on+0x26>
 8007caa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007cae:	fa24 f001 	lsr.w	r0, r4, r1
 8007cb2:	fa00 f101 	lsl.w	r1, r0, r1
 8007cb6:	428c      	cmp	r4, r1
 8007cb8:	d10b      	bne.n	8007cd2 <__any_on+0x3e>
 8007cba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d803      	bhi.n	8007cca <__any_on+0x36>
 8007cc2:	2000      	movs	r0, #0
 8007cc4:	bd10      	pop	{r4, pc}
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	e7f7      	b.n	8007cba <__any_on+0x26>
 8007cca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007cce:	2900      	cmp	r1, #0
 8007cd0:	d0f5      	beq.n	8007cbe <__any_on+0x2a>
 8007cd2:	2001      	movs	r0, #1
 8007cd4:	e7f6      	b.n	8007cc4 <__any_on+0x30>

08007cd6 <_calloc_r>:
 8007cd6:	b513      	push	{r0, r1, r4, lr}
 8007cd8:	434a      	muls	r2, r1
 8007cda:	4611      	mov	r1, r2
 8007cdc:	9201      	str	r2, [sp, #4]
 8007cde:	f000 f859 	bl	8007d94 <_malloc_r>
 8007ce2:	4604      	mov	r4, r0
 8007ce4:	b118      	cbz	r0, 8007cee <_calloc_r+0x18>
 8007ce6:	9a01      	ldr	r2, [sp, #4]
 8007ce8:	2100      	movs	r1, #0
 8007cea:	f7fc fbc7 	bl	800447c <memset>
 8007cee:	4620      	mov	r0, r4
 8007cf0:	b002      	add	sp, #8
 8007cf2:	bd10      	pop	{r4, pc}

08007cf4 <_free_r>:
 8007cf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cf6:	2900      	cmp	r1, #0
 8007cf8:	d048      	beq.n	8007d8c <_free_r+0x98>
 8007cfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cfe:	9001      	str	r0, [sp, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f1a1 0404 	sub.w	r4, r1, #4
 8007d06:	bfb8      	it	lt
 8007d08:	18e4      	addlt	r4, r4, r3
 8007d0a:	f000 fa7b 	bl	8008204 <__malloc_lock>
 8007d0e:	4a20      	ldr	r2, [pc, #128]	; (8007d90 <_free_r+0x9c>)
 8007d10:	9801      	ldr	r0, [sp, #4]
 8007d12:	6813      	ldr	r3, [r2, #0]
 8007d14:	4615      	mov	r5, r2
 8007d16:	b933      	cbnz	r3, 8007d26 <_free_r+0x32>
 8007d18:	6063      	str	r3, [r4, #4]
 8007d1a:	6014      	str	r4, [r2, #0]
 8007d1c:	b003      	add	sp, #12
 8007d1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d22:	f000 ba75 	b.w	8008210 <__malloc_unlock>
 8007d26:	42a3      	cmp	r3, r4
 8007d28:	d90b      	bls.n	8007d42 <_free_r+0x4e>
 8007d2a:	6821      	ldr	r1, [r4, #0]
 8007d2c:	1862      	adds	r2, r4, r1
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	bf04      	itt	eq
 8007d32:	681a      	ldreq	r2, [r3, #0]
 8007d34:	685b      	ldreq	r3, [r3, #4]
 8007d36:	6063      	str	r3, [r4, #4]
 8007d38:	bf04      	itt	eq
 8007d3a:	1852      	addeq	r2, r2, r1
 8007d3c:	6022      	streq	r2, [r4, #0]
 8007d3e:	602c      	str	r4, [r5, #0]
 8007d40:	e7ec      	b.n	8007d1c <_free_r+0x28>
 8007d42:	461a      	mov	r2, r3
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	b10b      	cbz	r3, 8007d4c <_free_r+0x58>
 8007d48:	42a3      	cmp	r3, r4
 8007d4a:	d9fa      	bls.n	8007d42 <_free_r+0x4e>
 8007d4c:	6811      	ldr	r1, [r2, #0]
 8007d4e:	1855      	adds	r5, r2, r1
 8007d50:	42a5      	cmp	r5, r4
 8007d52:	d10b      	bne.n	8007d6c <_free_r+0x78>
 8007d54:	6824      	ldr	r4, [r4, #0]
 8007d56:	4421      	add	r1, r4
 8007d58:	1854      	adds	r4, r2, r1
 8007d5a:	42a3      	cmp	r3, r4
 8007d5c:	6011      	str	r1, [r2, #0]
 8007d5e:	d1dd      	bne.n	8007d1c <_free_r+0x28>
 8007d60:	681c      	ldr	r4, [r3, #0]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	6053      	str	r3, [r2, #4]
 8007d66:	4421      	add	r1, r4
 8007d68:	6011      	str	r1, [r2, #0]
 8007d6a:	e7d7      	b.n	8007d1c <_free_r+0x28>
 8007d6c:	d902      	bls.n	8007d74 <_free_r+0x80>
 8007d6e:	230c      	movs	r3, #12
 8007d70:	6003      	str	r3, [r0, #0]
 8007d72:	e7d3      	b.n	8007d1c <_free_r+0x28>
 8007d74:	6825      	ldr	r5, [r4, #0]
 8007d76:	1961      	adds	r1, r4, r5
 8007d78:	428b      	cmp	r3, r1
 8007d7a:	bf04      	itt	eq
 8007d7c:	6819      	ldreq	r1, [r3, #0]
 8007d7e:	685b      	ldreq	r3, [r3, #4]
 8007d80:	6063      	str	r3, [r4, #4]
 8007d82:	bf04      	itt	eq
 8007d84:	1949      	addeq	r1, r1, r5
 8007d86:	6021      	streq	r1, [r4, #0]
 8007d88:	6054      	str	r4, [r2, #4]
 8007d8a:	e7c7      	b.n	8007d1c <_free_r+0x28>
 8007d8c:	b003      	add	sp, #12
 8007d8e:	bd30      	pop	{r4, r5, pc}
 8007d90:	20000230 	.word	0x20000230

08007d94 <_malloc_r>:
 8007d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d96:	1ccd      	adds	r5, r1, #3
 8007d98:	f025 0503 	bic.w	r5, r5, #3
 8007d9c:	3508      	adds	r5, #8
 8007d9e:	2d0c      	cmp	r5, #12
 8007da0:	bf38      	it	cc
 8007da2:	250c      	movcc	r5, #12
 8007da4:	2d00      	cmp	r5, #0
 8007da6:	4606      	mov	r6, r0
 8007da8:	db01      	blt.n	8007dae <_malloc_r+0x1a>
 8007daa:	42a9      	cmp	r1, r5
 8007dac:	d903      	bls.n	8007db6 <_malloc_r+0x22>
 8007dae:	230c      	movs	r3, #12
 8007db0:	6033      	str	r3, [r6, #0]
 8007db2:	2000      	movs	r0, #0
 8007db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007db6:	f000 fa25 	bl	8008204 <__malloc_lock>
 8007dba:	4921      	ldr	r1, [pc, #132]	; (8007e40 <_malloc_r+0xac>)
 8007dbc:	680a      	ldr	r2, [r1, #0]
 8007dbe:	4614      	mov	r4, r2
 8007dc0:	b99c      	cbnz	r4, 8007dea <_malloc_r+0x56>
 8007dc2:	4f20      	ldr	r7, [pc, #128]	; (8007e44 <_malloc_r+0xb0>)
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	b923      	cbnz	r3, 8007dd2 <_malloc_r+0x3e>
 8007dc8:	4621      	mov	r1, r4
 8007dca:	4630      	mov	r0, r6
 8007dcc:	f000 f9a0 	bl	8008110 <_sbrk_r>
 8007dd0:	6038      	str	r0, [r7, #0]
 8007dd2:	4629      	mov	r1, r5
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	f000 f99b 	bl	8008110 <_sbrk_r>
 8007dda:	1c43      	adds	r3, r0, #1
 8007ddc:	d123      	bne.n	8007e26 <_malloc_r+0x92>
 8007dde:	230c      	movs	r3, #12
 8007de0:	6033      	str	r3, [r6, #0]
 8007de2:	4630      	mov	r0, r6
 8007de4:	f000 fa14 	bl	8008210 <__malloc_unlock>
 8007de8:	e7e3      	b.n	8007db2 <_malloc_r+0x1e>
 8007dea:	6823      	ldr	r3, [r4, #0]
 8007dec:	1b5b      	subs	r3, r3, r5
 8007dee:	d417      	bmi.n	8007e20 <_malloc_r+0x8c>
 8007df0:	2b0b      	cmp	r3, #11
 8007df2:	d903      	bls.n	8007dfc <_malloc_r+0x68>
 8007df4:	6023      	str	r3, [r4, #0]
 8007df6:	441c      	add	r4, r3
 8007df8:	6025      	str	r5, [r4, #0]
 8007dfa:	e004      	b.n	8007e06 <_malloc_r+0x72>
 8007dfc:	6863      	ldr	r3, [r4, #4]
 8007dfe:	42a2      	cmp	r2, r4
 8007e00:	bf0c      	ite	eq
 8007e02:	600b      	streq	r3, [r1, #0]
 8007e04:	6053      	strne	r3, [r2, #4]
 8007e06:	4630      	mov	r0, r6
 8007e08:	f000 fa02 	bl	8008210 <__malloc_unlock>
 8007e0c:	f104 000b 	add.w	r0, r4, #11
 8007e10:	1d23      	adds	r3, r4, #4
 8007e12:	f020 0007 	bic.w	r0, r0, #7
 8007e16:	1ac2      	subs	r2, r0, r3
 8007e18:	d0cc      	beq.n	8007db4 <_malloc_r+0x20>
 8007e1a:	1a1b      	subs	r3, r3, r0
 8007e1c:	50a3      	str	r3, [r4, r2]
 8007e1e:	e7c9      	b.n	8007db4 <_malloc_r+0x20>
 8007e20:	4622      	mov	r2, r4
 8007e22:	6864      	ldr	r4, [r4, #4]
 8007e24:	e7cc      	b.n	8007dc0 <_malloc_r+0x2c>
 8007e26:	1cc4      	adds	r4, r0, #3
 8007e28:	f024 0403 	bic.w	r4, r4, #3
 8007e2c:	42a0      	cmp	r0, r4
 8007e2e:	d0e3      	beq.n	8007df8 <_malloc_r+0x64>
 8007e30:	1a21      	subs	r1, r4, r0
 8007e32:	4630      	mov	r0, r6
 8007e34:	f000 f96c 	bl	8008110 <_sbrk_r>
 8007e38:	3001      	adds	r0, #1
 8007e3a:	d1dd      	bne.n	8007df8 <_malloc_r+0x64>
 8007e3c:	e7cf      	b.n	8007dde <_malloc_r+0x4a>
 8007e3e:	bf00      	nop
 8007e40:	20000230 	.word	0x20000230
 8007e44:	20000234 	.word	0x20000234

08007e48 <__ssputs_r>:
 8007e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e4c:	688e      	ldr	r6, [r1, #8]
 8007e4e:	429e      	cmp	r6, r3
 8007e50:	4682      	mov	sl, r0
 8007e52:	460c      	mov	r4, r1
 8007e54:	4690      	mov	r8, r2
 8007e56:	461f      	mov	r7, r3
 8007e58:	d838      	bhi.n	8007ecc <__ssputs_r+0x84>
 8007e5a:	898a      	ldrh	r2, [r1, #12]
 8007e5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e60:	d032      	beq.n	8007ec8 <__ssputs_r+0x80>
 8007e62:	6825      	ldr	r5, [r4, #0]
 8007e64:	6909      	ldr	r1, [r1, #16]
 8007e66:	eba5 0901 	sub.w	r9, r5, r1
 8007e6a:	6965      	ldr	r5, [r4, #20]
 8007e6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e74:	3301      	adds	r3, #1
 8007e76:	444b      	add	r3, r9
 8007e78:	106d      	asrs	r5, r5, #1
 8007e7a:	429d      	cmp	r5, r3
 8007e7c:	bf38      	it	cc
 8007e7e:	461d      	movcc	r5, r3
 8007e80:	0553      	lsls	r3, r2, #21
 8007e82:	d531      	bpl.n	8007ee8 <__ssputs_r+0xa0>
 8007e84:	4629      	mov	r1, r5
 8007e86:	f7ff ff85 	bl	8007d94 <_malloc_r>
 8007e8a:	4606      	mov	r6, r0
 8007e8c:	b950      	cbnz	r0, 8007ea4 <__ssputs_r+0x5c>
 8007e8e:	230c      	movs	r3, #12
 8007e90:	f8ca 3000 	str.w	r3, [sl]
 8007e94:	89a3      	ldrh	r3, [r4, #12]
 8007e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e9a:	81a3      	strh	r3, [r4, #12]
 8007e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ea4:	6921      	ldr	r1, [r4, #16]
 8007ea6:	464a      	mov	r2, r9
 8007ea8:	f7ff fa4c 	bl	8007344 <memcpy>
 8007eac:	89a3      	ldrh	r3, [r4, #12]
 8007eae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eb6:	81a3      	strh	r3, [r4, #12]
 8007eb8:	6126      	str	r6, [r4, #16]
 8007eba:	6165      	str	r5, [r4, #20]
 8007ebc:	444e      	add	r6, r9
 8007ebe:	eba5 0509 	sub.w	r5, r5, r9
 8007ec2:	6026      	str	r6, [r4, #0]
 8007ec4:	60a5      	str	r5, [r4, #8]
 8007ec6:	463e      	mov	r6, r7
 8007ec8:	42be      	cmp	r6, r7
 8007eca:	d900      	bls.n	8007ece <__ssputs_r+0x86>
 8007ecc:	463e      	mov	r6, r7
 8007ece:	4632      	mov	r2, r6
 8007ed0:	6820      	ldr	r0, [r4, #0]
 8007ed2:	4641      	mov	r1, r8
 8007ed4:	f000 f97c 	bl	80081d0 <memmove>
 8007ed8:	68a3      	ldr	r3, [r4, #8]
 8007eda:	6822      	ldr	r2, [r4, #0]
 8007edc:	1b9b      	subs	r3, r3, r6
 8007ede:	4432      	add	r2, r6
 8007ee0:	60a3      	str	r3, [r4, #8]
 8007ee2:	6022      	str	r2, [r4, #0]
 8007ee4:	2000      	movs	r0, #0
 8007ee6:	e7db      	b.n	8007ea0 <__ssputs_r+0x58>
 8007ee8:	462a      	mov	r2, r5
 8007eea:	f000 f997 	bl	800821c <_realloc_r>
 8007eee:	4606      	mov	r6, r0
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	d1e1      	bne.n	8007eb8 <__ssputs_r+0x70>
 8007ef4:	6921      	ldr	r1, [r4, #16]
 8007ef6:	4650      	mov	r0, sl
 8007ef8:	f7ff fefc 	bl	8007cf4 <_free_r>
 8007efc:	e7c7      	b.n	8007e8e <__ssputs_r+0x46>
	...

08007f00 <_svfiprintf_r>:
 8007f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f04:	4698      	mov	r8, r3
 8007f06:	898b      	ldrh	r3, [r1, #12]
 8007f08:	061b      	lsls	r3, r3, #24
 8007f0a:	b09d      	sub	sp, #116	; 0x74
 8007f0c:	4607      	mov	r7, r0
 8007f0e:	460d      	mov	r5, r1
 8007f10:	4614      	mov	r4, r2
 8007f12:	d50e      	bpl.n	8007f32 <_svfiprintf_r+0x32>
 8007f14:	690b      	ldr	r3, [r1, #16]
 8007f16:	b963      	cbnz	r3, 8007f32 <_svfiprintf_r+0x32>
 8007f18:	2140      	movs	r1, #64	; 0x40
 8007f1a:	f7ff ff3b 	bl	8007d94 <_malloc_r>
 8007f1e:	6028      	str	r0, [r5, #0]
 8007f20:	6128      	str	r0, [r5, #16]
 8007f22:	b920      	cbnz	r0, 8007f2e <_svfiprintf_r+0x2e>
 8007f24:	230c      	movs	r3, #12
 8007f26:	603b      	str	r3, [r7, #0]
 8007f28:	f04f 30ff 	mov.w	r0, #4294967295
 8007f2c:	e0d1      	b.n	80080d2 <_svfiprintf_r+0x1d2>
 8007f2e:	2340      	movs	r3, #64	; 0x40
 8007f30:	616b      	str	r3, [r5, #20]
 8007f32:	2300      	movs	r3, #0
 8007f34:	9309      	str	r3, [sp, #36]	; 0x24
 8007f36:	2320      	movs	r3, #32
 8007f38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f40:	2330      	movs	r3, #48	; 0x30
 8007f42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80080ec <_svfiprintf_r+0x1ec>
 8007f46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f4a:	f04f 0901 	mov.w	r9, #1
 8007f4e:	4623      	mov	r3, r4
 8007f50:	469a      	mov	sl, r3
 8007f52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f56:	b10a      	cbz	r2, 8007f5c <_svfiprintf_r+0x5c>
 8007f58:	2a25      	cmp	r2, #37	; 0x25
 8007f5a:	d1f9      	bne.n	8007f50 <_svfiprintf_r+0x50>
 8007f5c:	ebba 0b04 	subs.w	fp, sl, r4
 8007f60:	d00b      	beq.n	8007f7a <_svfiprintf_r+0x7a>
 8007f62:	465b      	mov	r3, fp
 8007f64:	4622      	mov	r2, r4
 8007f66:	4629      	mov	r1, r5
 8007f68:	4638      	mov	r0, r7
 8007f6a:	f7ff ff6d 	bl	8007e48 <__ssputs_r>
 8007f6e:	3001      	adds	r0, #1
 8007f70:	f000 80aa 	beq.w	80080c8 <_svfiprintf_r+0x1c8>
 8007f74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f76:	445a      	add	r2, fp
 8007f78:	9209      	str	r2, [sp, #36]	; 0x24
 8007f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f000 80a2 	beq.w	80080c8 <_svfiprintf_r+0x1c8>
 8007f84:	2300      	movs	r3, #0
 8007f86:	f04f 32ff 	mov.w	r2, #4294967295
 8007f8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f8e:	f10a 0a01 	add.w	sl, sl, #1
 8007f92:	9304      	str	r3, [sp, #16]
 8007f94:	9307      	str	r3, [sp, #28]
 8007f96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f9a:	931a      	str	r3, [sp, #104]	; 0x68
 8007f9c:	4654      	mov	r4, sl
 8007f9e:	2205      	movs	r2, #5
 8007fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fa4:	4851      	ldr	r0, [pc, #324]	; (80080ec <_svfiprintf_r+0x1ec>)
 8007fa6:	f7f8 f933 	bl	8000210 <memchr>
 8007faa:	9a04      	ldr	r2, [sp, #16]
 8007fac:	b9d8      	cbnz	r0, 8007fe6 <_svfiprintf_r+0xe6>
 8007fae:	06d0      	lsls	r0, r2, #27
 8007fb0:	bf44      	itt	mi
 8007fb2:	2320      	movmi	r3, #32
 8007fb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fb8:	0711      	lsls	r1, r2, #28
 8007fba:	bf44      	itt	mi
 8007fbc:	232b      	movmi	r3, #43	; 0x2b
 8007fbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fc2:	f89a 3000 	ldrb.w	r3, [sl]
 8007fc6:	2b2a      	cmp	r3, #42	; 0x2a
 8007fc8:	d015      	beq.n	8007ff6 <_svfiprintf_r+0xf6>
 8007fca:	9a07      	ldr	r2, [sp, #28]
 8007fcc:	4654      	mov	r4, sl
 8007fce:	2000      	movs	r0, #0
 8007fd0:	f04f 0c0a 	mov.w	ip, #10
 8007fd4:	4621      	mov	r1, r4
 8007fd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fda:	3b30      	subs	r3, #48	; 0x30
 8007fdc:	2b09      	cmp	r3, #9
 8007fde:	d94e      	bls.n	800807e <_svfiprintf_r+0x17e>
 8007fe0:	b1b0      	cbz	r0, 8008010 <_svfiprintf_r+0x110>
 8007fe2:	9207      	str	r2, [sp, #28]
 8007fe4:	e014      	b.n	8008010 <_svfiprintf_r+0x110>
 8007fe6:	eba0 0308 	sub.w	r3, r0, r8
 8007fea:	fa09 f303 	lsl.w	r3, r9, r3
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	9304      	str	r3, [sp, #16]
 8007ff2:	46a2      	mov	sl, r4
 8007ff4:	e7d2      	b.n	8007f9c <_svfiprintf_r+0x9c>
 8007ff6:	9b03      	ldr	r3, [sp, #12]
 8007ff8:	1d19      	adds	r1, r3, #4
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	9103      	str	r1, [sp, #12]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	bfbb      	ittet	lt
 8008002:	425b      	neglt	r3, r3
 8008004:	f042 0202 	orrlt.w	r2, r2, #2
 8008008:	9307      	strge	r3, [sp, #28]
 800800a:	9307      	strlt	r3, [sp, #28]
 800800c:	bfb8      	it	lt
 800800e:	9204      	strlt	r2, [sp, #16]
 8008010:	7823      	ldrb	r3, [r4, #0]
 8008012:	2b2e      	cmp	r3, #46	; 0x2e
 8008014:	d10c      	bne.n	8008030 <_svfiprintf_r+0x130>
 8008016:	7863      	ldrb	r3, [r4, #1]
 8008018:	2b2a      	cmp	r3, #42	; 0x2a
 800801a:	d135      	bne.n	8008088 <_svfiprintf_r+0x188>
 800801c:	9b03      	ldr	r3, [sp, #12]
 800801e:	1d1a      	adds	r2, r3, #4
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	9203      	str	r2, [sp, #12]
 8008024:	2b00      	cmp	r3, #0
 8008026:	bfb8      	it	lt
 8008028:	f04f 33ff 	movlt.w	r3, #4294967295
 800802c:	3402      	adds	r4, #2
 800802e:	9305      	str	r3, [sp, #20]
 8008030:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80080fc <_svfiprintf_r+0x1fc>
 8008034:	7821      	ldrb	r1, [r4, #0]
 8008036:	2203      	movs	r2, #3
 8008038:	4650      	mov	r0, sl
 800803a:	f7f8 f8e9 	bl	8000210 <memchr>
 800803e:	b140      	cbz	r0, 8008052 <_svfiprintf_r+0x152>
 8008040:	2340      	movs	r3, #64	; 0x40
 8008042:	eba0 000a 	sub.w	r0, r0, sl
 8008046:	fa03 f000 	lsl.w	r0, r3, r0
 800804a:	9b04      	ldr	r3, [sp, #16]
 800804c:	4303      	orrs	r3, r0
 800804e:	3401      	adds	r4, #1
 8008050:	9304      	str	r3, [sp, #16]
 8008052:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008056:	4826      	ldr	r0, [pc, #152]	; (80080f0 <_svfiprintf_r+0x1f0>)
 8008058:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800805c:	2206      	movs	r2, #6
 800805e:	f7f8 f8d7 	bl	8000210 <memchr>
 8008062:	2800      	cmp	r0, #0
 8008064:	d038      	beq.n	80080d8 <_svfiprintf_r+0x1d8>
 8008066:	4b23      	ldr	r3, [pc, #140]	; (80080f4 <_svfiprintf_r+0x1f4>)
 8008068:	bb1b      	cbnz	r3, 80080b2 <_svfiprintf_r+0x1b2>
 800806a:	9b03      	ldr	r3, [sp, #12]
 800806c:	3307      	adds	r3, #7
 800806e:	f023 0307 	bic.w	r3, r3, #7
 8008072:	3308      	adds	r3, #8
 8008074:	9303      	str	r3, [sp, #12]
 8008076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008078:	4433      	add	r3, r6
 800807a:	9309      	str	r3, [sp, #36]	; 0x24
 800807c:	e767      	b.n	8007f4e <_svfiprintf_r+0x4e>
 800807e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008082:	460c      	mov	r4, r1
 8008084:	2001      	movs	r0, #1
 8008086:	e7a5      	b.n	8007fd4 <_svfiprintf_r+0xd4>
 8008088:	2300      	movs	r3, #0
 800808a:	3401      	adds	r4, #1
 800808c:	9305      	str	r3, [sp, #20]
 800808e:	4619      	mov	r1, r3
 8008090:	f04f 0c0a 	mov.w	ip, #10
 8008094:	4620      	mov	r0, r4
 8008096:	f810 2b01 	ldrb.w	r2, [r0], #1
 800809a:	3a30      	subs	r2, #48	; 0x30
 800809c:	2a09      	cmp	r2, #9
 800809e:	d903      	bls.n	80080a8 <_svfiprintf_r+0x1a8>
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d0c5      	beq.n	8008030 <_svfiprintf_r+0x130>
 80080a4:	9105      	str	r1, [sp, #20]
 80080a6:	e7c3      	b.n	8008030 <_svfiprintf_r+0x130>
 80080a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80080ac:	4604      	mov	r4, r0
 80080ae:	2301      	movs	r3, #1
 80080b0:	e7f0      	b.n	8008094 <_svfiprintf_r+0x194>
 80080b2:	ab03      	add	r3, sp, #12
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	462a      	mov	r2, r5
 80080b8:	4b0f      	ldr	r3, [pc, #60]	; (80080f8 <_svfiprintf_r+0x1f8>)
 80080ba:	a904      	add	r1, sp, #16
 80080bc:	4638      	mov	r0, r7
 80080be:	f7fc fa85 	bl	80045cc <_printf_float>
 80080c2:	1c42      	adds	r2, r0, #1
 80080c4:	4606      	mov	r6, r0
 80080c6:	d1d6      	bne.n	8008076 <_svfiprintf_r+0x176>
 80080c8:	89ab      	ldrh	r3, [r5, #12]
 80080ca:	065b      	lsls	r3, r3, #25
 80080cc:	f53f af2c 	bmi.w	8007f28 <_svfiprintf_r+0x28>
 80080d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080d2:	b01d      	add	sp, #116	; 0x74
 80080d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d8:	ab03      	add	r3, sp, #12
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	462a      	mov	r2, r5
 80080de:	4b06      	ldr	r3, [pc, #24]	; (80080f8 <_svfiprintf_r+0x1f8>)
 80080e0:	a904      	add	r1, sp, #16
 80080e2:	4638      	mov	r0, r7
 80080e4:	f7fc fd16 	bl	8004b14 <_printf_i>
 80080e8:	e7eb      	b.n	80080c2 <_svfiprintf_r+0x1c2>
 80080ea:	bf00      	nop
 80080ec:	080091bc 	.word	0x080091bc
 80080f0:	080091c6 	.word	0x080091c6
 80080f4:	080045cd 	.word	0x080045cd
 80080f8:	08007e49 	.word	0x08007e49
 80080fc:	080091c2 	.word	0x080091c2

08008100 <nan>:
 8008100:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008108 <nan+0x8>
 8008104:	4770      	bx	lr
 8008106:	bf00      	nop
 8008108:	00000000 	.word	0x00000000
 800810c:	7ff80000 	.word	0x7ff80000

08008110 <_sbrk_r>:
 8008110:	b538      	push	{r3, r4, r5, lr}
 8008112:	4d06      	ldr	r5, [pc, #24]	; (800812c <_sbrk_r+0x1c>)
 8008114:	2300      	movs	r3, #0
 8008116:	4604      	mov	r4, r0
 8008118:	4608      	mov	r0, r1
 800811a:	602b      	str	r3, [r5, #0]
 800811c:	f7f9 fde0 	bl	8001ce0 <_sbrk>
 8008120:	1c43      	adds	r3, r0, #1
 8008122:	d102      	bne.n	800812a <_sbrk_r+0x1a>
 8008124:	682b      	ldr	r3, [r5, #0]
 8008126:	b103      	cbz	r3, 800812a <_sbrk_r+0x1a>
 8008128:	6023      	str	r3, [r4, #0]
 800812a:	bd38      	pop	{r3, r4, r5, pc}
 800812c:	20000458 	.word	0x20000458

08008130 <strncmp>:
 8008130:	b510      	push	{r4, lr}
 8008132:	b16a      	cbz	r2, 8008150 <strncmp+0x20>
 8008134:	3901      	subs	r1, #1
 8008136:	1884      	adds	r4, r0, r2
 8008138:	f810 3b01 	ldrb.w	r3, [r0], #1
 800813c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008140:	4293      	cmp	r3, r2
 8008142:	d103      	bne.n	800814c <strncmp+0x1c>
 8008144:	42a0      	cmp	r0, r4
 8008146:	d001      	beq.n	800814c <strncmp+0x1c>
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1f5      	bne.n	8008138 <strncmp+0x8>
 800814c:	1a98      	subs	r0, r3, r2
 800814e:	bd10      	pop	{r4, pc}
 8008150:	4610      	mov	r0, r2
 8008152:	e7fc      	b.n	800814e <strncmp+0x1e>

08008154 <__ascii_wctomb>:
 8008154:	b149      	cbz	r1, 800816a <__ascii_wctomb+0x16>
 8008156:	2aff      	cmp	r2, #255	; 0xff
 8008158:	bf85      	ittet	hi
 800815a:	238a      	movhi	r3, #138	; 0x8a
 800815c:	6003      	strhi	r3, [r0, #0]
 800815e:	700a      	strbls	r2, [r1, #0]
 8008160:	f04f 30ff 	movhi.w	r0, #4294967295
 8008164:	bf98      	it	ls
 8008166:	2001      	movls	r0, #1
 8008168:	4770      	bx	lr
 800816a:	4608      	mov	r0, r1
 800816c:	4770      	bx	lr
	...

08008170 <__assert_func>:
 8008170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008172:	4614      	mov	r4, r2
 8008174:	461a      	mov	r2, r3
 8008176:	4b09      	ldr	r3, [pc, #36]	; (800819c <__assert_func+0x2c>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4605      	mov	r5, r0
 800817c:	68d8      	ldr	r0, [r3, #12]
 800817e:	b14c      	cbz	r4, 8008194 <__assert_func+0x24>
 8008180:	4b07      	ldr	r3, [pc, #28]	; (80081a0 <__assert_func+0x30>)
 8008182:	9100      	str	r1, [sp, #0]
 8008184:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008188:	4906      	ldr	r1, [pc, #24]	; (80081a4 <__assert_func+0x34>)
 800818a:	462b      	mov	r3, r5
 800818c:	f000 f80e 	bl	80081ac <fiprintf>
 8008190:	f000 fa84 	bl	800869c <abort>
 8008194:	4b04      	ldr	r3, [pc, #16]	; (80081a8 <__assert_func+0x38>)
 8008196:	461c      	mov	r4, r3
 8008198:	e7f3      	b.n	8008182 <__assert_func+0x12>
 800819a:	bf00      	nop
 800819c:	20000018 	.word	0x20000018
 80081a0:	080091cd 	.word	0x080091cd
 80081a4:	080091da 	.word	0x080091da
 80081a8:	08009208 	.word	0x08009208

080081ac <fiprintf>:
 80081ac:	b40e      	push	{r1, r2, r3}
 80081ae:	b503      	push	{r0, r1, lr}
 80081b0:	4601      	mov	r1, r0
 80081b2:	ab03      	add	r3, sp, #12
 80081b4:	4805      	ldr	r0, [pc, #20]	; (80081cc <fiprintf+0x20>)
 80081b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80081ba:	6800      	ldr	r0, [r0, #0]
 80081bc:	9301      	str	r3, [sp, #4]
 80081be:	f000 f87d 	bl	80082bc <_vfiprintf_r>
 80081c2:	b002      	add	sp, #8
 80081c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80081c8:	b003      	add	sp, #12
 80081ca:	4770      	bx	lr
 80081cc:	20000018 	.word	0x20000018

080081d0 <memmove>:
 80081d0:	4288      	cmp	r0, r1
 80081d2:	b510      	push	{r4, lr}
 80081d4:	eb01 0402 	add.w	r4, r1, r2
 80081d8:	d902      	bls.n	80081e0 <memmove+0x10>
 80081da:	4284      	cmp	r4, r0
 80081dc:	4623      	mov	r3, r4
 80081de:	d807      	bhi.n	80081f0 <memmove+0x20>
 80081e0:	1e43      	subs	r3, r0, #1
 80081e2:	42a1      	cmp	r1, r4
 80081e4:	d008      	beq.n	80081f8 <memmove+0x28>
 80081e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081ee:	e7f8      	b.n	80081e2 <memmove+0x12>
 80081f0:	4402      	add	r2, r0
 80081f2:	4601      	mov	r1, r0
 80081f4:	428a      	cmp	r2, r1
 80081f6:	d100      	bne.n	80081fa <memmove+0x2a>
 80081f8:	bd10      	pop	{r4, pc}
 80081fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008202:	e7f7      	b.n	80081f4 <memmove+0x24>

08008204 <__malloc_lock>:
 8008204:	4801      	ldr	r0, [pc, #4]	; (800820c <__malloc_lock+0x8>)
 8008206:	f000 bc09 	b.w	8008a1c <__retarget_lock_acquire_recursive>
 800820a:	bf00      	nop
 800820c:	20000460 	.word	0x20000460

08008210 <__malloc_unlock>:
 8008210:	4801      	ldr	r0, [pc, #4]	; (8008218 <__malloc_unlock+0x8>)
 8008212:	f000 bc04 	b.w	8008a1e <__retarget_lock_release_recursive>
 8008216:	bf00      	nop
 8008218:	20000460 	.word	0x20000460

0800821c <_realloc_r>:
 800821c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800821e:	4607      	mov	r7, r0
 8008220:	4614      	mov	r4, r2
 8008222:	460e      	mov	r6, r1
 8008224:	b921      	cbnz	r1, 8008230 <_realloc_r+0x14>
 8008226:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800822a:	4611      	mov	r1, r2
 800822c:	f7ff bdb2 	b.w	8007d94 <_malloc_r>
 8008230:	b922      	cbnz	r2, 800823c <_realloc_r+0x20>
 8008232:	f7ff fd5f 	bl	8007cf4 <_free_r>
 8008236:	4625      	mov	r5, r4
 8008238:	4628      	mov	r0, r5
 800823a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800823c:	f000 fc54 	bl	8008ae8 <_malloc_usable_size_r>
 8008240:	42a0      	cmp	r0, r4
 8008242:	d20f      	bcs.n	8008264 <_realloc_r+0x48>
 8008244:	4621      	mov	r1, r4
 8008246:	4638      	mov	r0, r7
 8008248:	f7ff fda4 	bl	8007d94 <_malloc_r>
 800824c:	4605      	mov	r5, r0
 800824e:	2800      	cmp	r0, #0
 8008250:	d0f2      	beq.n	8008238 <_realloc_r+0x1c>
 8008252:	4631      	mov	r1, r6
 8008254:	4622      	mov	r2, r4
 8008256:	f7ff f875 	bl	8007344 <memcpy>
 800825a:	4631      	mov	r1, r6
 800825c:	4638      	mov	r0, r7
 800825e:	f7ff fd49 	bl	8007cf4 <_free_r>
 8008262:	e7e9      	b.n	8008238 <_realloc_r+0x1c>
 8008264:	4635      	mov	r5, r6
 8008266:	e7e7      	b.n	8008238 <_realloc_r+0x1c>

08008268 <__sfputc_r>:
 8008268:	6893      	ldr	r3, [r2, #8]
 800826a:	3b01      	subs	r3, #1
 800826c:	2b00      	cmp	r3, #0
 800826e:	b410      	push	{r4}
 8008270:	6093      	str	r3, [r2, #8]
 8008272:	da08      	bge.n	8008286 <__sfputc_r+0x1e>
 8008274:	6994      	ldr	r4, [r2, #24]
 8008276:	42a3      	cmp	r3, r4
 8008278:	db01      	blt.n	800827e <__sfputc_r+0x16>
 800827a:	290a      	cmp	r1, #10
 800827c:	d103      	bne.n	8008286 <__sfputc_r+0x1e>
 800827e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008282:	f000 b94b 	b.w	800851c <__swbuf_r>
 8008286:	6813      	ldr	r3, [r2, #0]
 8008288:	1c58      	adds	r0, r3, #1
 800828a:	6010      	str	r0, [r2, #0]
 800828c:	7019      	strb	r1, [r3, #0]
 800828e:	4608      	mov	r0, r1
 8008290:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008294:	4770      	bx	lr

08008296 <__sfputs_r>:
 8008296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008298:	4606      	mov	r6, r0
 800829a:	460f      	mov	r7, r1
 800829c:	4614      	mov	r4, r2
 800829e:	18d5      	adds	r5, r2, r3
 80082a0:	42ac      	cmp	r4, r5
 80082a2:	d101      	bne.n	80082a8 <__sfputs_r+0x12>
 80082a4:	2000      	movs	r0, #0
 80082a6:	e007      	b.n	80082b8 <__sfputs_r+0x22>
 80082a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ac:	463a      	mov	r2, r7
 80082ae:	4630      	mov	r0, r6
 80082b0:	f7ff ffda 	bl	8008268 <__sfputc_r>
 80082b4:	1c43      	adds	r3, r0, #1
 80082b6:	d1f3      	bne.n	80082a0 <__sfputs_r+0xa>
 80082b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082bc <_vfiprintf_r>:
 80082bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c0:	460d      	mov	r5, r1
 80082c2:	b09d      	sub	sp, #116	; 0x74
 80082c4:	4614      	mov	r4, r2
 80082c6:	4698      	mov	r8, r3
 80082c8:	4606      	mov	r6, r0
 80082ca:	b118      	cbz	r0, 80082d4 <_vfiprintf_r+0x18>
 80082cc:	6983      	ldr	r3, [r0, #24]
 80082ce:	b90b      	cbnz	r3, 80082d4 <_vfiprintf_r+0x18>
 80082d0:	f000 fb06 	bl	80088e0 <__sinit>
 80082d4:	4b89      	ldr	r3, [pc, #548]	; (80084fc <_vfiprintf_r+0x240>)
 80082d6:	429d      	cmp	r5, r3
 80082d8:	d11b      	bne.n	8008312 <_vfiprintf_r+0x56>
 80082da:	6875      	ldr	r5, [r6, #4]
 80082dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082de:	07d9      	lsls	r1, r3, #31
 80082e0:	d405      	bmi.n	80082ee <_vfiprintf_r+0x32>
 80082e2:	89ab      	ldrh	r3, [r5, #12]
 80082e4:	059a      	lsls	r2, r3, #22
 80082e6:	d402      	bmi.n	80082ee <_vfiprintf_r+0x32>
 80082e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082ea:	f000 fb97 	bl	8008a1c <__retarget_lock_acquire_recursive>
 80082ee:	89ab      	ldrh	r3, [r5, #12]
 80082f0:	071b      	lsls	r3, r3, #28
 80082f2:	d501      	bpl.n	80082f8 <_vfiprintf_r+0x3c>
 80082f4:	692b      	ldr	r3, [r5, #16]
 80082f6:	b9eb      	cbnz	r3, 8008334 <_vfiprintf_r+0x78>
 80082f8:	4629      	mov	r1, r5
 80082fa:	4630      	mov	r0, r6
 80082fc:	f000 f960 	bl	80085c0 <__swsetup_r>
 8008300:	b1c0      	cbz	r0, 8008334 <_vfiprintf_r+0x78>
 8008302:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008304:	07dc      	lsls	r4, r3, #31
 8008306:	d50e      	bpl.n	8008326 <_vfiprintf_r+0x6a>
 8008308:	f04f 30ff 	mov.w	r0, #4294967295
 800830c:	b01d      	add	sp, #116	; 0x74
 800830e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008312:	4b7b      	ldr	r3, [pc, #492]	; (8008500 <_vfiprintf_r+0x244>)
 8008314:	429d      	cmp	r5, r3
 8008316:	d101      	bne.n	800831c <_vfiprintf_r+0x60>
 8008318:	68b5      	ldr	r5, [r6, #8]
 800831a:	e7df      	b.n	80082dc <_vfiprintf_r+0x20>
 800831c:	4b79      	ldr	r3, [pc, #484]	; (8008504 <_vfiprintf_r+0x248>)
 800831e:	429d      	cmp	r5, r3
 8008320:	bf08      	it	eq
 8008322:	68f5      	ldreq	r5, [r6, #12]
 8008324:	e7da      	b.n	80082dc <_vfiprintf_r+0x20>
 8008326:	89ab      	ldrh	r3, [r5, #12]
 8008328:	0598      	lsls	r0, r3, #22
 800832a:	d4ed      	bmi.n	8008308 <_vfiprintf_r+0x4c>
 800832c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800832e:	f000 fb76 	bl	8008a1e <__retarget_lock_release_recursive>
 8008332:	e7e9      	b.n	8008308 <_vfiprintf_r+0x4c>
 8008334:	2300      	movs	r3, #0
 8008336:	9309      	str	r3, [sp, #36]	; 0x24
 8008338:	2320      	movs	r3, #32
 800833a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800833e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008342:	2330      	movs	r3, #48	; 0x30
 8008344:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008508 <_vfiprintf_r+0x24c>
 8008348:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800834c:	f04f 0901 	mov.w	r9, #1
 8008350:	4623      	mov	r3, r4
 8008352:	469a      	mov	sl, r3
 8008354:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008358:	b10a      	cbz	r2, 800835e <_vfiprintf_r+0xa2>
 800835a:	2a25      	cmp	r2, #37	; 0x25
 800835c:	d1f9      	bne.n	8008352 <_vfiprintf_r+0x96>
 800835e:	ebba 0b04 	subs.w	fp, sl, r4
 8008362:	d00b      	beq.n	800837c <_vfiprintf_r+0xc0>
 8008364:	465b      	mov	r3, fp
 8008366:	4622      	mov	r2, r4
 8008368:	4629      	mov	r1, r5
 800836a:	4630      	mov	r0, r6
 800836c:	f7ff ff93 	bl	8008296 <__sfputs_r>
 8008370:	3001      	adds	r0, #1
 8008372:	f000 80aa 	beq.w	80084ca <_vfiprintf_r+0x20e>
 8008376:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008378:	445a      	add	r2, fp
 800837a:	9209      	str	r2, [sp, #36]	; 0x24
 800837c:	f89a 3000 	ldrb.w	r3, [sl]
 8008380:	2b00      	cmp	r3, #0
 8008382:	f000 80a2 	beq.w	80084ca <_vfiprintf_r+0x20e>
 8008386:	2300      	movs	r3, #0
 8008388:	f04f 32ff 	mov.w	r2, #4294967295
 800838c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008390:	f10a 0a01 	add.w	sl, sl, #1
 8008394:	9304      	str	r3, [sp, #16]
 8008396:	9307      	str	r3, [sp, #28]
 8008398:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800839c:	931a      	str	r3, [sp, #104]	; 0x68
 800839e:	4654      	mov	r4, sl
 80083a0:	2205      	movs	r2, #5
 80083a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083a6:	4858      	ldr	r0, [pc, #352]	; (8008508 <_vfiprintf_r+0x24c>)
 80083a8:	f7f7 ff32 	bl	8000210 <memchr>
 80083ac:	9a04      	ldr	r2, [sp, #16]
 80083ae:	b9d8      	cbnz	r0, 80083e8 <_vfiprintf_r+0x12c>
 80083b0:	06d1      	lsls	r1, r2, #27
 80083b2:	bf44      	itt	mi
 80083b4:	2320      	movmi	r3, #32
 80083b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083ba:	0713      	lsls	r3, r2, #28
 80083bc:	bf44      	itt	mi
 80083be:	232b      	movmi	r3, #43	; 0x2b
 80083c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083c4:	f89a 3000 	ldrb.w	r3, [sl]
 80083c8:	2b2a      	cmp	r3, #42	; 0x2a
 80083ca:	d015      	beq.n	80083f8 <_vfiprintf_r+0x13c>
 80083cc:	9a07      	ldr	r2, [sp, #28]
 80083ce:	4654      	mov	r4, sl
 80083d0:	2000      	movs	r0, #0
 80083d2:	f04f 0c0a 	mov.w	ip, #10
 80083d6:	4621      	mov	r1, r4
 80083d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083dc:	3b30      	subs	r3, #48	; 0x30
 80083de:	2b09      	cmp	r3, #9
 80083e0:	d94e      	bls.n	8008480 <_vfiprintf_r+0x1c4>
 80083e2:	b1b0      	cbz	r0, 8008412 <_vfiprintf_r+0x156>
 80083e4:	9207      	str	r2, [sp, #28]
 80083e6:	e014      	b.n	8008412 <_vfiprintf_r+0x156>
 80083e8:	eba0 0308 	sub.w	r3, r0, r8
 80083ec:	fa09 f303 	lsl.w	r3, r9, r3
 80083f0:	4313      	orrs	r3, r2
 80083f2:	9304      	str	r3, [sp, #16]
 80083f4:	46a2      	mov	sl, r4
 80083f6:	e7d2      	b.n	800839e <_vfiprintf_r+0xe2>
 80083f8:	9b03      	ldr	r3, [sp, #12]
 80083fa:	1d19      	adds	r1, r3, #4
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	9103      	str	r1, [sp, #12]
 8008400:	2b00      	cmp	r3, #0
 8008402:	bfbb      	ittet	lt
 8008404:	425b      	neglt	r3, r3
 8008406:	f042 0202 	orrlt.w	r2, r2, #2
 800840a:	9307      	strge	r3, [sp, #28]
 800840c:	9307      	strlt	r3, [sp, #28]
 800840e:	bfb8      	it	lt
 8008410:	9204      	strlt	r2, [sp, #16]
 8008412:	7823      	ldrb	r3, [r4, #0]
 8008414:	2b2e      	cmp	r3, #46	; 0x2e
 8008416:	d10c      	bne.n	8008432 <_vfiprintf_r+0x176>
 8008418:	7863      	ldrb	r3, [r4, #1]
 800841a:	2b2a      	cmp	r3, #42	; 0x2a
 800841c:	d135      	bne.n	800848a <_vfiprintf_r+0x1ce>
 800841e:	9b03      	ldr	r3, [sp, #12]
 8008420:	1d1a      	adds	r2, r3, #4
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	9203      	str	r2, [sp, #12]
 8008426:	2b00      	cmp	r3, #0
 8008428:	bfb8      	it	lt
 800842a:	f04f 33ff 	movlt.w	r3, #4294967295
 800842e:	3402      	adds	r4, #2
 8008430:	9305      	str	r3, [sp, #20]
 8008432:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008518 <_vfiprintf_r+0x25c>
 8008436:	7821      	ldrb	r1, [r4, #0]
 8008438:	2203      	movs	r2, #3
 800843a:	4650      	mov	r0, sl
 800843c:	f7f7 fee8 	bl	8000210 <memchr>
 8008440:	b140      	cbz	r0, 8008454 <_vfiprintf_r+0x198>
 8008442:	2340      	movs	r3, #64	; 0x40
 8008444:	eba0 000a 	sub.w	r0, r0, sl
 8008448:	fa03 f000 	lsl.w	r0, r3, r0
 800844c:	9b04      	ldr	r3, [sp, #16]
 800844e:	4303      	orrs	r3, r0
 8008450:	3401      	adds	r4, #1
 8008452:	9304      	str	r3, [sp, #16]
 8008454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008458:	482c      	ldr	r0, [pc, #176]	; (800850c <_vfiprintf_r+0x250>)
 800845a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800845e:	2206      	movs	r2, #6
 8008460:	f7f7 fed6 	bl	8000210 <memchr>
 8008464:	2800      	cmp	r0, #0
 8008466:	d03f      	beq.n	80084e8 <_vfiprintf_r+0x22c>
 8008468:	4b29      	ldr	r3, [pc, #164]	; (8008510 <_vfiprintf_r+0x254>)
 800846a:	bb1b      	cbnz	r3, 80084b4 <_vfiprintf_r+0x1f8>
 800846c:	9b03      	ldr	r3, [sp, #12]
 800846e:	3307      	adds	r3, #7
 8008470:	f023 0307 	bic.w	r3, r3, #7
 8008474:	3308      	adds	r3, #8
 8008476:	9303      	str	r3, [sp, #12]
 8008478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800847a:	443b      	add	r3, r7
 800847c:	9309      	str	r3, [sp, #36]	; 0x24
 800847e:	e767      	b.n	8008350 <_vfiprintf_r+0x94>
 8008480:	fb0c 3202 	mla	r2, ip, r2, r3
 8008484:	460c      	mov	r4, r1
 8008486:	2001      	movs	r0, #1
 8008488:	e7a5      	b.n	80083d6 <_vfiprintf_r+0x11a>
 800848a:	2300      	movs	r3, #0
 800848c:	3401      	adds	r4, #1
 800848e:	9305      	str	r3, [sp, #20]
 8008490:	4619      	mov	r1, r3
 8008492:	f04f 0c0a 	mov.w	ip, #10
 8008496:	4620      	mov	r0, r4
 8008498:	f810 2b01 	ldrb.w	r2, [r0], #1
 800849c:	3a30      	subs	r2, #48	; 0x30
 800849e:	2a09      	cmp	r2, #9
 80084a0:	d903      	bls.n	80084aa <_vfiprintf_r+0x1ee>
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d0c5      	beq.n	8008432 <_vfiprintf_r+0x176>
 80084a6:	9105      	str	r1, [sp, #20]
 80084a8:	e7c3      	b.n	8008432 <_vfiprintf_r+0x176>
 80084aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80084ae:	4604      	mov	r4, r0
 80084b0:	2301      	movs	r3, #1
 80084b2:	e7f0      	b.n	8008496 <_vfiprintf_r+0x1da>
 80084b4:	ab03      	add	r3, sp, #12
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	462a      	mov	r2, r5
 80084ba:	4b16      	ldr	r3, [pc, #88]	; (8008514 <_vfiprintf_r+0x258>)
 80084bc:	a904      	add	r1, sp, #16
 80084be:	4630      	mov	r0, r6
 80084c0:	f7fc f884 	bl	80045cc <_printf_float>
 80084c4:	4607      	mov	r7, r0
 80084c6:	1c78      	adds	r0, r7, #1
 80084c8:	d1d6      	bne.n	8008478 <_vfiprintf_r+0x1bc>
 80084ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084cc:	07d9      	lsls	r1, r3, #31
 80084ce:	d405      	bmi.n	80084dc <_vfiprintf_r+0x220>
 80084d0:	89ab      	ldrh	r3, [r5, #12]
 80084d2:	059a      	lsls	r2, r3, #22
 80084d4:	d402      	bmi.n	80084dc <_vfiprintf_r+0x220>
 80084d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084d8:	f000 faa1 	bl	8008a1e <__retarget_lock_release_recursive>
 80084dc:	89ab      	ldrh	r3, [r5, #12]
 80084de:	065b      	lsls	r3, r3, #25
 80084e0:	f53f af12 	bmi.w	8008308 <_vfiprintf_r+0x4c>
 80084e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084e6:	e711      	b.n	800830c <_vfiprintf_r+0x50>
 80084e8:	ab03      	add	r3, sp, #12
 80084ea:	9300      	str	r3, [sp, #0]
 80084ec:	462a      	mov	r2, r5
 80084ee:	4b09      	ldr	r3, [pc, #36]	; (8008514 <_vfiprintf_r+0x258>)
 80084f0:	a904      	add	r1, sp, #16
 80084f2:	4630      	mov	r0, r6
 80084f4:	f7fc fb0e 	bl	8004b14 <_printf_i>
 80084f8:	e7e4      	b.n	80084c4 <_vfiprintf_r+0x208>
 80084fa:	bf00      	nop
 80084fc:	0800922c 	.word	0x0800922c
 8008500:	0800924c 	.word	0x0800924c
 8008504:	0800920c 	.word	0x0800920c
 8008508:	080091bc 	.word	0x080091bc
 800850c:	080091c6 	.word	0x080091c6
 8008510:	080045cd 	.word	0x080045cd
 8008514:	08008297 	.word	0x08008297
 8008518:	080091c2 	.word	0x080091c2

0800851c <__swbuf_r>:
 800851c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851e:	460e      	mov	r6, r1
 8008520:	4614      	mov	r4, r2
 8008522:	4605      	mov	r5, r0
 8008524:	b118      	cbz	r0, 800852e <__swbuf_r+0x12>
 8008526:	6983      	ldr	r3, [r0, #24]
 8008528:	b90b      	cbnz	r3, 800852e <__swbuf_r+0x12>
 800852a:	f000 f9d9 	bl	80088e0 <__sinit>
 800852e:	4b21      	ldr	r3, [pc, #132]	; (80085b4 <__swbuf_r+0x98>)
 8008530:	429c      	cmp	r4, r3
 8008532:	d12b      	bne.n	800858c <__swbuf_r+0x70>
 8008534:	686c      	ldr	r4, [r5, #4]
 8008536:	69a3      	ldr	r3, [r4, #24]
 8008538:	60a3      	str	r3, [r4, #8]
 800853a:	89a3      	ldrh	r3, [r4, #12]
 800853c:	071a      	lsls	r2, r3, #28
 800853e:	d52f      	bpl.n	80085a0 <__swbuf_r+0x84>
 8008540:	6923      	ldr	r3, [r4, #16]
 8008542:	b36b      	cbz	r3, 80085a0 <__swbuf_r+0x84>
 8008544:	6923      	ldr	r3, [r4, #16]
 8008546:	6820      	ldr	r0, [r4, #0]
 8008548:	1ac0      	subs	r0, r0, r3
 800854a:	6963      	ldr	r3, [r4, #20]
 800854c:	b2f6      	uxtb	r6, r6
 800854e:	4283      	cmp	r3, r0
 8008550:	4637      	mov	r7, r6
 8008552:	dc04      	bgt.n	800855e <__swbuf_r+0x42>
 8008554:	4621      	mov	r1, r4
 8008556:	4628      	mov	r0, r5
 8008558:	f000 f92e 	bl	80087b8 <_fflush_r>
 800855c:	bb30      	cbnz	r0, 80085ac <__swbuf_r+0x90>
 800855e:	68a3      	ldr	r3, [r4, #8]
 8008560:	3b01      	subs	r3, #1
 8008562:	60a3      	str	r3, [r4, #8]
 8008564:	6823      	ldr	r3, [r4, #0]
 8008566:	1c5a      	adds	r2, r3, #1
 8008568:	6022      	str	r2, [r4, #0]
 800856a:	701e      	strb	r6, [r3, #0]
 800856c:	6963      	ldr	r3, [r4, #20]
 800856e:	3001      	adds	r0, #1
 8008570:	4283      	cmp	r3, r0
 8008572:	d004      	beq.n	800857e <__swbuf_r+0x62>
 8008574:	89a3      	ldrh	r3, [r4, #12]
 8008576:	07db      	lsls	r3, r3, #31
 8008578:	d506      	bpl.n	8008588 <__swbuf_r+0x6c>
 800857a:	2e0a      	cmp	r6, #10
 800857c:	d104      	bne.n	8008588 <__swbuf_r+0x6c>
 800857e:	4621      	mov	r1, r4
 8008580:	4628      	mov	r0, r5
 8008582:	f000 f919 	bl	80087b8 <_fflush_r>
 8008586:	b988      	cbnz	r0, 80085ac <__swbuf_r+0x90>
 8008588:	4638      	mov	r0, r7
 800858a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800858c:	4b0a      	ldr	r3, [pc, #40]	; (80085b8 <__swbuf_r+0x9c>)
 800858e:	429c      	cmp	r4, r3
 8008590:	d101      	bne.n	8008596 <__swbuf_r+0x7a>
 8008592:	68ac      	ldr	r4, [r5, #8]
 8008594:	e7cf      	b.n	8008536 <__swbuf_r+0x1a>
 8008596:	4b09      	ldr	r3, [pc, #36]	; (80085bc <__swbuf_r+0xa0>)
 8008598:	429c      	cmp	r4, r3
 800859a:	bf08      	it	eq
 800859c:	68ec      	ldreq	r4, [r5, #12]
 800859e:	e7ca      	b.n	8008536 <__swbuf_r+0x1a>
 80085a0:	4621      	mov	r1, r4
 80085a2:	4628      	mov	r0, r5
 80085a4:	f000 f80c 	bl	80085c0 <__swsetup_r>
 80085a8:	2800      	cmp	r0, #0
 80085aa:	d0cb      	beq.n	8008544 <__swbuf_r+0x28>
 80085ac:	f04f 37ff 	mov.w	r7, #4294967295
 80085b0:	e7ea      	b.n	8008588 <__swbuf_r+0x6c>
 80085b2:	bf00      	nop
 80085b4:	0800922c 	.word	0x0800922c
 80085b8:	0800924c 	.word	0x0800924c
 80085bc:	0800920c 	.word	0x0800920c

080085c0 <__swsetup_r>:
 80085c0:	4b32      	ldr	r3, [pc, #200]	; (800868c <__swsetup_r+0xcc>)
 80085c2:	b570      	push	{r4, r5, r6, lr}
 80085c4:	681d      	ldr	r5, [r3, #0]
 80085c6:	4606      	mov	r6, r0
 80085c8:	460c      	mov	r4, r1
 80085ca:	b125      	cbz	r5, 80085d6 <__swsetup_r+0x16>
 80085cc:	69ab      	ldr	r3, [r5, #24]
 80085ce:	b913      	cbnz	r3, 80085d6 <__swsetup_r+0x16>
 80085d0:	4628      	mov	r0, r5
 80085d2:	f000 f985 	bl	80088e0 <__sinit>
 80085d6:	4b2e      	ldr	r3, [pc, #184]	; (8008690 <__swsetup_r+0xd0>)
 80085d8:	429c      	cmp	r4, r3
 80085da:	d10f      	bne.n	80085fc <__swsetup_r+0x3c>
 80085dc:	686c      	ldr	r4, [r5, #4]
 80085de:	89a3      	ldrh	r3, [r4, #12]
 80085e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085e4:	0719      	lsls	r1, r3, #28
 80085e6:	d42c      	bmi.n	8008642 <__swsetup_r+0x82>
 80085e8:	06dd      	lsls	r5, r3, #27
 80085ea:	d411      	bmi.n	8008610 <__swsetup_r+0x50>
 80085ec:	2309      	movs	r3, #9
 80085ee:	6033      	str	r3, [r6, #0]
 80085f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80085f4:	81a3      	strh	r3, [r4, #12]
 80085f6:	f04f 30ff 	mov.w	r0, #4294967295
 80085fa:	e03e      	b.n	800867a <__swsetup_r+0xba>
 80085fc:	4b25      	ldr	r3, [pc, #148]	; (8008694 <__swsetup_r+0xd4>)
 80085fe:	429c      	cmp	r4, r3
 8008600:	d101      	bne.n	8008606 <__swsetup_r+0x46>
 8008602:	68ac      	ldr	r4, [r5, #8]
 8008604:	e7eb      	b.n	80085de <__swsetup_r+0x1e>
 8008606:	4b24      	ldr	r3, [pc, #144]	; (8008698 <__swsetup_r+0xd8>)
 8008608:	429c      	cmp	r4, r3
 800860a:	bf08      	it	eq
 800860c:	68ec      	ldreq	r4, [r5, #12]
 800860e:	e7e6      	b.n	80085de <__swsetup_r+0x1e>
 8008610:	0758      	lsls	r0, r3, #29
 8008612:	d512      	bpl.n	800863a <__swsetup_r+0x7a>
 8008614:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008616:	b141      	cbz	r1, 800862a <__swsetup_r+0x6a>
 8008618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800861c:	4299      	cmp	r1, r3
 800861e:	d002      	beq.n	8008626 <__swsetup_r+0x66>
 8008620:	4630      	mov	r0, r6
 8008622:	f7ff fb67 	bl	8007cf4 <_free_r>
 8008626:	2300      	movs	r3, #0
 8008628:	6363      	str	r3, [r4, #52]	; 0x34
 800862a:	89a3      	ldrh	r3, [r4, #12]
 800862c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008630:	81a3      	strh	r3, [r4, #12]
 8008632:	2300      	movs	r3, #0
 8008634:	6063      	str	r3, [r4, #4]
 8008636:	6923      	ldr	r3, [r4, #16]
 8008638:	6023      	str	r3, [r4, #0]
 800863a:	89a3      	ldrh	r3, [r4, #12]
 800863c:	f043 0308 	orr.w	r3, r3, #8
 8008640:	81a3      	strh	r3, [r4, #12]
 8008642:	6923      	ldr	r3, [r4, #16]
 8008644:	b94b      	cbnz	r3, 800865a <__swsetup_r+0x9a>
 8008646:	89a3      	ldrh	r3, [r4, #12]
 8008648:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800864c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008650:	d003      	beq.n	800865a <__swsetup_r+0x9a>
 8008652:	4621      	mov	r1, r4
 8008654:	4630      	mov	r0, r6
 8008656:	f000 fa07 	bl	8008a68 <__smakebuf_r>
 800865a:	89a0      	ldrh	r0, [r4, #12]
 800865c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008660:	f010 0301 	ands.w	r3, r0, #1
 8008664:	d00a      	beq.n	800867c <__swsetup_r+0xbc>
 8008666:	2300      	movs	r3, #0
 8008668:	60a3      	str	r3, [r4, #8]
 800866a:	6963      	ldr	r3, [r4, #20]
 800866c:	425b      	negs	r3, r3
 800866e:	61a3      	str	r3, [r4, #24]
 8008670:	6923      	ldr	r3, [r4, #16]
 8008672:	b943      	cbnz	r3, 8008686 <__swsetup_r+0xc6>
 8008674:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008678:	d1ba      	bne.n	80085f0 <__swsetup_r+0x30>
 800867a:	bd70      	pop	{r4, r5, r6, pc}
 800867c:	0781      	lsls	r1, r0, #30
 800867e:	bf58      	it	pl
 8008680:	6963      	ldrpl	r3, [r4, #20]
 8008682:	60a3      	str	r3, [r4, #8]
 8008684:	e7f4      	b.n	8008670 <__swsetup_r+0xb0>
 8008686:	2000      	movs	r0, #0
 8008688:	e7f7      	b.n	800867a <__swsetup_r+0xba>
 800868a:	bf00      	nop
 800868c:	20000018 	.word	0x20000018
 8008690:	0800922c 	.word	0x0800922c
 8008694:	0800924c 	.word	0x0800924c
 8008698:	0800920c 	.word	0x0800920c

0800869c <abort>:
 800869c:	b508      	push	{r3, lr}
 800869e:	2006      	movs	r0, #6
 80086a0:	f000 fa52 	bl	8008b48 <raise>
 80086a4:	2001      	movs	r0, #1
 80086a6:	f7f9 faa3 	bl	8001bf0 <_exit>
	...

080086ac <__sflush_r>:
 80086ac:	898a      	ldrh	r2, [r1, #12]
 80086ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086b2:	4605      	mov	r5, r0
 80086b4:	0710      	lsls	r0, r2, #28
 80086b6:	460c      	mov	r4, r1
 80086b8:	d458      	bmi.n	800876c <__sflush_r+0xc0>
 80086ba:	684b      	ldr	r3, [r1, #4]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	dc05      	bgt.n	80086cc <__sflush_r+0x20>
 80086c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	dc02      	bgt.n	80086cc <__sflush_r+0x20>
 80086c6:	2000      	movs	r0, #0
 80086c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086ce:	2e00      	cmp	r6, #0
 80086d0:	d0f9      	beq.n	80086c6 <__sflush_r+0x1a>
 80086d2:	2300      	movs	r3, #0
 80086d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80086d8:	682f      	ldr	r7, [r5, #0]
 80086da:	602b      	str	r3, [r5, #0]
 80086dc:	d032      	beq.n	8008744 <__sflush_r+0x98>
 80086de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80086e0:	89a3      	ldrh	r3, [r4, #12]
 80086e2:	075a      	lsls	r2, r3, #29
 80086e4:	d505      	bpl.n	80086f2 <__sflush_r+0x46>
 80086e6:	6863      	ldr	r3, [r4, #4]
 80086e8:	1ac0      	subs	r0, r0, r3
 80086ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80086ec:	b10b      	cbz	r3, 80086f2 <__sflush_r+0x46>
 80086ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086f0:	1ac0      	subs	r0, r0, r3
 80086f2:	2300      	movs	r3, #0
 80086f4:	4602      	mov	r2, r0
 80086f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086f8:	6a21      	ldr	r1, [r4, #32]
 80086fa:	4628      	mov	r0, r5
 80086fc:	47b0      	blx	r6
 80086fe:	1c43      	adds	r3, r0, #1
 8008700:	89a3      	ldrh	r3, [r4, #12]
 8008702:	d106      	bne.n	8008712 <__sflush_r+0x66>
 8008704:	6829      	ldr	r1, [r5, #0]
 8008706:	291d      	cmp	r1, #29
 8008708:	d82c      	bhi.n	8008764 <__sflush_r+0xb8>
 800870a:	4a2a      	ldr	r2, [pc, #168]	; (80087b4 <__sflush_r+0x108>)
 800870c:	40ca      	lsrs	r2, r1
 800870e:	07d6      	lsls	r6, r2, #31
 8008710:	d528      	bpl.n	8008764 <__sflush_r+0xb8>
 8008712:	2200      	movs	r2, #0
 8008714:	6062      	str	r2, [r4, #4]
 8008716:	04d9      	lsls	r1, r3, #19
 8008718:	6922      	ldr	r2, [r4, #16]
 800871a:	6022      	str	r2, [r4, #0]
 800871c:	d504      	bpl.n	8008728 <__sflush_r+0x7c>
 800871e:	1c42      	adds	r2, r0, #1
 8008720:	d101      	bne.n	8008726 <__sflush_r+0x7a>
 8008722:	682b      	ldr	r3, [r5, #0]
 8008724:	b903      	cbnz	r3, 8008728 <__sflush_r+0x7c>
 8008726:	6560      	str	r0, [r4, #84]	; 0x54
 8008728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800872a:	602f      	str	r7, [r5, #0]
 800872c:	2900      	cmp	r1, #0
 800872e:	d0ca      	beq.n	80086c6 <__sflush_r+0x1a>
 8008730:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008734:	4299      	cmp	r1, r3
 8008736:	d002      	beq.n	800873e <__sflush_r+0x92>
 8008738:	4628      	mov	r0, r5
 800873a:	f7ff fadb 	bl	8007cf4 <_free_r>
 800873e:	2000      	movs	r0, #0
 8008740:	6360      	str	r0, [r4, #52]	; 0x34
 8008742:	e7c1      	b.n	80086c8 <__sflush_r+0x1c>
 8008744:	6a21      	ldr	r1, [r4, #32]
 8008746:	2301      	movs	r3, #1
 8008748:	4628      	mov	r0, r5
 800874a:	47b0      	blx	r6
 800874c:	1c41      	adds	r1, r0, #1
 800874e:	d1c7      	bne.n	80086e0 <__sflush_r+0x34>
 8008750:	682b      	ldr	r3, [r5, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d0c4      	beq.n	80086e0 <__sflush_r+0x34>
 8008756:	2b1d      	cmp	r3, #29
 8008758:	d001      	beq.n	800875e <__sflush_r+0xb2>
 800875a:	2b16      	cmp	r3, #22
 800875c:	d101      	bne.n	8008762 <__sflush_r+0xb6>
 800875e:	602f      	str	r7, [r5, #0]
 8008760:	e7b1      	b.n	80086c6 <__sflush_r+0x1a>
 8008762:	89a3      	ldrh	r3, [r4, #12]
 8008764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008768:	81a3      	strh	r3, [r4, #12]
 800876a:	e7ad      	b.n	80086c8 <__sflush_r+0x1c>
 800876c:	690f      	ldr	r7, [r1, #16]
 800876e:	2f00      	cmp	r7, #0
 8008770:	d0a9      	beq.n	80086c6 <__sflush_r+0x1a>
 8008772:	0793      	lsls	r3, r2, #30
 8008774:	680e      	ldr	r6, [r1, #0]
 8008776:	bf08      	it	eq
 8008778:	694b      	ldreq	r3, [r1, #20]
 800877a:	600f      	str	r7, [r1, #0]
 800877c:	bf18      	it	ne
 800877e:	2300      	movne	r3, #0
 8008780:	eba6 0807 	sub.w	r8, r6, r7
 8008784:	608b      	str	r3, [r1, #8]
 8008786:	f1b8 0f00 	cmp.w	r8, #0
 800878a:	dd9c      	ble.n	80086c6 <__sflush_r+0x1a>
 800878c:	6a21      	ldr	r1, [r4, #32]
 800878e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008790:	4643      	mov	r3, r8
 8008792:	463a      	mov	r2, r7
 8008794:	4628      	mov	r0, r5
 8008796:	47b0      	blx	r6
 8008798:	2800      	cmp	r0, #0
 800879a:	dc06      	bgt.n	80087aa <__sflush_r+0xfe>
 800879c:	89a3      	ldrh	r3, [r4, #12]
 800879e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087a2:	81a3      	strh	r3, [r4, #12]
 80087a4:	f04f 30ff 	mov.w	r0, #4294967295
 80087a8:	e78e      	b.n	80086c8 <__sflush_r+0x1c>
 80087aa:	4407      	add	r7, r0
 80087ac:	eba8 0800 	sub.w	r8, r8, r0
 80087b0:	e7e9      	b.n	8008786 <__sflush_r+0xda>
 80087b2:	bf00      	nop
 80087b4:	20400001 	.word	0x20400001

080087b8 <_fflush_r>:
 80087b8:	b538      	push	{r3, r4, r5, lr}
 80087ba:	690b      	ldr	r3, [r1, #16]
 80087bc:	4605      	mov	r5, r0
 80087be:	460c      	mov	r4, r1
 80087c0:	b913      	cbnz	r3, 80087c8 <_fflush_r+0x10>
 80087c2:	2500      	movs	r5, #0
 80087c4:	4628      	mov	r0, r5
 80087c6:	bd38      	pop	{r3, r4, r5, pc}
 80087c8:	b118      	cbz	r0, 80087d2 <_fflush_r+0x1a>
 80087ca:	6983      	ldr	r3, [r0, #24]
 80087cc:	b90b      	cbnz	r3, 80087d2 <_fflush_r+0x1a>
 80087ce:	f000 f887 	bl	80088e0 <__sinit>
 80087d2:	4b14      	ldr	r3, [pc, #80]	; (8008824 <_fflush_r+0x6c>)
 80087d4:	429c      	cmp	r4, r3
 80087d6:	d11b      	bne.n	8008810 <_fflush_r+0x58>
 80087d8:	686c      	ldr	r4, [r5, #4]
 80087da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d0ef      	beq.n	80087c2 <_fflush_r+0xa>
 80087e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80087e4:	07d0      	lsls	r0, r2, #31
 80087e6:	d404      	bmi.n	80087f2 <_fflush_r+0x3a>
 80087e8:	0599      	lsls	r1, r3, #22
 80087ea:	d402      	bmi.n	80087f2 <_fflush_r+0x3a>
 80087ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087ee:	f000 f915 	bl	8008a1c <__retarget_lock_acquire_recursive>
 80087f2:	4628      	mov	r0, r5
 80087f4:	4621      	mov	r1, r4
 80087f6:	f7ff ff59 	bl	80086ac <__sflush_r>
 80087fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087fc:	07da      	lsls	r2, r3, #31
 80087fe:	4605      	mov	r5, r0
 8008800:	d4e0      	bmi.n	80087c4 <_fflush_r+0xc>
 8008802:	89a3      	ldrh	r3, [r4, #12]
 8008804:	059b      	lsls	r3, r3, #22
 8008806:	d4dd      	bmi.n	80087c4 <_fflush_r+0xc>
 8008808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800880a:	f000 f908 	bl	8008a1e <__retarget_lock_release_recursive>
 800880e:	e7d9      	b.n	80087c4 <_fflush_r+0xc>
 8008810:	4b05      	ldr	r3, [pc, #20]	; (8008828 <_fflush_r+0x70>)
 8008812:	429c      	cmp	r4, r3
 8008814:	d101      	bne.n	800881a <_fflush_r+0x62>
 8008816:	68ac      	ldr	r4, [r5, #8]
 8008818:	e7df      	b.n	80087da <_fflush_r+0x22>
 800881a:	4b04      	ldr	r3, [pc, #16]	; (800882c <_fflush_r+0x74>)
 800881c:	429c      	cmp	r4, r3
 800881e:	bf08      	it	eq
 8008820:	68ec      	ldreq	r4, [r5, #12]
 8008822:	e7da      	b.n	80087da <_fflush_r+0x22>
 8008824:	0800922c 	.word	0x0800922c
 8008828:	0800924c 	.word	0x0800924c
 800882c:	0800920c 	.word	0x0800920c

08008830 <std>:
 8008830:	2300      	movs	r3, #0
 8008832:	b510      	push	{r4, lr}
 8008834:	4604      	mov	r4, r0
 8008836:	e9c0 3300 	strd	r3, r3, [r0]
 800883a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800883e:	6083      	str	r3, [r0, #8]
 8008840:	8181      	strh	r1, [r0, #12]
 8008842:	6643      	str	r3, [r0, #100]	; 0x64
 8008844:	81c2      	strh	r2, [r0, #14]
 8008846:	6183      	str	r3, [r0, #24]
 8008848:	4619      	mov	r1, r3
 800884a:	2208      	movs	r2, #8
 800884c:	305c      	adds	r0, #92	; 0x5c
 800884e:	f7fb fe15 	bl	800447c <memset>
 8008852:	4b05      	ldr	r3, [pc, #20]	; (8008868 <std+0x38>)
 8008854:	6263      	str	r3, [r4, #36]	; 0x24
 8008856:	4b05      	ldr	r3, [pc, #20]	; (800886c <std+0x3c>)
 8008858:	62a3      	str	r3, [r4, #40]	; 0x28
 800885a:	4b05      	ldr	r3, [pc, #20]	; (8008870 <std+0x40>)
 800885c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800885e:	4b05      	ldr	r3, [pc, #20]	; (8008874 <std+0x44>)
 8008860:	6224      	str	r4, [r4, #32]
 8008862:	6323      	str	r3, [r4, #48]	; 0x30
 8008864:	bd10      	pop	{r4, pc}
 8008866:	bf00      	nop
 8008868:	08008b81 	.word	0x08008b81
 800886c:	08008ba3 	.word	0x08008ba3
 8008870:	08008bdb 	.word	0x08008bdb
 8008874:	08008bff 	.word	0x08008bff

08008878 <_cleanup_r>:
 8008878:	4901      	ldr	r1, [pc, #4]	; (8008880 <_cleanup_r+0x8>)
 800887a:	f000 b8af 	b.w	80089dc <_fwalk_reent>
 800887e:	bf00      	nop
 8008880:	080087b9 	.word	0x080087b9

08008884 <__sfmoreglue>:
 8008884:	b570      	push	{r4, r5, r6, lr}
 8008886:	1e4a      	subs	r2, r1, #1
 8008888:	2568      	movs	r5, #104	; 0x68
 800888a:	4355      	muls	r5, r2
 800888c:	460e      	mov	r6, r1
 800888e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008892:	f7ff fa7f 	bl	8007d94 <_malloc_r>
 8008896:	4604      	mov	r4, r0
 8008898:	b140      	cbz	r0, 80088ac <__sfmoreglue+0x28>
 800889a:	2100      	movs	r1, #0
 800889c:	e9c0 1600 	strd	r1, r6, [r0]
 80088a0:	300c      	adds	r0, #12
 80088a2:	60a0      	str	r0, [r4, #8]
 80088a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80088a8:	f7fb fde8 	bl	800447c <memset>
 80088ac:	4620      	mov	r0, r4
 80088ae:	bd70      	pop	{r4, r5, r6, pc}

080088b0 <__sfp_lock_acquire>:
 80088b0:	4801      	ldr	r0, [pc, #4]	; (80088b8 <__sfp_lock_acquire+0x8>)
 80088b2:	f000 b8b3 	b.w	8008a1c <__retarget_lock_acquire_recursive>
 80088b6:	bf00      	nop
 80088b8:	20000464 	.word	0x20000464

080088bc <__sfp_lock_release>:
 80088bc:	4801      	ldr	r0, [pc, #4]	; (80088c4 <__sfp_lock_release+0x8>)
 80088be:	f000 b8ae 	b.w	8008a1e <__retarget_lock_release_recursive>
 80088c2:	bf00      	nop
 80088c4:	20000464 	.word	0x20000464

080088c8 <__sinit_lock_acquire>:
 80088c8:	4801      	ldr	r0, [pc, #4]	; (80088d0 <__sinit_lock_acquire+0x8>)
 80088ca:	f000 b8a7 	b.w	8008a1c <__retarget_lock_acquire_recursive>
 80088ce:	bf00      	nop
 80088d0:	2000045f 	.word	0x2000045f

080088d4 <__sinit_lock_release>:
 80088d4:	4801      	ldr	r0, [pc, #4]	; (80088dc <__sinit_lock_release+0x8>)
 80088d6:	f000 b8a2 	b.w	8008a1e <__retarget_lock_release_recursive>
 80088da:	bf00      	nop
 80088dc:	2000045f 	.word	0x2000045f

080088e0 <__sinit>:
 80088e0:	b510      	push	{r4, lr}
 80088e2:	4604      	mov	r4, r0
 80088e4:	f7ff fff0 	bl	80088c8 <__sinit_lock_acquire>
 80088e8:	69a3      	ldr	r3, [r4, #24]
 80088ea:	b11b      	cbz	r3, 80088f4 <__sinit+0x14>
 80088ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088f0:	f7ff bff0 	b.w	80088d4 <__sinit_lock_release>
 80088f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80088f8:	6523      	str	r3, [r4, #80]	; 0x50
 80088fa:	4b13      	ldr	r3, [pc, #76]	; (8008948 <__sinit+0x68>)
 80088fc:	4a13      	ldr	r2, [pc, #76]	; (800894c <__sinit+0x6c>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	62a2      	str	r2, [r4, #40]	; 0x28
 8008902:	42a3      	cmp	r3, r4
 8008904:	bf04      	itt	eq
 8008906:	2301      	moveq	r3, #1
 8008908:	61a3      	streq	r3, [r4, #24]
 800890a:	4620      	mov	r0, r4
 800890c:	f000 f820 	bl	8008950 <__sfp>
 8008910:	6060      	str	r0, [r4, #4]
 8008912:	4620      	mov	r0, r4
 8008914:	f000 f81c 	bl	8008950 <__sfp>
 8008918:	60a0      	str	r0, [r4, #8]
 800891a:	4620      	mov	r0, r4
 800891c:	f000 f818 	bl	8008950 <__sfp>
 8008920:	2200      	movs	r2, #0
 8008922:	60e0      	str	r0, [r4, #12]
 8008924:	2104      	movs	r1, #4
 8008926:	6860      	ldr	r0, [r4, #4]
 8008928:	f7ff ff82 	bl	8008830 <std>
 800892c:	68a0      	ldr	r0, [r4, #8]
 800892e:	2201      	movs	r2, #1
 8008930:	2109      	movs	r1, #9
 8008932:	f7ff ff7d 	bl	8008830 <std>
 8008936:	68e0      	ldr	r0, [r4, #12]
 8008938:	2202      	movs	r2, #2
 800893a:	2112      	movs	r1, #18
 800893c:	f7ff ff78 	bl	8008830 <std>
 8008940:	2301      	movs	r3, #1
 8008942:	61a3      	str	r3, [r4, #24]
 8008944:	e7d2      	b.n	80088ec <__sinit+0xc>
 8008946:	bf00      	nop
 8008948:	08008db4 	.word	0x08008db4
 800894c:	08008879 	.word	0x08008879

08008950 <__sfp>:
 8008950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008952:	4607      	mov	r7, r0
 8008954:	f7ff ffac 	bl	80088b0 <__sfp_lock_acquire>
 8008958:	4b1e      	ldr	r3, [pc, #120]	; (80089d4 <__sfp+0x84>)
 800895a:	681e      	ldr	r6, [r3, #0]
 800895c:	69b3      	ldr	r3, [r6, #24]
 800895e:	b913      	cbnz	r3, 8008966 <__sfp+0x16>
 8008960:	4630      	mov	r0, r6
 8008962:	f7ff ffbd 	bl	80088e0 <__sinit>
 8008966:	3648      	adds	r6, #72	; 0x48
 8008968:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800896c:	3b01      	subs	r3, #1
 800896e:	d503      	bpl.n	8008978 <__sfp+0x28>
 8008970:	6833      	ldr	r3, [r6, #0]
 8008972:	b30b      	cbz	r3, 80089b8 <__sfp+0x68>
 8008974:	6836      	ldr	r6, [r6, #0]
 8008976:	e7f7      	b.n	8008968 <__sfp+0x18>
 8008978:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800897c:	b9d5      	cbnz	r5, 80089b4 <__sfp+0x64>
 800897e:	4b16      	ldr	r3, [pc, #88]	; (80089d8 <__sfp+0x88>)
 8008980:	60e3      	str	r3, [r4, #12]
 8008982:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008986:	6665      	str	r5, [r4, #100]	; 0x64
 8008988:	f000 f847 	bl	8008a1a <__retarget_lock_init_recursive>
 800898c:	f7ff ff96 	bl	80088bc <__sfp_lock_release>
 8008990:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008994:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008998:	6025      	str	r5, [r4, #0]
 800899a:	61a5      	str	r5, [r4, #24]
 800899c:	2208      	movs	r2, #8
 800899e:	4629      	mov	r1, r5
 80089a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80089a4:	f7fb fd6a 	bl	800447c <memset>
 80089a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80089ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80089b0:	4620      	mov	r0, r4
 80089b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089b4:	3468      	adds	r4, #104	; 0x68
 80089b6:	e7d9      	b.n	800896c <__sfp+0x1c>
 80089b8:	2104      	movs	r1, #4
 80089ba:	4638      	mov	r0, r7
 80089bc:	f7ff ff62 	bl	8008884 <__sfmoreglue>
 80089c0:	4604      	mov	r4, r0
 80089c2:	6030      	str	r0, [r6, #0]
 80089c4:	2800      	cmp	r0, #0
 80089c6:	d1d5      	bne.n	8008974 <__sfp+0x24>
 80089c8:	f7ff ff78 	bl	80088bc <__sfp_lock_release>
 80089cc:	230c      	movs	r3, #12
 80089ce:	603b      	str	r3, [r7, #0]
 80089d0:	e7ee      	b.n	80089b0 <__sfp+0x60>
 80089d2:	bf00      	nop
 80089d4:	08008db4 	.word	0x08008db4
 80089d8:	ffff0001 	.word	0xffff0001

080089dc <_fwalk_reent>:
 80089dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089e0:	4606      	mov	r6, r0
 80089e2:	4688      	mov	r8, r1
 80089e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80089e8:	2700      	movs	r7, #0
 80089ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80089ee:	f1b9 0901 	subs.w	r9, r9, #1
 80089f2:	d505      	bpl.n	8008a00 <_fwalk_reent+0x24>
 80089f4:	6824      	ldr	r4, [r4, #0]
 80089f6:	2c00      	cmp	r4, #0
 80089f8:	d1f7      	bne.n	80089ea <_fwalk_reent+0xe>
 80089fa:	4638      	mov	r0, r7
 80089fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a00:	89ab      	ldrh	r3, [r5, #12]
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d907      	bls.n	8008a16 <_fwalk_reent+0x3a>
 8008a06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	d003      	beq.n	8008a16 <_fwalk_reent+0x3a>
 8008a0e:	4629      	mov	r1, r5
 8008a10:	4630      	mov	r0, r6
 8008a12:	47c0      	blx	r8
 8008a14:	4307      	orrs	r7, r0
 8008a16:	3568      	adds	r5, #104	; 0x68
 8008a18:	e7e9      	b.n	80089ee <_fwalk_reent+0x12>

08008a1a <__retarget_lock_init_recursive>:
 8008a1a:	4770      	bx	lr

08008a1c <__retarget_lock_acquire_recursive>:
 8008a1c:	4770      	bx	lr

08008a1e <__retarget_lock_release_recursive>:
 8008a1e:	4770      	bx	lr

08008a20 <__swhatbuf_r>:
 8008a20:	b570      	push	{r4, r5, r6, lr}
 8008a22:	460e      	mov	r6, r1
 8008a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a28:	2900      	cmp	r1, #0
 8008a2a:	b096      	sub	sp, #88	; 0x58
 8008a2c:	4614      	mov	r4, r2
 8008a2e:	461d      	mov	r5, r3
 8008a30:	da07      	bge.n	8008a42 <__swhatbuf_r+0x22>
 8008a32:	2300      	movs	r3, #0
 8008a34:	602b      	str	r3, [r5, #0]
 8008a36:	89b3      	ldrh	r3, [r6, #12]
 8008a38:	061a      	lsls	r2, r3, #24
 8008a3a:	d410      	bmi.n	8008a5e <__swhatbuf_r+0x3e>
 8008a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a40:	e00e      	b.n	8008a60 <__swhatbuf_r+0x40>
 8008a42:	466a      	mov	r2, sp
 8008a44:	f000 f902 	bl	8008c4c <_fstat_r>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	dbf2      	blt.n	8008a32 <__swhatbuf_r+0x12>
 8008a4c:	9a01      	ldr	r2, [sp, #4]
 8008a4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008a56:	425a      	negs	r2, r3
 8008a58:	415a      	adcs	r2, r3
 8008a5a:	602a      	str	r2, [r5, #0]
 8008a5c:	e7ee      	b.n	8008a3c <__swhatbuf_r+0x1c>
 8008a5e:	2340      	movs	r3, #64	; 0x40
 8008a60:	2000      	movs	r0, #0
 8008a62:	6023      	str	r3, [r4, #0]
 8008a64:	b016      	add	sp, #88	; 0x58
 8008a66:	bd70      	pop	{r4, r5, r6, pc}

08008a68 <__smakebuf_r>:
 8008a68:	898b      	ldrh	r3, [r1, #12]
 8008a6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a6c:	079d      	lsls	r5, r3, #30
 8008a6e:	4606      	mov	r6, r0
 8008a70:	460c      	mov	r4, r1
 8008a72:	d507      	bpl.n	8008a84 <__smakebuf_r+0x1c>
 8008a74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a78:	6023      	str	r3, [r4, #0]
 8008a7a:	6123      	str	r3, [r4, #16]
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	6163      	str	r3, [r4, #20]
 8008a80:	b002      	add	sp, #8
 8008a82:	bd70      	pop	{r4, r5, r6, pc}
 8008a84:	ab01      	add	r3, sp, #4
 8008a86:	466a      	mov	r2, sp
 8008a88:	f7ff ffca 	bl	8008a20 <__swhatbuf_r>
 8008a8c:	9900      	ldr	r1, [sp, #0]
 8008a8e:	4605      	mov	r5, r0
 8008a90:	4630      	mov	r0, r6
 8008a92:	f7ff f97f 	bl	8007d94 <_malloc_r>
 8008a96:	b948      	cbnz	r0, 8008aac <__smakebuf_r+0x44>
 8008a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a9c:	059a      	lsls	r2, r3, #22
 8008a9e:	d4ef      	bmi.n	8008a80 <__smakebuf_r+0x18>
 8008aa0:	f023 0303 	bic.w	r3, r3, #3
 8008aa4:	f043 0302 	orr.w	r3, r3, #2
 8008aa8:	81a3      	strh	r3, [r4, #12]
 8008aaa:	e7e3      	b.n	8008a74 <__smakebuf_r+0xc>
 8008aac:	4b0d      	ldr	r3, [pc, #52]	; (8008ae4 <__smakebuf_r+0x7c>)
 8008aae:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ab0:	89a3      	ldrh	r3, [r4, #12]
 8008ab2:	6020      	str	r0, [r4, #0]
 8008ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ab8:	81a3      	strh	r3, [r4, #12]
 8008aba:	9b00      	ldr	r3, [sp, #0]
 8008abc:	6163      	str	r3, [r4, #20]
 8008abe:	9b01      	ldr	r3, [sp, #4]
 8008ac0:	6120      	str	r0, [r4, #16]
 8008ac2:	b15b      	cbz	r3, 8008adc <__smakebuf_r+0x74>
 8008ac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ac8:	4630      	mov	r0, r6
 8008aca:	f000 f8d1 	bl	8008c70 <_isatty_r>
 8008ace:	b128      	cbz	r0, 8008adc <__smakebuf_r+0x74>
 8008ad0:	89a3      	ldrh	r3, [r4, #12]
 8008ad2:	f023 0303 	bic.w	r3, r3, #3
 8008ad6:	f043 0301 	orr.w	r3, r3, #1
 8008ada:	81a3      	strh	r3, [r4, #12]
 8008adc:	89a0      	ldrh	r0, [r4, #12]
 8008ade:	4305      	orrs	r5, r0
 8008ae0:	81a5      	strh	r5, [r4, #12]
 8008ae2:	e7cd      	b.n	8008a80 <__smakebuf_r+0x18>
 8008ae4:	08008879 	.word	0x08008879

08008ae8 <_malloc_usable_size_r>:
 8008ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008aec:	1f18      	subs	r0, r3, #4
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	bfbc      	itt	lt
 8008af2:	580b      	ldrlt	r3, [r1, r0]
 8008af4:	18c0      	addlt	r0, r0, r3
 8008af6:	4770      	bx	lr

08008af8 <_raise_r>:
 8008af8:	291f      	cmp	r1, #31
 8008afa:	b538      	push	{r3, r4, r5, lr}
 8008afc:	4604      	mov	r4, r0
 8008afe:	460d      	mov	r5, r1
 8008b00:	d904      	bls.n	8008b0c <_raise_r+0x14>
 8008b02:	2316      	movs	r3, #22
 8008b04:	6003      	str	r3, [r0, #0]
 8008b06:	f04f 30ff 	mov.w	r0, #4294967295
 8008b0a:	bd38      	pop	{r3, r4, r5, pc}
 8008b0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008b0e:	b112      	cbz	r2, 8008b16 <_raise_r+0x1e>
 8008b10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b14:	b94b      	cbnz	r3, 8008b2a <_raise_r+0x32>
 8008b16:	4620      	mov	r0, r4
 8008b18:	f000 f830 	bl	8008b7c <_getpid_r>
 8008b1c:	462a      	mov	r2, r5
 8008b1e:	4601      	mov	r1, r0
 8008b20:	4620      	mov	r0, r4
 8008b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b26:	f000 b817 	b.w	8008b58 <_kill_r>
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d00a      	beq.n	8008b44 <_raise_r+0x4c>
 8008b2e:	1c59      	adds	r1, r3, #1
 8008b30:	d103      	bne.n	8008b3a <_raise_r+0x42>
 8008b32:	2316      	movs	r3, #22
 8008b34:	6003      	str	r3, [r0, #0]
 8008b36:	2001      	movs	r0, #1
 8008b38:	e7e7      	b.n	8008b0a <_raise_r+0x12>
 8008b3a:	2400      	movs	r4, #0
 8008b3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008b40:	4628      	mov	r0, r5
 8008b42:	4798      	blx	r3
 8008b44:	2000      	movs	r0, #0
 8008b46:	e7e0      	b.n	8008b0a <_raise_r+0x12>

08008b48 <raise>:
 8008b48:	4b02      	ldr	r3, [pc, #8]	; (8008b54 <raise+0xc>)
 8008b4a:	4601      	mov	r1, r0
 8008b4c:	6818      	ldr	r0, [r3, #0]
 8008b4e:	f7ff bfd3 	b.w	8008af8 <_raise_r>
 8008b52:	bf00      	nop
 8008b54:	20000018 	.word	0x20000018

08008b58 <_kill_r>:
 8008b58:	b538      	push	{r3, r4, r5, lr}
 8008b5a:	4d07      	ldr	r5, [pc, #28]	; (8008b78 <_kill_r+0x20>)
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	4604      	mov	r4, r0
 8008b60:	4608      	mov	r0, r1
 8008b62:	4611      	mov	r1, r2
 8008b64:	602b      	str	r3, [r5, #0]
 8008b66:	f7f9 f833 	bl	8001bd0 <_kill>
 8008b6a:	1c43      	adds	r3, r0, #1
 8008b6c:	d102      	bne.n	8008b74 <_kill_r+0x1c>
 8008b6e:	682b      	ldr	r3, [r5, #0]
 8008b70:	b103      	cbz	r3, 8008b74 <_kill_r+0x1c>
 8008b72:	6023      	str	r3, [r4, #0]
 8008b74:	bd38      	pop	{r3, r4, r5, pc}
 8008b76:	bf00      	nop
 8008b78:	20000458 	.word	0x20000458

08008b7c <_getpid_r>:
 8008b7c:	f7f9 b820 	b.w	8001bc0 <_getpid>

08008b80 <__sread>:
 8008b80:	b510      	push	{r4, lr}
 8008b82:	460c      	mov	r4, r1
 8008b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b88:	f000 f894 	bl	8008cb4 <_read_r>
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	bfab      	itete	ge
 8008b90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b92:	89a3      	ldrhlt	r3, [r4, #12]
 8008b94:	181b      	addge	r3, r3, r0
 8008b96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b9a:	bfac      	ite	ge
 8008b9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b9e:	81a3      	strhlt	r3, [r4, #12]
 8008ba0:	bd10      	pop	{r4, pc}

08008ba2 <__swrite>:
 8008ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba6:	461f      	mov	r7, r3
 8008ba8:	898b      	ldrh	r3, [r1, #12]
 8008baa:	05db      	lsls	r3, r3, #23
 8008bac:	4605      	mov	r5, r0
 8008bae:	460c      	mov	r4, r1
 8008bb0:	4616      	mov	r6, r2
 8008bb2:	d505      	bpl.n	8008bc0 <__swrite+0x1e>
 8008bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bb8:	2302      	movs	r3, #2
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f000 f868 	bl	8008c90 <_lseek_r>
 8008bc0:	89a3      	ldrh	r3, [r4, #12]
 8008bc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bca:	81a3      	strh	r3, [r4, #12]
 8008bcc:	4632      	mov	r2, r6
 8008bce:	463b      	mov	r3, r7
 8008bd0:	4628      	mov	r0, r5
 8008bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bd6:	f000 b817 	b.w	8008c08 <_write_r>

08008bda <__sseek>:
 8008bda:	b510      	push	{r4, lr}
 8008bdc:	460c      	mov	r4, r1
 8008bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008be2:	f000 f855 	bl	8008c90 <_lseek_r>
 8008be6:	1c43      	adds	r3, r0, #1
 8008be8:	89a3      	ldrh	r3, [r4, #12]
 8008bea:	bf15      	itete	ne
 8008bec:	6560      	strne	r0, [r4, #84]	; 0x54
 8008bee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008bf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008bf6:	81a3      	strheq	r3, [r4, #12]
 8008bf8:	bf18      	it	ne
 8008bfa:	81a3      	strhne	r3, [r4, #12]
 8008bfc:	bd10      	pop	{r4, pc}

08008bfe <__sclose>:
 8008bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c02:	f000 b813 	b.w	8008c2c <_close_r>
	...

08008c08 <_write_r>:
 8008c08:	b538      	push	{r3, r4, r5, lr}
 8008c0a:	4d07      	ldr	r5, [pc, #28]	; (8008c28 <_write_r+0x20>)
 8008c0c:	4604      	mov	r4, r0
 8008c0e:	4608      	mov	r0, r1
 8008c10:	4611      	mov	r1, r2
 8008c12:	2200      	movs	r2, #0
 8008c14:	602a      	str	r2, [r5, #0]
 8008c16:	461a      	mov	r2, r3
 8008c18:	f7f9 f811 	bl	8001c3e <_write>
 8008c1c:	1c43      	adds	r3, r0, #1
 8008c1e:	d102      	bne.n	8008c26 <_write_r+0x1e>
 8008c20:	682b      	ldr	r3, [r5, #0]
 8008c22:	b103      	cbz	r3, 8008c26 <_write_r+0x1e>
 8008c24:	6023      	str	r3, [r4, #0]
 8008c26:	bd38      	pop	{r3, r4, r5, pc}
 8008c28:	20000458 	.word	0x20000458

08008c2c <_close_r>:
 8008c2c:	b538      	push	{r3, r4, r5, lr}
 8008c2e:	4d06      	ldr	r5, [pc, #24]	; (8008c48 <_close_r+0x1c>)
 8008c30:	2300      	movs	r3, #0
 8008c32:	4604      	mov	r4, r0
 8008c34:	4608      	mov	r0, r1
 8008c36:	602b      	str	r3, [r5, #0]
 8008c38:	f7f9 f81d 	bl	8001c76 <_close>
 8008c3c:	1c43      	adds	r3, r0, #1
 8008c3e:	d102      	bne.n	8008c46 <_close_r+0x1a>
 8008c40:	682b      	ldr	r3, [r5, #0]
 8008c42:	b103      	cbz	r3, 8008c46 <_close_r+0x1a>
 8008c44:	6023      	str	r3, [r4, #0]
 8008c46:	bd38      	pop	{r3, r4, r5, pc}
 8008c48:	20000458 	.word	0x20000458

08008c4c <_fstat_r>:
 8008c4c:	b538      	push	{r3, r4, r5, lr}
 8008c4e:	4d07      	ldr	r5, [pc, #28]	; (8008c6c <_fstat_r+0x20>)
 8008c50:	2300      	movs	r3, #0
 8008c52:	4604      	mov	r4, r0
 8008c54:	4608      	mov	r0, r1
 8008c56:	4611      	mov	r1, r2
 8008c58:	602b      	str	r3, [r5, #0]
 8008c5a:	f7f9 f818 	bl	8001c8e <_fstat>
 8008c5e:	1c43      	adds	r3, r0, #1
 8008c60:	d102      	bne.n	8008c68 <_fstat_r+0x1c>
 8008c62:	682b      	ldr	r3, [r5, #0]
 8008c64:	b103      	cbz	r3, 8008c68 <_fstat_r+0x1c>
 8008c66:	6023      	str	r3, [r4, #0]
 8008c68:	bd38      	pop	{r3, r4, r5, pc}
 8008c6a:	bf00      	nop
 8008c6c:	20000458 	.word	0x20000458

08008c70 <_isatty_r>:
 8008c70:	b538      	push	{r3, r4, r5, lr}
 8008c72:	4d06      	ldr	r5, [pc, #24]	; (8008c8c <_isatty_r+0x1c>)
 8008c74:	2300      	movs	r3, #0
 8008c76:	4604      	mov	r4, r0
 8008c78:	4608      	mov	r0, r1
 8008c7a:	602b      	str	r3, [r5, #0]
 8008c7c:	f7f9 f817 	bl	8001cae <_isatty>
 8008c80:	1c43      	adds	r3, r0, #1
 8008c82:	d102      	bne.n	8008c8a <_isatty_r+0x1a>
 8008c84:	682b      	ldr	r3, [r5, #0]
 8008c86:	b103      	cbz	r3, 8008c8a <_isatty_r+0x1a>
 8008c88:	6023      	str	r3, [r4, #0]
 8008c8a:	bd38      	pop	{r3, r4, r5, pc}
 8008c8c:	20000458 	.word	0x20000458

08008c90 <_lseek_r>:
 8008c90:	b538      	push	{r3, r4, r5, lr}
 8008c92:	4d07      	ldr	r5, [pc, #28]	; (8008cb0 <_lseek_r+0x20>)
 8008c94:	4604      	mov	r4, r0
 8008c96:	4608      	mov	r0, r1
 8008c98:	4611      	mov	r1, r2
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	602a      	str	r2, [r5, #0]
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	f7f9 f810 	bl	8001cc4 <_lseek>
 8008ca4:	1c43      	adds	r3, r0, #1
 8008ca6:	d102      	bne.n	8008cae <_lseek_r+0x1e>
 8008ca8:	682b      	ldr	r3, [r5, #0]
 8008caa:	b103      	cbz	r3, 8008cae <_lseek_r+0x1e>
 8008cac:	6023      	str	r3, [r4, #0]
 8008cae:	bd38      	pop	{r3, r4, r5, pc}
 8008cb0:	20000458 	.word	0x20000458

08008cb4 <_read_r>:
 8008cb4:	b538      	push	{r3, r4, r5, lr}
 8008cb6:	4d07      	ldr	r5, [pc, #28]	; (8008cd4 <_read_r+0x20>)
 8008cb8:	4604      	mov	r4, r0
 8008cba:	4608      	mov	r0, r1
 8008cbc:	4611      	mov	r1, r2
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	602a      	str	r2, [r5, #0]
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	f7f8 ff9e 	bl	8001c04 <_read>
 8008cc8:	1c43      	adds	r3, r0, #1
 8008cca:	d102      	bne.n	8008cd2 <_read_r+0x1e>
 8008ccc:	682b      	ldr	r3, [r5, #0]
 8008cce:	b103      	cbz	r3, 8008cd2 <_read_r+0x1e>
 8008cd0:	6023      	str	r3, [r4, #0]
 8008cd2:	bd38      	pop	{r3, r4, r5, pc}
 8008cd4:	20000458 	.word	0x20000458

08008cd8 <_init>:
 8008cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cda:	bf00      	nop
 8008cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cde:	bc08      	pop	{r3}
 8008ce0:	469e      	mov	lr, r3
 8008ce2:	4770      	bx	lr

08008ce4 <_fini>:
 8008ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce6:	bf00      	nop
 8008ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cea:	bc08      	pop	{r3}
 8008cec:	469e      	mov	lr, r3
 8008cee:	4770      	bx	lr
